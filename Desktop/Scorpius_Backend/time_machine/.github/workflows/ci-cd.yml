name: "🚀 SCORPIUS Time Machine CI/CD"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: guardefi/scorpius-time-machine
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  backend-quality:
    name: "🐍 Backend Quality"
    runs-on: ubuntu-latest
    
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🐍 Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: "📦 Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort pylint bandit safety

      - name: "📊 Code Formatting Check"
        run: |
          black --check time_machine/
          isort --check-only time_machine/

      - name: "🔍 Lint Check"
        run: pylint time_machine/ || true

      - name: "🔒 Security Scan"
        run: |
          bandit -r time_machine/ || true
          safety check || true

  frontend-quality:
    name: "🎨 Frontend Quality"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ui
    
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: "📦 Install Dependencies"
        run: npm ci

      - name: "🔍 TypeScript Check"
        run: npm run type-check

      - name: "📊 Lint Check"
        run: npm run lint:check

      - name: "🎨 Format Check"
        run: npm run format:check

  backend-tests:
    name: "🧪 Backend Tests"
    runs-on: ubuntu-latest
    needs: [backend-quality]
    
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🐍 Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: "📦 Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-xdist

      - name: "🧪 Run Tests"
        env:
          REDIS_URL: redis://localhost:6379/0
          DATABASE_URL: sqlite:///./test.db
          APP_ENV: testing
        run: pytest tests/ --cov=time_machine --cov-report=xml -n auto

  frontend-tests:
    name: "🧪 Frontend Tests"
    runs-on: ubuntu-latest
    needs: [frontend-quality]
    defaults:
      run:
        working-directory: ./ui
    
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: "📦 Install Dependencies"
        run: npm ci

      - name: "🧪 Run Tests"
        run: npm run test:ci

  build-backend:
    name: "🏗️ Build Backend"
    runs-on: ubuntu-latest
    needs: [backend-tests]
    
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🏗️ Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "🔐 Login to Container Registry"
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "🏷️ Extract Metadata"
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-

      - name: "🚀 Build and Push"
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend:
    name: "🎨 Build Frontend"
    runs-on: ubuntu-latest
    needs: [frontend-tests]
    defaults:
      run:
        working-directory: ./ui
    
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: "📦 Install Dependencies"
        run: npm ci

      - name: "🏗️ Build Application"
        run: npm run build

      - name: "📦 Upload Build Artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ui/build/

  integration-tests:
    name: "🔗 Integration Tests"
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🐍 Setup Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: "📦 Install Dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: "📥 Download Frontend Build"
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: ui/build/

      - name: "🚀 Start Application"
        env:
          REDIS_URL: redis://localhost:6379/0
          DATABASE_URL: sqlite:///./test.db
          APP_ENV: testing
        run: |
          python start_server.py &
          sleep 10

      - name: "🧪 Run Integration Tests"
        run: |
          curl -f http://localhost:8000/health
          curl -f http://localhost:8000/docs

  security-scan:
    name: "🛡️ Security Scan"
    runs-on: ubuntu-latest
    needs: [build-backend]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔍 Run Trivy Scanner"
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: "📤 Upload Security Results"
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
