#!/usr/bin/env python3
"""
Scorpius Vulnerability Scanner - Server Startup Script
Enterprise-grade FastAPI server with production-ready configuration
"""

import uvicorn
import os
import sys
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("scorpius.startup")

def main():
    """Start the Scorpius API server"""
    
    # Environment configuration
    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", 8080))
    workers = int(os.getenv("WORKERS", 1))
    reload = os.getenv("RELOAD", "False").lower() == "true"
    log_level = os.getenv("LOG_LEVEL", "info")
    
    # Production vs Development configuration
    if os.getenv("ENVIRONMENT", "development") == "production":
        # Production settings
        config = {
            "app": "api.main:app",
            "host": host,
            "port": port,
            "workers": workers,
            "log_level": log_level,
            "access_log": True,
            "use_colors": False,
            "reload": False,
            "loop": "uvloop",  # Better performance on Linux
            "http": "h11",
        }
        logger.info("Starting Scorpius API server in PRODUCTION mode")
        logger.info(f"Server configuration: {config}")
    else:
        # Development settings
        config = {
            "app": "api.main:app",
            "host": host,
            "port": port,
            "log_level": log_level,
            "reload": reload,
            "reload_dirs": ["api", "core", "scanners", "exploitation"],
            "use_colors": True,
        }
        logger.info("Starting Scorpius API server in DEVELOPMENT mode")
        logger.info(f"Server configuration: {config}")
    
    # Start server
    try:
        uvicorn.run(**config)
    except KeyboardInterrupt:
        logger.info("Server shutdown requested")
    except Exception as e:
        logger.error(f"Server startup failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
