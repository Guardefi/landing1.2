#!/bin/bash

# Scorpius Vulnerability Scanner - Enhanced Deployment Script
# Version 2.0 - Production deployment with all backend enhancements

set -e

echo "🚀 Starting Scorpius Vulnerability Scanner Enhanced Deployment..."

# Configuration
SCORPIUS_VERSION="2.0.0"
PYTHON_VERSION="3.11"
NODE_VERSION="18"
POSTGRES_VERSION="15"
REDIS_VERSION="7"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

# Check if running as root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        error "This script should not be run as root for security reasons"
    fi
}

# Check system requirements
check_system() {
    log "Checking system requirements..."
    
    # Check OS
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        log "Linux system detected"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        log "macOS system detected"
    else
        error "Unsupported operating system: $OSTYPE"
    fi
    
    # Check available memory (minimum 4GB)
    total_mem=$(free -g 2>/dev/null | awk '/^Mem:/{print $2}' || sysctl -n hw.memsize | awk '{print int($1/1024/1024/1024)}')
    if [[ $total_mem -lt 4 ]]; then
        error "Insufficient memory. Minimum 4GB required, found ${total_mem}GB"
    fi
    log "Memory check passed: ${total_mem}GB available"
    
    # Check disk space (minimum 20GB)
    available_space=$(df / | awk 'NR==2{gsub(/G/,"",$4); print int($4)}')
    if [[ $available_space -lt 20 ]]; then
        error "Insufficient disk space. Minimum 20GB required"
    fi
    log "Disk space check passed: ${available_space}GB available"
}

# Install system dependencies
install_system_deps() {
    log "Installing system dependencies..."
    
    if command -v apt-get &> /dev/null; then
        # Ubuntu/Debian
        sudo apt-get update
        sudo apt-get install -y \
            curl \
            wget \
            git \
            build-essential \
            libssl-dev \
            libffi-dev \
            libpq-dev \
            python3-dev \
            python3-pip \
            python3-venv \
            postgresql-client \
            redis-tools \
            docker.io \
            docker-compose \
            nginx \
            supervisor \
            htop \
            jq \
            unzip
    elif command -v yum &> /dev/null; then
        # CentOS/RHEL
        sudo yum update -y
        sudo yum install -y \
            curl \
            wget \
            git \
            gcc \
            gcc-c++ \
            make \
            openssl-devel \
            libffi-devel \
            postgresql-devel \
            python3-devel \
            python3-pip \
            postgresql \
            redis \
            docker \
            docker-compose \
            nginx \
            supervisor \
            htop \
            jq \
            unzip
    elif command -v brew &> /dev/null; then
        # macOS
        brew install \
            python@3.11 \
            postgresql@15 \
            redis \
            docker \
            docker-compose \
            nginx \
            supervisor \
            htop \
            jq
    else
        error "Package manager not found. Please install dependencies manually."
    fi
    
    log "System dependencies installed successfully"
}

# Install Python dependencies
install_python_deps() {
    log "Setting up Python environment..."
    
    # Create virtual environment
    python3 -m venv venv
    source venv/bin/activate
    
    # Upgrade pip
    pip install --upgrade pip setuptools wheel
    
    # Install requirements
    log "Installing Python packages..."
    pip install -r requirements.txt
    
    log "Python environment setup complete"
}

# Setup PostgreSQL database
setup_database() {
    log "Setting up PostgreSQL database..."
    
    # Check if PostgreSQL is running
    if ! systemctl is-active --quiet postgresql; then
        sudo systemctl start postgresql
        sudo systemctl enable postgresql
    fi
    
    # Create database and user
    sudo -u postgres psql -c "CREATE DATABASE scorpius_db;" 2>/dev/null || true
    sudo -u postgres psql -c "CREATE USER scorpius WITH ENCRYPTED PASSWORD 'scorpius_password';" 2>/dev/null || true
    sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE scorpius_db TO scorpius;" 2>/dev/null || true
    
    # Run database migrations
    source venv/bin/activate
    export DATABASE_URL="postgresql://scorpius:scorpius_password@localhost:5432/scorpius_db"
    alembic upgrade head
    
    log "PostgreSQL database setup complete"
}

# Setup Redis
setup_redis() {
    log "Setting up Redis..."
    
    # Start Redis service
    if ! systemctl is-active --quiet redis; then
        sudo systemctl start redis
        sudo systemctl enable redis
    fi
    
    # Test Redis connection
    redis-cli ping || error "Redis connection failed"
    
    log "Redis setup complete"
}

# Setup Docker
setup_docker() {
    log "Setting up Docker..."
    
    # Add user to docker group
    sudo usermod -aG docker $USER
    
    # Start Docker service
    sudo systemctl start docker
    sudo systemctl enable docker
    
    # Build plugin Docker images
    log "Building plugin Docker images..."
    docker build -t scorpius/slither:latest docker/plugins/slither/
    docker build -t scorpius/mythril:latest docker/plugins/mythril/
    docker build -t scorpius/manticore:latest docker/plugins/manticore/
    docker build -t scorpius/ethereum-sim:latest docker/simulation/ethereum/
    
    log "Docker setup complete"
}

# Setup Nginx reverse proxy
setup_nginx() {
    log "Setting up Nginx reverse proxy..."
    
    # Create Nginx configuration
    sudo tee /etc/nginx/sites-available/scorpius > /dev/null <<EOF
server {
    listen 80;
    server_name localhost;
    
    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
    
    # Rate limiting
    limit_req_zone \$binary_remote_addr zone=api:10m rate=10r/s;
    limit_req zone=api burst=20 nodelay;
    
    # API endpoints
    location /api/ {
        proxy_pass http://127.0.0.1:8080;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
    
    # WebSocket endpoints
    location /ws/ {
        proxy_pass http://127.0.0.1:8080;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
    
    # Health check
    location /health {
        proxy_pass http://127.0.0.1:8080;
        access_log off;
    }
    
    # Static files (for frontend)
    location / {
        root /var/www/scorpius;
        try_files \$uri \$uri/ /index.html;
    }
}
EOF
    
    # Enable site
    sudo ln -sf /etc/nginx/sites-available/scorpius /etc/nginx/sites-enabled/
    sudo rm -f /etc/nginx/sites-enabled/default
    
    # Test configuration
    sudo nginx -t
    
    # Start Nginx
    sudo systemctl start nginx
    sudo systemctl enable nginx
    
    log "Nginx setup complete"
}

# Setup Supervisor for process management
setup_supervisor() {
    log "Setting up Supervisor..."
    
    # Create Supervisor configuration
    sudo tee /etc/supervisor/conf.d/scorpius.conf > /dev/null <<EOF
[program:scorpius-api]
command=$(pwd)/venv/bin/gunicorn api.main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 127.0.0.1:8080
directory=$(pwd)
user=$USER
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/var/log/supervisor/scorpius-api.log
environment=PATH="$(pwd)/venv/bin"

[program:scorpius-celery]
command=$(pwd)/venv/bin/celery -A api.main.celery_app worker --loglevel=info
directory=$(pwd)
user=$USER
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/var/log/supervisor/scorpius-celery.log
environment=PATH="$(pwd)/venv/bin"

[program:scorpius-celery-beat]
command=$(pwd)/venv/bin/celery -A api.main.celery_app beat --loglevel=info
directory=$(pwd)
user=$USER
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/var/log/supervisor/scorpius-celery-beat.log
environment=PATH="$(pwd)/venv/bin"
EOF
    
    # Reload Supervisor
    sudo supervisorctl reread
    sudo supervisorctl update
    
    log "Supervisor setup complete"
}

# Setup SSL/TLS certificates
setup_ssl() {
    log "Setting up SSL certificates..."
    
    # Create SSL directory
    sudo mkdir -p /etc/nginx/ssl
    
    # Generate self-signed certificate for development
    sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout /etc/nginx/ssl/scorpius.key \
        -out /etc/nginx/ssl/scorpius.crt \
        -subj "/C=US/ST=State/L=City/O=Organization/CN=localhost"
    
    # Update Nginx configuration for HTTPS
    sudo sed -i 's/listen 80;/listen 443 ssl;/' /etc/nginx/sites-available/scorpius
    sudo sed -i '/server_name localhost;/a\\tssl_certificate /etc/nginx/ssl/scorpius.crt;\n\tssl_certificate_key /etc/nginx/ssl/scorpius.key;' /etc/nginx/sites-available/scorpius
    
    # Add HTTP to HTTPS redirect
    sudo tee -a /etc/nginx/sites-available/scorpius > /dev/null <<EOF

server {
    listen 80;
    server_name localhost;
    return 301 https://\$server_name\$request_uri;
}
EOF
    
    sudo nginx -t && sudo systemctl reload nginx
    
    log "SSL setup complete"
}

# Setup monitoring
setup_monitoring() {
    log "Setting up monitoring..."
    
    # Create monitoring directory
    mkdir -p monitoring
    
    # Setup Prometheus configuration
    tee monitoring/prometheus.yml > /dev/null <<EOF
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'scorpius-api'
    static_configs:
      - targets: ['localhost:8080']
    metrics_path: '/metrics'
    scrape_interval: 30s
EOF
    
    # Run Prometheus in Docker
    docker run -d \
        --name prometheus \
        --restart unless-stopped \
        -p 9090:9090 \
        -v $(pwd)/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml \
        prom/prometheus
    
    log "Monitoring setup complete"
}

# Setup log rotation
setup_logging() {
    log "Setting up log rotation..."
    
    # Create log directory
    sudo mkdir -p /var/log/scorpius
    sudo chown $USER:$USER /var/log/scorpius
    
    # Setup logrotate configuration
    sudo tee /etc/logrotate.d/scorpius > /dev/null <<EOF
/var/log/scorpius/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    create 644 $USER $USER
    postrotate
        supervisorctl restart scorpius-api scorpius-celery scorpius-celery-beat
    endscript
}
EOF
    
    log "Log rotation setup complete"
}

# Setup security measures
setup_security() {
    log "Setting up security measures..."
    
    # Configure firewall
    if command -v ufw &> /dev/null; then
        sudo ufw --force enable
        sudo ufw default deny incoming
        sudo ufw default allow outgoing
        sudo ufw allow ssh
        sudo ufw allow 80/tcp
        sudo ufw allow 443/tcp
        sudo ufw allow 9090/tcp  # Prometheus
    fi
    
    # Set file permissions
    chmod 600 .env.production
    chmod 755 *.sh
    
    # Create security configuration
    tee security/fail2ban.conf > /dev/null <<EOF
[scorpius-api]
enabled = true
port = 80,443
protocol = tcp
filter = scorpius
logpath = /var/log/nginx/access.log
maxretry = 5
bantime = 3600
EOF
    
    log "Security setup complete"
}

# Run tests
run_tests() {
    log "Running tests..."
    
    source venv/bin/activate
    
    # Run unit tests
    python -m pytest tests/ -v --cov=./ --cov-report=html
    
    # Run security tests
    bandit -r api/ -f json -o security-report.json
    
    # Run performance tests
    locust --headless --users 10 --spawn-rate 2 --run-time 60s --host http://localhost:8080
    
    log "Tests completed successfully"
}

# Create systemd service (alternative to Supervisor)
create_systemd_service() {
    log "Creating systemd service..."
    
    sudo tee /etc/systemd/system/scorpius.service > /dev/null <<EOF
[Unit]
Description=Scorpius Vulnerability Scanner API
After=network.target postgresql.service redis.service

[Service]
Type=exec
User=$USER
Group=$USER
WorkingDirectory=$(pwd)
Environment=PATH=$(pwd)/venv/bin
ExecStart=$(pwd)/venv/bin/gunicorn api.main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 127.0.0.1:8080
ExecReload=/bin/kill -HUP \$MAINPID
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF
    
    sudo systemctl daemon-reload
    sudo systemctl enable scorpius
    
    log "Systemd service created"
}

# Deploy frontend (if exists)
deploy_frontend() {
    if [ -d "frontend" ]; then
        log "Deploying frontend..."
        
        cd frontend
        npm install
        npm run build
        
        # Copy built files to Nginx directory
        sudo rm -rf /var/www/scorpius
        sudo mkdir -p /var/www/scorpius
        sudo cp -r dist/* /var/www/scorpius/
        sudo chown -R www-data:www-data /var/www/scorpius
        
        cd ..
        log "Frontend deployed successfully"
    else
        warn "Frontend directory not found, skipping frontend deployment"
    fi
}

# Backup existing installation
backup_existing() {
    if [ -d "venv" ] || [ -f "api/main.py" ]; then
        log "Backing up existing installation..."
        backup_dir="backup_$(date +%Y%m%d_%H%M%S)"
        mkdir -p $backup_dir
        cp -r venv api config $backup_dir/ 2>/dev/null || true
        log "Backup created: $backup_dir"
    fi
}

# Main deployment function
main() {
    log "Starting Scorpius Enhanced Deployment v${SCORPIUS_VERSION}"
    
    # Check arguments
    ENVIRONMENT=${1:-"development"}
    SKIP_TESTS=${2:-"false"}
    
    log "Deployment environment: $ENVIRONMENT"
    
    # Run deployment steps
    check_root
    check_system
    backup_existing
    install_system_deps
    install_python_deps
    setup_database
    setup_redis
    setup_docker
    
    if [ "$ENVIRONMENT" = "production" ]; then
        setup_nginx
        setup_supervisor
        setup_ssl
        setup_monitoring
        setup_logging
        setup_security
        create_systemd_service
    fi
    
    deploy_frontend
    
    if [ "$SKIP_TESTS" != "true" ]; then
        run_tests
    fi
    
    # Start services
    log "Starting services..."
    if [ "$ENVIRONMENT" = "production" ]; then
        sudo supervisorctl start all
        sudo systemctl start scorpius
    else
        # Development mode
        source venv/bin/activate
        python api/main.py &
        API_PID=$!
        echo $API_PID > api.pid
    fi
    
    # Verify deployment
    log "Verifying deployment..."
    sleep 5
    
    # Test API endpoint
    if curl -f -s http://localhost:8080/health > /dev/null; then
        log "✅ API health check passed"
    else
        error "❌ API health check failed"
    fi
    
    # Test WebSocket
    if [ "$ENVIRONMENT" = "production" ]; then
        if curl -f -s -H "Upgrade: websocket" http://localhost:80/ws/dashboard > /dev/null; then
            log "✅ WebSocket connectivity verified"
        else
            warn "⚠️  WebSocket test failed"
        fi
    fi
    
    log "🎉 Scorpius Enhanced Deployment completed successfully!"
    log ""
    log "Access URLs:"
    if [ "$ENVIRONMENT" = "production" ]; then
        log "  Frontend: https://localhost/"
        log "  API: https://localhost/api/v1/"
        log "  WebSocket: wss://localhost/ws/"
        log "  Monitoring: http://localhost:9090/"
    else
        log "  API: http://localhost:8080/"
        log "  WebSocket: ws://localhost:8080/ws/"
        log "  API Docs: http://localhost:8080/docs"
    fi
    log ""
    log "Default credentials:"
    log "  Username: demo"
    log "  Password: password"
    log ""
    log "For production deployment, please:"
    log "  1. Update .env.production with real credentials"
    log "  2. Configure proper SSL certificates"
    log "  3. Set up proper monitoring and alerting"
    log "  4. Configure backup strategies"
    log "  5. Review security settings"
}

# Handle script interruption
cleanup() {
    log "Cleaning up..."
    if [ -f "api.pid" ]; then
        kill $(cat api.pid) 2>/dev/null || true
        rm api.pid
    fi
}

trap cleanup EXIT

# Run main function
main "$@"
