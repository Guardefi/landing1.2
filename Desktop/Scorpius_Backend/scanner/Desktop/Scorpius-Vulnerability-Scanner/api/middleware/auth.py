"""
Authentication middleware for Scorpius API
Handles JWT token validation and user context
"""

from fastapi import Request, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
import jwt
import os
from typing import Optional

# JWT Configuration
JWT_SECRET = os.getenv("JWT_SECRET", "scorpius-secret-key-change-in-production")
JWT_ALGORITHM = "HS256"

security = HTTPBearer()

class AuthMiddleware:
    """Authentication middleware for JWT token validation"""
    
    @staticmethod
    def verify_token(token: str) -> Optional[dict]:
        """Verify JWT token and return payload"""
        try:
            payload = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])
            return payload
        except jwt.ExpiredSignatureError:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Token has expired"
            )
        except jwt.JWTError:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Could not validate credentials"
            )
    
    @staticmethod
    def get_current_user(credentials: HTTPAuthorizationCredentials = security) -> dict:
        """Extract current user from JWT token"""
        return AuthMiddleware.verify_token(credentials.credentials)
    
    @staticmethod
    async def auth_middleware(request: Request, call_next):
        """Middleware to add user context to requests"""
        # Skip auth for certain endpoints
        skip_auth_paths = ["/health", "/docs", "/redoc", "/openapi.json", "/api/v1/auth/"]
        
        if any(request.url.path.startswith(path) for path in skip_auth_paths):
            return await call_next(request)
        
        # Extract token from Authorization header
        auth_header = request.headers.get("Authorization")
        if not auth_header or not auth_header.startswith("Bearer "):
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Missing or invalid authentication token"
            )
        
        token = auth_header.split(" ")[1]
        user_payload = AuthMiddleware.verify_token(token)
        
        # Add user context to request state
        request.state.user = user_payload
        
        return await call_next(request)
