"""
Dependency injection for Scorpius API
Provides shared instances and authentication dependencies
"""

from fastapi import Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from typing import Optional
import jwt
from api.config.settings import settings

# Security
security = HTTPBearer()

# Dependencies for shared instances
def get_scan_engine():
    """Get scan engine instance"""
    from api.main import scan_engine
    if not scan_engine:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Scan engine not available"
        )
    return scan_engine

def get_plugin_manager():
    """Get plugin manager instance"""
    from api.main import plugin_manager
    if not plugin_manager:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Plugin manager not available"
        )
    return plugin_manager

def get_simulation_engine():
    """Get simulation engine instance"""
    from api.main import simulation_engine
    if not simulation_engine:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Simulation engine not available"
        )
    return simulation_engine

def get_websocket_manager():
    """Get WebSocket connection manager"""
    from api.websocket_manager import connection_manager
    return connection_manager

# Authentication dependencies
def verify_token(token: str) -> Optional[dict]:
    """Verify JWT token and return payload"""
    try:
        payload = jwt.decode(
            token, 
            settings.jwt_secret, 
            algorithms=[settings.jwt_algorithm]
        )
        return payload
    except jwt.ExpiredSignatureError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Token has expired",
            headers={"WWW-Authenticate": "Bearer"},
        )
    except jwt.JWTError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Could not validate credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )

def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)) -> dict:
    """Extract current user from JWT token"""
    return verify_token(credentials.credentials)

def get_current_user_optional(
    credentials: Optional[HTTPAuthorizationCredentials] = Depends(security)
) -> Optional[dict]:
    """Extract current user from JWT token (optional)"""
    if not credentials:
        return None
    return verify_token(credentials.credentials)

# Admin role dependency
def require_admin(current_user: dict = Depends(get_current_user)) -> dict:
    """Require admin role for endpoint access"""
    if current_user.get("role") != "admin":
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Admin access required"
        )
    return current_user
