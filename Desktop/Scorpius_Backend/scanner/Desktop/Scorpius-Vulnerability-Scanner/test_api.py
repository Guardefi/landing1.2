#!/usr/bin/env python3
"""
Scorpius API Testing Suite
Comprehensive tests for all API endpoints and WebSocket functionality
"""

import asyncio
import json
import requests
import websockets
import time
from typing import Dict, Optional
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("scorpius.test")

class ScorpiusAPITester:
    """Test suite for Scorpius API"""
    
    def __init__(self, base_url: str = "http://localhost:8080"):
        self.base_url = base_url
        self.ws_url = base_url.replace("http", "ws")
        self.token: Optional[str] = None
        self.headers: Dict[str, str] = {}
        
    def authenticate(self) -> bool:
        """Authenticate and get JWT token"""
        logger.info("Testing authentication...")
        
        auth_data = {
            "username": "demo",
            "password": "password"
        }
        
        try:
            response = requests.post(
                f"{self.base_url}/api/v1/auth/login",
                json=auth_data,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get("access_token")
                self.headers = {"Authorization": f"Bearer {self.token}"}
                logger.info("✅ Authentication successful")
                return True
            else:
                logger.error(f"❌ Authentication failed: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"❌ Authentication error: {e}")
            return False
    
    def test_health_check(self) -> bool:
        """Test health check endpoint"""
        logger.info("Testing health check...")
        
        try:
            response = requests.get(f"{self.base_url}/health", timeout=5)
            
            if response.status_code == 200:
                logger.info("✅ Health check passed")
                return True
            else:
                logger.error(f"❌ Health check failed: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"❌ Health check error: {e}")
            return False
    
    def test_system_metrics(self) -> bool:
        """Test system metrics endpoint"""
        logger.info("Testing system metrics...")
        
        try:
            response = requests.get(
                f"{self.base_url}/api/v1/metrics",
                headers=self.headers,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"✅ System metrics retrieved: {len(data)} sections")
                return True
            else:
                logger.error(f"❌ System metrics failed: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"❌ System metrics error: {e}")
            return False
    
    def test_plugins_list(self) -> bool:
        """Test plugins list endpoint"""
        logger.info("Testing plugins list...")
        
        try:
            response = requests.get(
                f"{self.base_url}/api/v1/plugins",
                headers=self.headers,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"✅ Plugins list retrieved: {len(data)} plugins")
                return True
            else:
                logger.error(f"❌ Plugins list failed: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"❌ Plugins list error: {e}")
            return False
    
    def test_scan_workflow(self) -> bool:
        """Test complete scan workflow"""
        logger.info("Testing scan workflow...")
        
        # Start scan
        scan_request = {
            "target_type": "source_code",
            "target_identifier": "contract Example { function test() public {} }",
            "scan_type": "quick",
            "plugins": ["slither"],
            "priority": "high"
        }
        
        try:
            # Start scan
            response = requests.post(
                f"{self.base_url}/api/v1/scan",
                json=scan_request,
                headers=self.headers,
                timeout=15
            )
            
            if response.status_code != 200:
                logger.error(f"❌ Scan start failed: {response.status_code}")
                return False
            
            scan_data = response.json()
            scan_id = scan_data.get("scan_id")
            
            if not scan_id:
                logger.error("❌ No scan ID returned")
                return False
            
            logger.info(f"✅ Scan started: {scan_id}")
            
            # Check scan status
            time.sleep(2)
            status_response = requests.get(
                f"{self.base_url}/api/v1/scan/{scan_id}/status",
                headers=self.headers,
                timeout=10
            )
            
            if status_response.status_code == 200:
                logger.info("✅ Scan status retrieved")
            else:
                logger.warning(f"⚠️ Scan status check failed: {status_response.status_code}")
            
            # List scans
            list_response = requests.get(
                f"{self.base_url}/api/v1/scans",
                headers=self.headers,
                timeout=10
            )
            
            if list_response.status_code == 200:
                logger.info("✅ Scans list retrieved")
                return True
            else:
                logger.error(f"❌ Scans list failed: {list_response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"❌ Scan workflow error: {e}")
            return False
    
    async def test_websocket_connection(self) -> bool:
        """Test WebSocket connection and messaging"""
        logger.info("Testing WebSocket connection...")
        
        try:
            # Extract token for WebSocket auth
            ws_url = f"{self.ws_url}/ws/dashboard?token={self.token}"
            
            async with websockets.connect(ws_url) as websocket:
                # Send test message
                test_message = {
                    "type": "subscribe",
                    "topic": "scans",
                    "data": {}
                }
                
                await websocket.send(json.dumps(test_message))
                
                # Wait for response
                try:
                    response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                    response_data = json.loads(response)
                    
                    if response_data.get("type") == "connection_established":
                        logger.info("✅ WebSocket connection established")
                        return True
                    else:
                        logger.info(f"✅ WebSocket response received: {response_data.get('type')}")
                        return True
                        
                except asyncio.TimeoutError:
                    logger.warning("⚠️ WebSocket timeout - connection may be working")
                    return True
                    
        except Exception as e:
            logger.error(f"❌ WebSocket error: {e}")
            return False
    
    def test_dashboard_summary(self) -> bool:
        """Test dashboard summary endpoint"""
        logger.info("Testing dashboard summary...")
        
        try:
            response = requests.get(
                f"{self.base_url}/api/v1/dashboard/summary",
                headers=self.headers,
                timeout=10
            )
            
            if response.status_code == 200:
                logger.info("✅ Dashboard summary retrieved")
                return True
            else:
                logger.error(f"❌ Dashboard summary failed: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"❌ Dashboard summary error: {e}")
            return False
    
    async def run_all_tests(self) -> Dict[str, bool]:
        """Run all tests and return results"""
        results = {}
        
        logger.info("Starting Scorpius API test suite...")
        logger.info("=" * 50)
        
        # Test authentication first
        results["health_check"] = self.test_health_check()
        
        if not self.authenticate():
            logger.error("❌ Authentication failed - skipping authenticated tests")
            return results
        
        # Run authenticated tests
        results["system_metrics"] = self.test_system_metrics()
        results["plugins_list"] = self.test_plugins_list()
        results["dashboard_summary"] = self.test_dashboard_summary()
        results["scan_workflow"] = self.test_scan_workflow()
        results["websocket_connection"] = await self.test_websocket_connection()
        
        # Print summary
        logger.info("=" * 50)
        logger.info("Test Results Summary:")
        
        passed = sum(1 for result in results.values() if result)
        total = len(results)
        
        for test_name, result in results.items():
            status = "✅ PASS" if result else "❌ FAIL"
            logger.info(f"  {test_name}: {status}")
        
        logger.info(f"Overall: {passed}/{total} tests passed")
        
        if passed == total:
            logger.info("🎉 All tests passed! API is ready for frontend integration.")
        else:
            logger.warning("⚠️ Some tests failed. Please check the API implementation.")
        
        return results

async def main():
    """Main test runner"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Scorpius API Test Suite")
    parser.add_argument(
        "--url", 
        default="http://localhost:8080", 
        help="Base URL for the API (default: http://localhost:8080)"
    )
    
    args = parser.parse_args()
    
    tester = ScorpiusAPITester(args.url)
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())
