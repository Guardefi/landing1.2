"""
Test suite for the comparison engine component.
"""

import pytest
from core.comparison_engine import BytecodeComparisonEngine


class TestBytecodeComparisonEngine:
    """Test cases for the BytecodeComparisonEngine class."""
    
    @pytest.fixture
    def engine(self):
        """Create a comparison engine instance for testing."""
        config = {
            'jaccard_threshold': 0.8,
            'ngram_size': 4,
            'structural_weight': 0.3,
            'use_weighted_jaccard': True
        }
        return BytecodeComparisonEngine(config)
    
    @pytest.fixture
    def test_bytecodes(self):
        """Sample bytecodes for testing."""
        return {
            'identical': ("60016002", "60016002"),
            'similar': ("60016002600381", "60016002600381"),
            'different': ("60016002", "60056006"),
            'empty': ("", ""),
            'one_empty': ("60016002", ""),
            'complex1': "608060405234801561001057600080fd5b50600436106100b95760003560e01c806370a08231",
            'complex2': "608060405234801561001057600080fd5b50600436106100b95760003560e01c806370a08232"
        }
    
    def test_engine_initialization(self, engine):
        """Test that the engine initializes correctly."""
        assert engine is not None
        assert engine.config['jaccard_threshold'] == 0.8
        assert engine.config['ngram_size'] == 4
    
    def test_jaccard_similarity_identical(self, engine, test_bytecodes):
        """Test Jaccard similarity with identical bytecodes."""
        bytecode1, bytecode2 = test_bytecodes['identical']
        
        similarity = engine.jaccard_similarity(bytecode1, bytecode2)
        
        assert similarity == 1.0
    
    def test_jaccard_similarity_different(self, engine, test_bytecodes):
        """Test Jaccard similarity with different bytecodes."""
        bytecode1, bytecode2 = test_bytecodes['different']
        
        similarity = engine.jaccard_similarity(bytecode1, bytecode2)
        
        assert 0.0 <= similarity <= 1.0
        assert similarity < 1.0  # Should not be identical
    
    def test_jaccard_similarity_empty(self, engine, test_bytecodes):
        """Test Jaccard similarity with empty bytecodes."""
        empty_pair = test_bytecodes['empty']
        one_empty_pair = test_bytecodes['one_empty']
        
        # Both empty should have similarity 1.0 or special handling
        empty_similarity = engine.jaccard_similarity(*empty_pair)
        assert 0.0 <= empty_similarity <= 1.0
        
        # One empty should have low similarity
        one_empty_similarity = engine.jaccard_similarity(*one_empty_pair)
        assert 0.0 <= one_empty_similarity <= 1.0
        assert one_empty_similarity < 0.5
    
    def test_ngram_similarity(self, engine, test_bytecodes):
        """Test n-gram similarity computation."""
        bytecode1, bytecode2 = test_bytecodes['similar']
        
        similarity = engine.ngram_similarity(bytecode1, bytecode2)
        
        assert 0.0 <= similarity <= 1.0
        
        # Test with different n-gram sizes
        for n in [2, 3, 4, 5]:
            engine.config['ngram_size'] = n
            sim = engine.ngram_similarity(bytecode1, bytecode2)
            assert 0.0 <= sim <= 1.0
    
    def test_structural_similarity(self, engine, test_bytecodes):
        """Test structural similarity computation."""
        bytecode1 = test_bytecodes['complex1']
        bytecode2 = test_bytecodes['complex2']
        
        similarity = engine.structural_similarity(bytecode1, bytecode2)
        
        assert 0.0 <= similarity <= 1.0
    
    def test_opcode_frequency_similarity(self, engine):
        """Test opcode frequency-based similarity."""
        # Two bytecodes with similar opcode distributions
        bytecode1 = "60016002810181905560056006810181905560076008"
        bytecode2 = "60016002810181905560096010810181905560116012"
        
        similarity = engine.opcode_frequency_similarity(bytecode1, bytecode2)
        
        assert 0.0 <= similarity <= 1.0
        assert similarity > 0.5  # Should be somewhat similar
    
    def test_sequence_similarity(self, engine):
        """Test sequence-based similarity."""
        # Similar instruction sequences
        bytecode1 = "60016002810181905560056006810181905560076008"
        bytecode2 = "60016002810181905560056006810181905560096010"
        
        similarity = engine.sequence_similarity(bytecode1, bytecode2)
        
        assert 0.0 <= similarity <= 1.0
    
    def test_weighted_jaccard_similarity(self, engine):
        """Test weighted Jaccard similarity."""
        bytecode1 = "60016002810181905560056006810181905560076008"
        bytecode2 = "60016002810181905560056006810181905560096010"
        
        # Test with weights enabled
        engine.config['use_weighted_jaccard'] = True
        weighted_sim = engine.jaccard_similarity(bytecode1, bytecode2)
        
        # Test with weights disabled
        engine.config['use_weighted_jaccard'] = False
        unweighted_sim = engine.jaccard_similarity(bytecode1, bytecode2)
        
        assert 0.0 <= weighted_sim <= 1.0
        assert 0.0 <= unweighted_sim <= 1.0
        
        # Results might be different depending on instruction importance
        # but both should be valid
    
    def test_multi_dimensional_comparison(self, engine, test_bytecodes):
        """Test multi-dimensional comparison."""
        bytecode1 = test_bytecodes['complex1']
        bytecode2 = test_bytecodes['complex2']
        
        result = engine.multi_dimensional_compare(bytecode1, bytecode2)
        
        assert isinstance(result, dict)
        assert 'jaccard_similarity' in result
        assert 'ngram_similarity' in result  
        assert 'structural_similarity' in result
        assert 'opcode_frequency_similarity' in result
        assert 'overall_similarity' in result
        
        # All similarities should be in valid range
        for key, value in result.items():
            if 'similarity' in key:
                assert 0.0 <= value <= 1.0
    
    def test_batch_comparison(self, engine, test_bytecodes):
        """Test batch comparison functionality."""
        pairs = [
            test_bytecodes['identical'],
            test_bytecodes['similar'],
            test_bytecodes['different']
        ]
        
        results = engine.batch_compare(pairs)
        
        assert len(results) == len(pairs)
        for result in results:
            assert isinstance(result, dict)
            assert 'overall_similarity' in result
            assert 0.0 <= result['overall_similarity'] <= 1.0
    
    def test_similarity_caching(self, engine):
        """Test that similarity results are cached for performance."""
        bytecode1 = "60016002810181905560056006810181905560076008"
        bytecode2 = "60016002810181905560056006810181905560096010"
        
        # First computation
        result1 = engine.multi_dimensional_compare(bytecode1, bytecode2)
        
        # Second computation (should use cache if implemented)
        result2 = engine.multi_dimensional_compare(bytecode1, bytecode2)
        
        # Results should be identical
        assert result1['overall_similarity'] == result2['overall_similarity']
        
        # If caching is implemented, second call should be faster
        # This is hard to test reliably, but results should be identical
    
    def test_threshold_application(self, engine):
        """Test threshold application in similarity decisions."""
        # Test with high similarity (should exceed threshold)
        bytecode1 = "60016002810181905560056006"
        bytecode2 = "60016002810181905560056006"
        
        result_high = engine.multi_dimensional_compare(bytecode1, bytecode2)
        
        # Test with low similarity (should not exceed threshold)
        bytecode3 = "60016002810181905560056006"
        bytecode4 = "60ff60fe60fd60fc60fb60fa"
        
        result_low = engine.multi_dimensional_compare(bytecode3, bytecode4)
        
        # Check threshold application
        threshold = engine.config.get('jaccard_threshold', 0.8)
        
        if 'exceeds_threshold' in result_high:
            expected_high = result_high['overall_similarity'] >= threshold
            assert result_high['exceeds_threshold'] == expected_high
        
        if 'exceeds_threshold' in result_low:
            expected_low = result_low['overall_similarity'] >= threshold
            assert result_low['exceeds_threshold'] == expected_low
    
    def test_normalization_integration(self, engine):
        """Test integration with bytecode normalization."""
        # Test with metadata and constants that should be normalized
        bytecode1 = "608060405234801561001057600080fda165627a7a72305820"
        bytecode2 = "608060405234801561001057600080fda165627a7a72305821"
        
        # Should normalize before comparison
        result = engine.multi_dimensional_compare(bytecode1, bytecode2)
        
        # Should be highly similar after normalization (metadata removed)
        assert result['overall_similarity'] > 0.8
    
    def test_instruction_importance_weighting(self, engine):
        """Test that different instructions have appropriate importance weights."""
        # Test with different types of instructions
        storage_heavy = "60015560025560035560045560055560065560075560085560095560105560115560125560135560145560155560165560175560185560195560205560215560225560235560245560255560265560275560285560295560305560315560325560335560345560355560365560375560385560395560405560415560425560435560445560455560465560475560485560495560505560515560525560535560545560555560565560575560585560595560605560615560625560635560645560655560665560675560685560695560705560715560725560735560745560755560765560775560785560795560805560815560825560835560845560855560865560875560885560895560905560915560925560935560945560955560965560975560985560995561005561015561025561035561045561055561065561075561085561095561105561115561125561135561145561155561165561175561185561195561205561215561225561235561245561255561265561275561285561295561305561315561325561335561345561355561365561375561385561395561405561415561425561435561445561455561465561475561485561495561505561515561525561535561545561555561565561575561585561595561605561615561625561635561645561655561665561675561685561695561705561715561725561735561745561755561765561775561785561795561805561815561825561835561845561855561865561875561885561895561905561915561925561935561945561955561965561975561985561995562005562015562025562035562045562055562065562075562085562095562105562115562125562135562145562155562165562175562185562195562205562215562225562235562245562255562265562275562285562295562305562315562325562335562345562355562365562375562385562395562405562415562425562435562445562455562465562475562485562495562505562515562525562535562545562555562565562575562585562595562605562615562625562635562645562655562665562675562685562695562705562715562725562735562745562755562765562775562785562795562805562815562825562835562845562855562865562875562885562895562905562915562925562935562945562955562965562975562985562995563005563015563025563035563045563055563065563075563085563095563105563115563125563135563145563155563165563175563185563195563205563215563225563235563245563255563265563275563285563295563305563315563325563335563345563355563365563375563385563395563405563415563425563435563445563455563465563475563485563495563505563515563525563535563545563555563565563575563585563595563605563615563625563635563645563655563665563675563685563695563705563715563725563735563745563755563765563775563785563795563805563815563825563835563845563855563865563875563885563895563905563915563925563935563945563955563965563975563985563995564005564015564025564035564045564055564065564075564085564095564105564115564125564135564145564155564165564175564185564195564205564215564225564235564245564255564265564275564285564295564305564315564325564335564345564355564365564375564385564395564405564415564425564435564445564455564465564475564485564495564505564515564525564535564545564555564565564575564585564595564605564615564625564635564645564655564665564675564685564695564705564715564725564735564745564755564765564775564785564795564805564815564825564835564845564855564865564875564885564895564905564915564925564935564945564955564965564975564985564995565005565015565025565035565045565055565065565075565085565095565105565115565125565135565145565155565165565175565185565195565205565215565225565235565245565255565265565275565285565295565305565315565325565335565345565355565365565375565385565395565405565415565425565435565445565455565465565475565485565495565505565515565525565535565545565555565565575565585565595565605565615565625565635565645565655565665565675565685565695565705565715565725565735565745565755565765565775565785565795565805565815565825565835565845565855565865565875565885565895565905565915565925565935565945565955565965565975565985565995566005566015566025566035566045566055566065566075566085566095566105566115566125566135566145566155566165566175566185566195566205566215566225566235566245566255566265566275566285566295566305566315566325566335566345566355566365566375566385566395566405566415566425566435566445566455566465566475566485566495566505566515566525566535566545566555566565566575566585566595566605566615566625566635566645566655566665566675566685566695566705566715566725566735566745566755566765566775566785566795566805566815566825566835566845566855566865566875566885566895566905566915566925566935566945566955566965566975566985566995567005567015567025567035567045567055567065567075567085567095567105567115567125567135567145567155567165567175567185567195567205567215567225567235567245567255567265567275567285567295567305567315567325567335567345567355567365567375567385567395567405567415567425567435567445567455567465567475567485567495567505567515567525567535567545567555567565567575567585567595567605567615567625567635567645567655567665567675567685567695567705567715567725567735567745567755567765567775567785567795567805567815567825567835567845567855567865567875567885567895567905567915567925567935567945567955567965567975567985567995568005568015568025568035568045568055568065568075568085568095568105568115568125568135568145568155568165568175568185568195568205568215568225568235568245568255568265568275568285568295568305568315568325568335568345568355568365568375568385568395568405568415568425568435568445568455568465568475568485568495568505568515568525568535568545568555568565568575568585568595568605568615568625568635568645568655568665568675568685568695568705568715568725568735568745568755568765568775568785568795568805568815568825568835568845568855568865568875568885568895568905568915568925568935568945568955568965568975568985568995569005569015569025569035569045569055569065569075569085569095569105569115569125569135569145569155569165569175569185569195569205569215569225569235569245569255569265569275569285569295569305569315569325569335569345569355569365569375569385569395569405569415569425569435569445569455569465569475569485569495569505569515569525569535569545569555569565569575569585569595569605569615569625569635569645569655569665569675569685569695569705569715569725569735569745569755569765569775569785569795569805569815569825569835569845569855569865569875569885569895569905569915569925569935569945569955569965569975569985569995570005570015570025570035570045570055570065570075570085570095570105570115570125570135570"
        arithmetic_heavy = ""
        
        # These should have different importance scores
        result1 = engine.multi_dimensional_compare(storage_heavy[:200], storage_heavy[200:400])
        result2 = engine.multi_dimensional_compare(arithmetic_heavy[:200], arithmetic_heavy[200:400])
        
        # Both should be valid results
        assert 0.0 <= result1['overall_similarity'] <= 1.0
        assert 0.0 <= result2['overall_similarity'] <= 1.0
    
    def test_performance_with_large_bytecode(self, engine):
        """Test performance with large bytecode inputs."""
        import time
        
        # Create large bytecode samples
        large_bytecode1 = "608060405234801561001057600080fd5b50" * 100
        large_bytecode2 = "608060405234801561001057600080fd5b51" * 100
        
        start_time = time.time()
        result = engine.multi_dimensional_compare(large_bytecode1, large_bytecode2)
        end_time = time.time()
        
        processing_time = end_time - start_time
        
        # Should complete within reasonable time
        assert processing_time < 10.0  # Less than 10 seconds
        assert isinstance(result, dict)
        assert 0.0 <= result['overall_similarity'] <= 1.0


class TestComparisonEngineEdgeCases:
    """Test edge cases and error conditions."""
    
    def test_invalid_input_handling(self):
        """Test handling of invalid inputs."""
        engine = BytecodeComparisonEngine({})
        
        invalid_inputs = [
            (None, "60016002"),
            ("60016002", None),
            ("invalid_hex", "60016002"),
            ("60016002", "invalid_hex"),
            ("", "60016002"),  # Empty string
            ("60016002", ""),  # Empty string
        ]
        
        for bytecode1, bytecode2 in invalid_inputs:
            try:
                result = engine.multi_dimensional_compare(bytecode1, bytecode2)
                # Should handle gracefully
                assert isinstance(result, dict)
                assert 'overall_similarity' in result
                assert 0.0 <= result['overall_similarity'] <= 1.0
            except (ValueError, TypeError, AttributeError):
                # Expected for some invalid inputs
                pass


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
