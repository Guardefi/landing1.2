version: '3.8'

services:
  # API Service
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: honeypot-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URL=mongodb://mongodb:27017
      - REDIS_URL=redis://redis:6379
      - DATABASE_NAME=honeypot_detector
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - API_KEY=${API_KEY:-dev_api_key_for_testing_only}
      - JWT_SECRET=${JWT_SECRET:-change_this_in_production_super_secret_key}
      - SERVICE_NAME=honeypot-detector
      - SERVICE_VERSION=1.0.0
      - DEBUG=true
      - LOG_LEVEL=INFO
    depends_on:
      - mongodb
      - redis
    volumes:
      - ../data:/app/data
    networks:
      - honeypot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Worker Service for background processing
  worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.worker
    container_name: honeypot-worker
    restart: unless-stopped
    environment:
      - MONGODB_URL=mongodb://mongodb:27017
      - REDIS_URL=redis://redis:6379
      - DATABASE_NAME=honeypot_detector
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - LOG_LEVEL=INFO
    depends_on:
      - mongodb
      - redis
    volumes:
      - ../data:/app/data
    networks:
      - honeypot-network

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: honeypot-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD:-secure_password}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - honeypot-network

  # MongoDB Express Web UI
  mongo-express:
    image: mongo-express:1.0.0-alpha
    container_name: honeypot-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_INITDB_ROOT_USERNAME:-admin}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_INITDB_ROOT_PASSWORD:-secure_password}
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USERNAME:-admin}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD:-secure_password}
    depends_on:
      - mongodb
    networks:
      - honeypot-network

  # Redis for caching and task queues
  redis:
    image: redis:7.0-alpine
    container_name: honeypot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis_data:/data
    networks:
      - honeypot-network

  # Redis Commander Web UI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: honeypot-redis-commander
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-secure_redis_password}
    depends_on:
      - redis
    networks:
      - honeypot-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: honeypot-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - honeypot-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:9.5.2
    container_name: honeypot-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=securepassword
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - honeypot-network

  # MongoDB exporter for Prometheus metrics
  mongodb-exporter:
    image: percona/mongodb_exporter:0.34
    container_name: honeypot-mongodb-exporter
    restart: unless-stopped
    ports:
      - "9216:9216"
    command: --mongodb.uri=mongodb://${MONGO_INITDB_ROOT_USERNAME:-admin}:${MONGO_INITDB_ROOT_PASSWORD:-secure_password}@mongodb:27017/admin
    depends_on:
      - mongodb
    networks:
      - honeypot-network

  # Redis exporter for Prometheus metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.45.0
    container_name: honeypot-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-secure_redis_password}
    depends_on:
      - redis
    networks:
      - honeypot-network

networks:
  honeypot-network:
    driver: bridge

volumes:
  mongodb_data:
  redis_data:
  prometheus_data:
  grafana_data:
