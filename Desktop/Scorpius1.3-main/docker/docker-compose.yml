version: "3.8"

services:
  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=http://honeypot-api:8000
      - VITE_WS_BASE_URL=ws://honeypot-api:8000
    depends_on:
      - honeypot-api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped

  # Honeypot Detection Service
  honeypot-api:
    build:
      context: ./backend/honeypot
      dockerfile: docker/Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URL=mongodb://mongo:27017
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - DEBUG=true
      - API_KEY=honeypot-detector-api-key-12345
      - ALLOWED_ORIGINS=["http://localhost:3000","http://frontend:3000","*"]
    depends_on:
      - mongo
      - redis
    volumes:
      - ./backend/honeypot/models:/app/models
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Honeypot Worker
  honeypot-worker:
    build:
      context: ./backend/honeypot
      dockerfile: docker/Dockerfile.worker
    environment:
      - MONGODB_URL=mongodb://mongo:27017
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    depends_on:
      - mongo
      - redis
    volumes:
      - ./backend/honeypot/models:/app/models
    restart: unless-stopped

  # Scanner Service
  scanner-api:
    build:
      context: ./backend/scanner
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    environment:
      - MONGODB_URL=mongodb://mongo:27017
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=true
      - API_KEY=scanner-api-key-12345
      - ALLOWED_ORIGINS=["http://localhost:3000","http://frontend:3000","*"]
    depends_on:
      - mongo
      - redis
    restart: unless-stopped

  # Mempool Monitor Service
  mempool-api:
    build:
      context: ./backend/mempool
      dockerfile: Dockerfile
    ports:
      - "8002:8000"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=true
      - API_KEY=mempool-api-key-12345
      - ALLOWED_ORIGINS=["http://localhost:3000","http://frontend:3000","*"]
    depends_on:
      - redis
    restart: unless-stopped

  # Database
  mongo:
    image: mongo:7.0
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Cache/Message Broker
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    depends_on:
      - honeypot-api
      - scanner-api
      - mempool-api

  # Note: Grafana moved to port 3001 to avoid conflict with frontend
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=securepassword
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  mongo_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: scorpius-network
    driver: bridge
