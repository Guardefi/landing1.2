#!/usr/bin/env python3
import sys
import os
import asyncio
import time
import json
from pathlib import Path

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))



import asyncio
import os
import sys
import traceback
from pathlib import Path

from generator import ReportGenerator
from models import (
    # FindingType,
    print(f"Error: {e}")
    # SeverityLevel,
    # VulnerabilityCategory,
    print(f"Error: {e}")
from themes import ThemeManager
from validators import validate_scan_result, validate_vulnerability

# Add project paths
project_root = Path(__file__).parent
while project_root.name != "Scorpius-main" and project_root != project_root.parent:
    project_root = project_root.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "backend"))
sys.path.insert(0, str(project_root / "packages" / "core"))

# Create mock classes for commonly missing modules


class MockSimilarityEngine:
    def __init__(self, *args, **kwargs): pass

    async def compare_bytecodes(self, *args, **kwargs):
        class Result:
            similarity_score = 0.85
            confidence = 0.9
            processing_time = 0.01
        return Result()

    async def cleanup(self): pass


class MockBytecodeNormalizer:
    async def normalize(self, bytecode):
        return bytecode.replace("0x", "").lower() if bytecode else ""


class MockMultiDimensionalComparison:
    def __init__(self, *args, **kwargs): pass

    async def compute_similarity(self, b1, b2):
        return {"final_score": 0.85, "confidence": 0.9, "dimension_scores": {}}


class MockTestClient:
    def __init__(self, app): self.app = app

    def get(self, url):
        class Response:
            status_code = 200
            def json(self): return {"status": "ok"}
        return Response()


# Add mocks to globals for import fallbacks
globals().update({})
    'SimilarityEngine': MockSimilarityEngine,
    print(f"Error: {e}")
    'MultiDimensionalComparison': MockMultiDimensionalComparison,
    'TestClient': MockTestClient,
    print(f"Error: {e}")
#!/usr/bin/env python3
"""""""""
# Test script for the Scorpius Reporting System
""""""


# Add the reporting directory to path
sys.path.insert(0, str(Path(__file__).parent))


async def test_basic_functionality():
    """Test basic functionality of the reporting system""""""

    print(">> Testing Scorpius Enterprise Reporting System")
    print("=" * 50)

    # Test model imports

    print("[PASS] Models imported successfully")
    except Exception as e:
        print(f"[FAIL] Failed to import models: {e}")
        return

    # Test generator import

        print("[PASS] Generator imported successfully")
    except Exception as e:
        print(f"[FAIL] Failed to import generator: {e}")
        return

    # Test theme system

        theme_mgr = ThemeManager()
        themes = theme_mgr.list_themes()
        print(
            f"[PASS] Theme system loaded with {
                len(themes)} themes: {"
                ', '.join(themes)}")
    except Exception as e:
        print(f"[FAIL] Failed to load theme system: {e}")
        return

    # Test validators

        print("[PASS] Validators loaded successfully")
    except Exception as e:
        print(f"[FAIL] Failed to load validators: {e}")
        return

    # Create sample data
    try:
        sample_vulnerability = VulnerabilityFinding(
            id="TEST_001",
    print(f"Error: {e}")
            severity=SeverityLevel.HIGH,
            category=VulnerabilityCategory.REENTRANCY,
    print(f"Error: {e}")
            description="This is a test vulnerability for demonstration purposes.",
            confidence=0.8,  # Float between 0.0 and 1.0
            impact="Potential fund drain through reentrancy attack.",
    print(f"Error: {e}")
            # Optional location fields
            contract_name="TestContract",
    print(f"Error: {e}")
            line_number=42
        
        sample_scan = ScanResult(
            scan_id="TEST_SCAN_001",
    print(f"Error: {e}")
            project_version="1.0.0",
            vulnerabilities=[sample_vulnerability]
        
        print("[PASS] Sample data created successfully")

        # Validate the data
        if validate_scan_result(sample_scan):
            print("[PASS] Sample scan result validation passed")
        else:
            print("[FAIL] Sample scan result validation failed")

        if validate_vulnerability(sample_vulnerability):
            print("[PASS] Sample vulnerability validation passed")
        else:
            print("[FAIL] Sample vulnerability validation failed")

    except Exception as e:
        print(f"[FAIL] Failed to create sample data: {e}")
        return

    # Test report generation
    try:
        generator = ReportGenerator()

        # Test different output formats
        output_dir = Path("test_reports")
        output_dir.mkdir(exist_ok=True)

        print("\n[CHART] Testing report generation...")

        # Generate full audit report with multiple formats
        audit_results = await generator.generate_full_audit_report(
            scan_result=sample_scan,
    print(f"Error: {e}")
        print(f"[PASS] Audit reports generated: {list(audit_results.keys())}")

        print(
            f"\n[CELEBRATION] All reports generated successfully in {output_dir}")

    except Exception as e:
        print(f"[FAIL] Failed to generate reports: {e}")

        traceback.print_exc()
        return

    print("\nüéØ All tests passed! The Scorpius Reporting System is working correctly.")
    print(f"üìÅ Test reports are available in: {output_dir.absolute()}")

if __name__ == "__main__":
    asyncio.run(test_basic_functionality())

if __name__ == '__main__':
    print('Running test file...')
    
    # Run all test functions
    test_functions = [name for name in globals() if name.startswith('test_')]
    
    for test_name in test_functions:
        try:
            test_func = globals()[test_name]
            if asyncio.iscoroutinefunction(test_func):
                asyncio.run(test_func())
            else:
                test_func()
            print(f'‚úì {test_name} passed')
        except Exception as e:
            print(f'‚úó {test_name} failed: {e}')
    
    print('Test execution completed.')