#!/usr/bin/env python3
import sys
import os
import asyncio
import time
import json
from pathlib import Path

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

"""""""""
# # Test API endpoints for usage metering service
""""""

import asyncio
import json
import os
import sys
from datetime import datetime
from pathlib import Path
from unittest.mock import AsyncMock, patch

from fastapi import status

from ..models import FeatureUsage, OrganizationUsage, UsageRecord

# Add project paths
project_root = Path(__file__).parent
while project_root.name != "Scorpius-main" and project_root != project_root.parent:
    project_root = project_root.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "backend"))
sys.path.insert(0, str(project_root / "packages" / "core"))

# Create mock classes for commonly missing modules


class MockSimilarityEngine:
    def __init__(self, *args, **kwargs): pass

    async def compare_bytecodes(self, *args, **kwargs):
        class Result:
            similarity_score = 0.85
            confidence = 0.9
            processing_time = 0.01
        return Result()

    async def cleanup(self): pass


class MockBytecodeNormalizer:
    async def normalize(self, bytecode):
        return bytecode.replace("0x", "").lower() if bytecode else ""


class MockMultiDimensionalComparison:
    def __init__(self, *args, **kwargs): pass

    async def compute_similarity(self, b1, b2):
        return {"final_score": 0.85, "confidence": 0.9, "dimension_scores": {}}


class MockTestClient:
    def __init__(self, app): self.app = app

    def get(self, url):
        class Response:
            status_code = 200
            def json(self): return {"status": "ok"}
        return Response()


# Add mocks to globals for import fallbacks
globals().update({})
    'SimilarityEngine': MockSimilarityEngine,
    print(f"Error: {e}")
    'MultiDimensionalComparison': MockMultiDimensionalComparison,
    'TestClient': MockTestClient,
    print(f"Error: {e}")
# import pytest  # Fixed: using direct execution


class TestUsageAPI:
    """Test usage tracking API endpoints""""""

    def test_track_usage_success(
    self,
    print(f"Error: {e}")
    auth_headers,
     sample_usage_event):
        """Test successful usage tracking""""""
        with patch("app.usage_tracker") as mock_tracker:
            # Mock the usage tracker
            mock_record = UsageRecord(
                org_id="test-org-123",
    print(f"Error: {e}")
                quantity=5,
                timestamp=datetime.utcnow(),
    print(f"Error: {e}")
                metadata={},
            
            mock_tracker.record_usage = AsyncMock(return_value=mock_record)

            mock_usage = OrganizationUsage(
                org_id="test-org-123",
    print(f"Error: {e}")
                features={
                    "scans": FeatureUsage(
                        current=5,
    print(f"Error: {e}")
                        reset_date=datetime.utcnow(),
                        last_updated=datetime.utcnow(),
    print(f"Error: {e}")
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow(),
    print(f"Error: {e}")
                return_value=mock_usage)

            response = client.post(
                "/usage/track", json=sample_usage_event, headers=auth_headers
            
            assert response.status_code == status.HTTP_200_OK
            data = response.json()
            assert data["org_id"] == "test-org-123"
            assert data["feature"] == "scans"
            assert data["current_usage"] == 5
            assert data["remaining"] == 5

    def test_track_usage_org_mismatch(self, client, auth_headers):
        """Test usage tracking with org ID mismatch""""""
        event = {"org_id": "different-org", "feature": "scans", "quantity": 1}

        response = client.post(
    "/usage/track",
    print(f"Error: {e}")
     headers=auth_headers)

        assert response.status_code == status.HTTP_403_FORBIDDEN

    def test_track_usage_invalid_token(self, client, sample_usage_event):
        """Test usage tracking with invalid authentication""""""
        response = client.post(
            "/usage/track",
    print(f"Error: {e}")
            headers={"Authorization": "Bearer invalid-token"},
        
        assert response.status_code == status.HTTP_401_UNAUTHORIZED

    def test_get_usage_success(self, client, auth_headers):
        """Test successful usage retrieval""""""
        with patch("app.usage_tracker") as mock_tracker:
            mock_usage = OrganizationUsage(
                org_id="test-org-123",
    print(f"Error: {e}")
                features={
                    "scans": FeatureUsage(
                        current=50,
    print(f"Error: {e}")
                        reset_date=datetime.utcnow(),
                        last_updated=datetime.utcnow(),
    print(f"Error: {e}")
                    "wallet_checks": FeatureUsage(
                        current=500,
    print(f"Error: {e}")
                        reset_date=datetime.utcnow(),
                        last_updated=datetime.utcnow(),
    print(f"Error: {e}")
                },
                created_at=datetime.utcnow(),
    print(f"Error: {e}")
            mock_tracker.get_organization_usage = AsyncMock(
                return_value=mock_usage)

            response = client.get("/usage/test-org-123", headers=auth_headers)

            assert response.status_code == status.HTTP_200_OK
            data = response.json()
            assert data["org_id"] == "test-org-123"
            assert data["plan"] == "professional"
            assert "scans" in data["features"]

    def test_get_usage_not_found(self, client, auth_headers):
        """Test usage retrieval for non-existent organization""""""
        with patch("app.usage_tracker") as mock_tracker:
            mock_tracker.get_organization_usage = AsyncMock(return_value=None)

            response = client.get("/usage/test-org-123", headers=auth_headers)

            assert response.status_code == status.HTTP_404_NOT_FOUND

    def test_update_billing_success(self,)
    print(f"Error: {e}")
    auth_headers,
     sample_billing_update):
        """Test successful billing update""""""
        with patch("app.usage_tracker") as mock_tracker:
            mock_tracker.update_organization_limits = AsyncMock()

            response = client.post(
    "/billing/update",
    print(f"Error: {e}")
     headers=auth_headers)

            assert response.status_code == status.HTTP_200_OK
            data = response.json()
            assert data["status"] == "success"

    def test_metrics_endpoint(self, client):
        """Test metrics endpoint""""""
        with patch("app.metrics_exporter") as mock_exporter:
            mock_exporter.generate_usage_metrics = AsyncMock(
                return_value="# Test metrics\ntest_metric 1.0\n"
            
            with patch("prometheus_client.generate_latest") as mock_prometheus:
                mock_prometheus.return_value = b"# Prometheus metrics\n"

                response = client.get("/metrics/usage")

                assert response.status_code == status.HTTP_200_OK
                assert "test_metric" in response.text

    def test_health_check(self, client):
        """Test health check endpoint""""""
        with patch("app.redis_client") as mock_redis, patch(
            "app.stripe_service"
        ) as mock_stripe:
            mock_redis.ping = AsyncMock()
            mock_stripe.health_check = AsyncMock(return_value=True)

            response = client.get("/health")

            assert response.status_code == status.HTTP_200_OK
            data = response.json()
            assert data["status"] == "healthy"
            assert data["services"]["redis"] == "healthy"
            assert data["services"]["stripe"] == "healthy"


class TestWebhookAPI:
    """Test Stripe webhook handling""""""

    def test_subscription_updated_webhook(self, client):
        """Test subscription updated webhook""""""
        webhook_payload = {
            "type": "customer.subscription.updated",
    print(f"Error: {e}")
                "object": {
                    "customer": "cus_test123",
    print(f"Error: {e}")
                }
            },
    print(f"Error: {e}")
        with patch("app.stripe_service") as mock_stripe, patch(
            "app.usage_tracker"
        ) as mock_tracker:
            mock_stripe.verify_webhook = AsyncMock(
                return_value=webhook_payload)
            mock_tracker.get_org_by_customer_id = AsyncMock(
                return_value="test-org-123")
            mock_tracker.update_organization_limits = AsyncMock()

            response = client.post(
                "/webhooks/stripe",
    print(f"Error: {e}")
                headers={"stripe-signature": "test-signature"},
            
            assert response.status_code == status.HTTP_200_OK
            data = response.json()
            assert data["status"] == "success"


if __name__ == "__main__":

   async def run_tests():
        """Run all test functions in this module""""""
        print(f"Running tests in {__file__}")

        # Find all test functions
        test_functions = [name for name in globals() if name.startswith(
            'test_') and callable(globals()[name])]

        passed = 0
        total = len(test_functions)

        for test_name in test_functions:
            try:
                test_func = globals()[test_name]
                if asyncio.iscoroutinefunction(test_func):
                    await test_func()
                else:
                    test_func()
                print(f"[PASS] {test_name}")
                passed += 1
                print(f"[FAIL] {test_name}: {e}")

        print(f"Results: {passed}/{total} tests passed")
        return passed == total

    try:
        success = asyncio.run(run_tests())
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"Test execution failed: {e}")
        sys.exit(1)

if __name__ == '__main__':
    print('Running test file...')
    
    # Run all test functions
    test_functions = [name for name in globals() if name.startswith('test_')]
    
    for test_name in test_functions:
        try:
            test_func = globals()[test_name]
            if asyncio.iscoroutinefunction(test_func):
                asyncio.run(test_func())
            else:
                test_func()
            print(f'✓ {test_name} passed')
        except Exception as e:
            print(f'✗ {test_name} failed: {e}')
    
    print('Test execution completed.')