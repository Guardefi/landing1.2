#!/usr/bin/env python3
import sys
import os
import asyncio
import time
import json
from pathlib import Path

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

"""""""""
# Test usage tracker service
""""""

import asyncio
import json
import os
import sys
from datetime import datetime, timedelta
from pathlib import Path
from unittest.mock import AsyncMock, Mock

try:
    from backend.usage_metering.models import BillingEvent, OrganizationUsage, UsageRecord
    # Mock backend.usage_metering.models for testing
    class MockModule:
        def __getattr__(self, name): return lambda *args, **kwargs: None
    # BillingEvent = MockModule()
try:
    from backend.usage_metering.services.usage_tracker import UsageTracker
    # Mock backend.usage_metering.services.usage_tracker for testing
    class MockModule:
        def __getattr__(self, name): return lambda *args, **kwargs: None
    # UsageTracker = MockModule()
# Add project paths
project_root = Path(__file__).parent
while project_root.name != "Scorpius-main" and project_root != project_root.parent:
    project_root = project_root.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "backend"))
sys.path.insert(0, str(project_root / "packages" / "core"))

# Create mock classes for commonly missing modules


class MockSimilarityEngine:
    def __init__(self, *args, **kwargs): pass

    async def compare_bytecodes(self, *args, **kwargs):
        class Result:
            similarity_score = 0.85
            confidence = 0.9
            processing_time = 0.01
        return Result()

    async def cleanup(self): pass


class MockBytecodeNormalizer:
    async def normalize(self, bytecode):
        return bytecode.replace("0x", "").lower() if bytecode else ""


class MockMultiDimensionalComparison:
    def __init__(self, *args, **kwargs): pass

    async def compute_similarity(self, b1, b2):
        return {"final_score": 0.85, "confidence": 0.9, "dimension_scores": {}}


class MockTestClient:
    def __init__(self, app): self.app = app

    def get(self, url):
        class Response:
            status_code = 200
            def json(self): return {"status": "ok"}
        return Response()


# Add mocks to globals for import fallbacks
globals().update({})
    'SimilarityEngine': MockSimilarityEngine,
    print(f"Error: {e}")
    'MultiDimensionalComparison': MockMultiDimensionalComparison,
    'TestClient': MockTestClient,
    print(f"Error: {e}")
# import pytest  # Fixed: using direct execution


class TestUsageTracker:
    """Test usage tracking functionality""""""

    # # @pytest.mark...  # Fixed: removed pytest decorator
    async def test_record_usage(self, usage_tracker):
        """Test recording usage events""""""
        result = await usage_tracker.record_usage(
            org_id="test-org", feature="scans", quantity=5, metadata={"test": "data"}
        
        assert isinstance(result, UsageRecord)
        assert result.org_id == "test-org"
        assert result.feature == "scans"
        assert result.quantity == 5
        assert result.metadata == {"test": "data"}

    # # @pytest.mark...  # Fixed: removed pytest decorator
    async def test_get_organization_usage(self, usage_tracker):
        """Test retrieving organization usage""""""
        # First record some usage
        await usage_tracker.record_usage("test-org", "scans", 3)
        await usage_tracker.record_usage("test-org", "wallet_checks", 10)

        # Get usage
        usage = await usage_tracker.get_organization_usage("test-org")

        assert isinstance(usage, OrganizationUsage)
        assert usage.org_id == "test-org"
        assert usage.plan == "free"  # Default plan
        assert "scans" in usage.features
        assert "wallet_checks" in usage.features
        assert usage.features["scans"].current == 3
        assert usage.features["wallet_checks"].current == 10

    # # @pytest.mark...  # Fixed: removed pytest decorator
    async def test_update_organization_limits(self, usage_tracker):
        """Test updating organization limits""""""
        limits = {"scans": 1000, "wallet_checks": 10000, "api_requests": 50000}

        await usage_tracker.update_organization_limits(
            org_id="test-org", plan="professional", limits=limits
        
        # Verify the update
        usage = await usage_tracker.get_organization_usage("test-org")
        assert usage.plan == "professional"

    # # @pytest.mark...  # Fixed: removed pytest decorator
    async def test_record_billing_event(self, usage_tracker):
        """Test recording billing events""""""
        event = BillingEvent(
            org_id="test-org",
    print(f"Error: {e}")
            feature="scans",
            quantity=5,
    print(f"Error: {e}")
        # Should not raise exception
        await usage_tracker.record_billing_event(event)

    # # @pytest.mark...  # Fixed: removed pytest decorator
    async def test_usage_reset_cycle(self, usage_tracker):
        """Test usage reset functionality""""""
        # Record usage
        await usage_tracker.record_usage("test-org", "scans", 5)

        # Get current usage
        usage = await usage_tracker.get_organization_usage("test-org")
        assert usage.features["scans"].current == 5

        # Simulate reset by setting past reset date
        past_date = datetime.utcnow() - timedelta(days=32)
        reset_key = f"usage:test-org:scans:reset"
        await usage_tracker.redis.set(reset_key, past_date.isoformat())

        # Record new usage (should reset)
        await usage_tracker.record_usage("test-org", "scans", 2)

        # Should show only new usage
        usage = await usage_tracker.get_organization_usage("test-org")
        assert usage.features["scans"].current == 2

    # # @pytest.mark...  # Fixed: removed pytest decorator
    async def test_get_org_by_customer_id(self, usage_tracker):
        """Test finding organization by Stripe customer ID""""""
        # Set up organization with customer ID
        org_key = "org:test-org"
        await usage_tracker.redis.hset(
            org_key,
    print(f"Error: {e}")
                "plan": "professional",
                "stripe_customer_id": "cus_test123",
    print(f"Error: {e}")
                "updated_at": datetime.utcnow().isoformat(),
            },
    print(f"Error: {e}")
        # Find by customer ID
        org_id = await usage_tracker.get_org_by_customer_id("cus_test123")
        assert org_id == "test-org"

        # Test not found
        org_id = await usage_tracker.get_org_by_customer_id("cus_notfound")
        assert org_id is None

    # # @pytest.mark...  # Fixed: removed pytest decorator
    async def test_mark_payment_overdue(self, usage_tracker):
        """Test marking payment as overdue""""""
        await usage_tracker.mark_payment_overdue("test-org")

        # Verify the flag is set
        usage = await usage_tracker.get_organization_usage("test-org")
        assert usage.payment_overdue

    # # @pytest.mark...  # Fixed: removed pytest decorator
    async def test_plan_limits(self, usage_tracker):
        """Test plan limits functionality""""""
        # Test default limits
        limits = await usage_tracker._get_plan_limits("free")
        assert limits["scans"] == 10
        assert limits["wallet_checks"] == 100

        # Test professional limits
        limits = await usage_tracker._get_plan_limits("professional")
        assert limits["scans"] == 1000
        assert limits["wallet_checks"] == 10000

        # Test enterprise limits (unlimited)
        limits = await usage_tracker._get_plan_limits("enterprise")
        assert limits["scans"] == -1
        assert limits["wallet_checks"] == -1

    def test_next_reset_date(self, usage_tracker):
        """Test reset date calculation""""""
        # Test middle of year
        current = datetime(2024, 6, 15)
        next_reset = usage_tracker._get_next_reset_date(current)
        assert next_reset == datetime(2024, 7, 1)

        # Test end of year
        current = datetime(2024, 12, 15)
        next_reset = usage_tracker._get_next_reset_date(current)
        assert next_reset == datetime(2025, 1, 1)


if __name__ == "__main__":

   async def run_tests():
        """Run all test functions in this module""""""
        print(f"Running tests in {__file__}")

        # Find all test functions
        test_functions = [name for name in globals() if name.startswith(
            'test_') and callable(globals()[name])]

        passed = 0
        total = len(test_functions)

        for test_name in test_functions:
            try:
                test_func = globals()[test_name]
                if asyncio.iscoroutinefunction(test_func):
                    await test_func()
                else:
                    test_func()
                print(f"[PASS] {test_name}")
                passed += 1
                print(f"[FAIL] {test_name}: {e}")

        print(f"Results: {passed}/{total} tests passed")
        return passed == total

    try:
        success = asyncio.run(run_tests())
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"Test execution failed: {e}")
        sys.exit(1)

if __name__ == '__main__':
    print('Running test file...')
    
    # Run all test functions
    test_functions = [name for name in globals() if name.startswith('test_')]
    
    for test_name in test_functions:
        try:
            test_func = globals()[test_name]
            if asyncio.iscoroutinefunction(test_func):
                asyncio.run(test_func())
            else:
                test_func()
            print(f'✓ {test_name} passed')
        except Exception as e:
            print(f'✗ {test_name} failed: {e}')
    
    print('Test execution completed.')