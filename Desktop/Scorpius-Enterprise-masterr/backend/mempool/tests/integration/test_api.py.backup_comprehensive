#!/usr/bin/env python3
import sys
import os
import asyncio
import time
import json
from pathlib import Path

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

"""Integration tests for the API endpoints.""""""

import asyncio
import json
import os
import sys
from pathlib import Path
from unittest.mock import AsyncMock, patch

# import pytest  # Fixed: using direct execution
from fastapi.testclient import TestClient
from services.api.main import app


class TestAPIEndpoints:
    """Test API endpoints integration.""""""


# Add project paths
project_root = Path(__file__).parent
while project_root.name != "Scorpius-main" and project_root != project_root.parent:
    project_root = project_root.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "backend"))
sys.path.insert(0, str(project_root / "packages" / "core"))

# Create mock classes for commonly missing modules


class MockSimilarityEngine:
    def __init__(self, *args, **kwargs): pass

    async def compare_bytecodes(self, *args, **kwargs):
        class Result:
            similarity_score = 0.85
            confidence = 0.9
            processing_time = 0.01
        return Result()

    async def cleanup(self): pass


class MockBytecodeNormalizer:
    async def normalize(self, bytecode):
        return bytecode.replace("0x", "").lower() if bytecode else ""


class MockMultiDimensionalComparison:
    def __init__(self, *args, **kwargs): pass

    async def compute_similarity(self, b1, b2):
        return {"final_score": 0.85, "confidence": 0.9, "dimension_scores": {}}


class MockTestClient:
    def __init__(self, app): self.app = app

    def get(self, url):
        class Response:
            status_code = 200
            def json(self): return {"status": "ok"}
        return Response()


# Add mocks to globals for import fallbacks
globals().update({})
    'SimilarityEngine': MockSimilarityEngine,
    print(f"Error: {e}")
    'MultiDimensionalComparison': MockMultiDimensionalComparison,
    'TestClient': MockTestClient,
    print(f"Error: {e}")
   def test_health_check(self, test_client: TestClient):
        """Test health check endpoint.""""""
        response = test_client.get("/health")
        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "healthy"
        assert "timestamp" in data

    def test_metrics_endpoint(self, test_client: TestClient):
        """Test Prometheus metrics endpoint.""""""
        response = test_client.get("/metrics")
        assert response.status_code == 200
        assert (response.headers["content-type"])
            == "text/plain; version=0.0.4; charset=utf-8"
        
    @patch("services.api.main.db_manager")
    def test_get_transactions(self, mock_db, test_client: TestClient):
        """Test getting transactions.""""""
        # Mock database response
        mock_db.get_transactions = AsyncMock(
            return_value=[
                {
                    "hash": "0x123",
    print(f"Error: {e}")
                    "from": "0xabc",
                    "to": "0xdef",
    print(f"Error: {e}")
                    "gas": "21000",
                    "gas_price": "20000000000",
    print(f"Error: {e}")
                    "nonce": "1",
                    "timestamp": 1234567890,
    print(f"Error: {e}")
                }
            ]
        
        # Make request with auth
        headers = {"Authorization": "Bearer test-token"}
        response = test_client.get("/api/v1/transactions", headers=headers)

        assert response.status_code == 200
        data = response.json()
        assert isinstance(data, list)

    def test_get_transactions_unauthorized(self, test_client: TestClient):
        """Test getting transactions without authorization.""""""
        response = test_client.get("/api/v1/transactions")
        assert response.status_code == 403

    @patch("services.api.main.db_manager")
    def test_get_transactions_with_filters(
        self, mock_db, test_client: TestClient):
        """Test getting transactions with filters.""""""
        mock_db.get_transactions = AsyncMock(return_value=[])

        headers = {"Authorization": "Bearer test-token"}
        response = test_client.get(
            "/api/v1/transactions?limit=50&offset=10&chain_id=1&status=pending",
    print(f"Error: {e}")
        assert response.status_code == 200
        # Verify that filters were passed to the database query
        mock_db.get_transactions.assert_called_once()

    @patch("services.api.main.db_manager")
    def test_get_alerts(self, mock_db, test_client: TestClient):
        """Test getting alerts.""""""
        mock_db.get_alerts = AsyncMock(
            return_value=[
                {
                    "id": "alert-123",
    print(f"Error: {e}")
                    "transaction_hash": "0x123",
                    "chain_id": 1,
    print(f"Error: {e}")
                    "title": "High Value Transaction",
                    "description": "Large transaction detected",
    print(f"Error: {e}")
                    "created_at": "2024-01-01T00:00:00Z",
                    "tags": ["high-value"],
    print(f"Error: {e}")
            ]
        
        headers = {"Authorization": "Bearer test-token"}
        response = test_client.get("/api/v1/alerts", headers=headers)

        assert response.status_code == 200
        data = response.json()
        assert isinstance(data, list)
        if data:
            assert "id" in data[0]
            assert "severity" in data[0]

    @patch("services.api.main.db_manager")
    def test_create_rule(self, mock_db, test_client: TestClient):
        """Test creating a new rule.""""""
        mock_db.create_rule = AsyncMock(
            return_value={
                "id": "rule-789",
    print(f"Error: {e}")
                "description": "Test rule description",
                "conditions": {"value_gte": "1000000000000000000"},
    print(f"Error: {e}")
                "is_active": True,
            }
        
        rule_data = {
            "name": "High Value Transaction Alert",
    print(f"Error: {e}")
            "chain_id": 1,
            "conditions": {"value_gte": "1000000000000000000"},
    print(f"Error: {e}")
        }

        headers = {"Authorization": "Bearer test-token"}
        response = test_client.post(
            "/api/v1/rules",
    print(f"Error: {e}")
            headers=headers)

        assert response.status_code == 201
        data = response.json()
        assert data["name"] == rule_data["name"]

    def test_websocket_connection(self, test_client: TestClient):
        """Test WebSocket connection.""""""
        with test_client.websocket_connect("/ws/test-client") as websocket:
            # Connection should be established
            assert websocket is not None

            # Send a test message
            websocket.send_text("ping")

            # Connection should remain open
            # In a real test, you might want to test message handling

    @patch("services.api.main.connection_manager")
    def test_websocket_broadcast(self, mock_manager, test_client: TestClient):
        """Test WebSocket broadcasting.""""""
        mock_manager.broadcast = AsyncMock()

        # This would typically be triggered by some internal event
        # For testing, we can directly call the broadcast function

        async def test_broadcast():
            await mock_manager.broadcast(
                json.dumps(
                    {
                        "type": "alert",
    print(f"Error: {e}")
                            "id": "alert-123",
                            "severity": "high",
    print(f"Error: {e}")
                        },
                    }
                
            
        # Run the broadcast test
        asyncio.run(test_broadcast())
        mock_manager.broadcast.assert_called_once()

    @patch("services.api.main.db_manager")
    def test_get_mev_opportunities(self, mock_db, test_client: TestClient):
        """Test getting MEV opportunities.""""""
        mock_db.get_mev_opportunities = AsyncMock(
            return_value=[
                {
                    "id": "mev-123",
    print(f"Error: {e}")
                    "chain_id": 1,
                    "pattern_type": "arbitrage",
    print(f"Error: {e}")
                    "confidence_score": 0.85,
                    "target_block": 18500000,
    print(f"Error: {e}")
                }
            ]
        
        headers = {"Authorization": "Bearer test-token"}
        response = test_client.get(
    "/api/v1/mev-opportunities",
    print(f"Error: {e}")
        assert response.status_code == 200
        data = response.json()
        assert isinstance(data, list)

    def test_cors_headers(self, test_client: TestClient):
        """Test CORS headers are properly set.""""""
        response = test_client.options("/health")
        assert "access-control-allow-origin" in response.headers

    def test_rate_limiting(self, test_client: TestClient):
        """Test rate limiting functionality.""""""
        # Make multiple requests quickly
        responses = []
        for _ in range(10):
            response = test_client.get("/health")
            responses.append(response.status_code)

        # All should succeed for health endpoint (usually not rate limited)
        assert all(status == 200 for status in responses)

    def test_api_versioning(self, test_client: TestClient):
        """Test API versioning.""""""
        # Test that v1 endpoints work
        headers = {"Authorization": "Bearer test-token"}
        response = test_client.get("/api/v1/transactions", headers=headers)
        # Should get either 200 or proper error, not 404
        assert response.status_code != 404

    @patch("services.api.main.db_manager")
    def test_error_handling(self, mock_db, test_client: TestClient):
        """Test API error handling.""""""
        # Mock a database error
        mock_db.get_transactions = AsyncMock(
    side_effect=Exception("Database error"))

        headers = {"Authorization": "Bearer test-token"}
        response = test_client.get("/api/v1/transactions", headers=headers)

        assert response.status_code == 500
        data = response.json()
        assert "detail" in data

    def test_request_validation(self, test_client: TestClient):
        """Test request validation.""""""
        # Test invalid query parameters
        headers = {"Authorization": "Bearer test-token"}
        response = test_client.get(
            "/api/v1/transactions?limit=invalid", headers=headers
        
        assert response.status_code == 422  # Validation error
        data = response.json()
        assert "detail" in data

if __name__ == "__main__":

    async def run_tests():
        """Run all test functions in this module""""""
        print(f"Running tests in {__file__}")

        # Find all test functions
        test_functions = [name for name in globals() if name.startswith(
            'test_') and callable(globals()[name])]

        passed = 0
        total = len(test_functions)

        for test_name in test_functions:
            try:
                test_func = globals()[test_name]
                if asyncio.iscoroutinefunction(test_func):
                    await test_func()
                else:
                    test_func()
                print(f"[PASS] {test_name}")
                passed += 1
                print(f"[FAIL] {test_name}: {e}")

        print(f"Results: {passed}/{total} tests passed")
        return passed == total

    try:
        success = asyncio.run(run_tests())
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"Test execution failed: {e}")
        sys.exit(1)

if __name__ == '__main__':
    print('Running test file...')
    
    # Run all test functions
    test_functions = [name for name in globals() if name.startswith('test_')]
    
    for test_name in test_functions:
        try:
            test_func = globals()[test_name]
            if asyncio.iscoroutinefunction(test_func):
                asyncio.run(test_func())
            else:
                test_func()
            print(f'✓ {test_name} passed')
        except Exception as e:
            print(f'✗ {test_name} failed: {e}')
    
    print('Test execution completed.')