#!/usr/bin/env python3
import sys
import os
import asyncio
import time
import json
from pathlib import Path

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import asyncio
import sys
from pathlib import Path

import aiohttp

# Add project paths
project_root = Path(__file__).parent
while project_root.name != "Scorpius-main" and project_root != project_root.parent:
    project_root = project_root.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "backend"))
sys.path.insert(0, str(project_root / "packages" / "core"))

# Create mock classes for commonly missing modules


class MockSimilarityEngine:
    def __init__(self, *args, **kwargs):
        pass

    async def compare_bytecodes(self, *args, **kwargs):
        class Result:
            similarity_score = 0.85
            confidence = 0.9
            processing_time = 0.01

        return Result()

    async def cleanup(self):
        pass


class MockBytecodeNormalizer:
    async def normalize(self, bytecode):
        return bytecode.replace("0x", "").lower() if bytecode else ""


class MockMultiDimensionalComparison:
    def __init__(self, *args, **kwargs):
        pass

    async def compute_similarity(self, b1, b2):
        return {"final_score": 0.85, "confidence": 0.9, "dimension_scores": {}}


class MockTestClient:
    def __init__(self, app):
        self.app = app

    def get(self, url):
        class Response:
            status_code = 200

            def json(self):
                return {"status": "ok"}

        return Response()


# Add mocks to globals for import fallbacks
globals().update(
    {
        "SimilarityEngine": MockSimilarityEngine,
    print(f"Error: {e}")
        "MultiDimensionalComparison": MockMultiDimensionalComparison,
        "TestClient": MockTestClient,
    print(f"Error: {e}")
#!/usr/bin/env python3
""""""
Test script for Honeypot Detector API
Run this to verify the API is working correctly
""""""


API_BASE = "http://localhost:8000"
API_KEY = "honeypot-detector-api-key-12345"


async def test_api():
    """Test all major API endpoints""""""
    headers = {"X-API-Key": API_KEY, "Content-Type": "application/json"}

    async with aiohttp.ClientSession() as session:
        print(">> Testing Honeypot Detector API")
        print("=" * 50)

        # Test 1: Health Check
        print("1. Testing health check...")
        try:
            async with session.get(f"{API_BASE}/health", headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"   [PASS] Health check passed: {data}")
                else:
                    print(f"   [FAIL] Health check failed: {response.status}")
        except Exception as e:
            print(f"   [FAIL] Health check error: {e}")

        # Test 2: System Status
        print("\n2. Testing system status...")
        try:
            async with session.get(f"{API_BASE}/status", headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    print(
                        f"   [PASS] System status: {
                            data.get(
                                'status',
    print(f"Error: {e}")
                else:
                    print(f"   [FAIL] System status failed: {response.status}")
        except Exception as e:
            print(f"   [WARNING]  System status error (may not be implemented): {e}")

        # Test 3: Dashboard Stats
        print("\n3. Testing dashboard stats...")
        try:
            async with session.get(
                f"{API_BASE}/api/v1/dashboard/stats", headers=headers
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"   [PASS] Dashboard stats retrieved")
                    print(
                        f"      Total analyses: {
                            data.get(
                                'total_analyses',
    print(f"Error: {e}")
                    print(
                        f"      Honeypots detected: {
                            data.get(
                                'honeypots_detected',
    print(f"Error: {e}")
                else:
                    print(
                        f"   [FAIL] Dashboard stats failed: {
                            response.status}"
                    
        except Exception as e:
            print(f"   [WARNING]  Dashboard stats error: {e}")

        # Test 4: Contract Analysis (with a test address)
        print("\n4. Testing contract analysis...")
        test_address = "0x1234567890abcdef1234567890abcdef12345678"  # Dummy address
        test_payload = {"address": test_address, "chain_id": 1, "deep_analysis": False}

        try:
            async with session.post(
                f"{API_BASE}/api/v1/analyze", headers=headers, json=test_payload
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"   [PASS] Contract analysis completed")
                    print(f"      Address: {data.get('address', 'unknown')}")
                    print(
                        f"      Is honeypot: {
                            data.get(
                                'is_honeypot',
    print(f"Error: {e}")
                    print(f"      Confidence: {data.get('confidence', 0):.2f}")
                elif response.status == 400:
                    print(
                        f"   [WARNING]  Analysis rejected (expected for dummy address): {
                            response.status}"
                    
                else:
                    print(f"   [FAIL] Analysis failed: {response.status}")
        except Exception as e:
            print(f"   [WARNING]  Analysis error: {e}")

        # Test 5: API Documentation
        print("\n5. Testing API documentation...")
        try:
            async with session.get(f"{API_BASE}/docs") as response:
                if response.status == 200:
                    print(f"   [PASS] API documentation available at {API_BASE}/docs")
                else:
                    print(
                        f"   [FAIL] API docs not available: {
                            response.status}"
                    
        except Exception as e:
            print(f"   [FAIL] API docs error: {e}")

        print("\n" + "=" * 50)
        print("[CELEBRATION] API testing completed!")
        print(f"üìù Visit {API_BASE}/docs for interactive API documentation")
        print("üîó Ready for React dashboard integration!")


def main():
    """Main function""""""
    print("Starting API tests...")
    try:
        asyncio.run(test_api())
    except KeyboardInterrupt:
        print("\n[WARNING]  Tests interrupted by user")
    except Exception as e:
        print(f"[FAIL] Test error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

if __name__ == '__main__':
    print('Running test file...')
    
    # Run all test functions
    test_functions = [name for name in globals() if name.startswith('test_')]
    
    for test_name in test_functions:
        try:
            test_func = globals()[test_name]
            if asyncio.iscoroutinefunction(test_func):
                asyncio.run(test_func())
            else:
                test_func()
            print(f'‚úì {test_name} passed')
        except Exception as e:
            print(f'‚úó {test_name} failed: {e}')
    
    print('Test execution completed.')