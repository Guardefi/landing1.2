#!/usr/bin/env python3
import sys
import os
import asyncio
import time
import json
from pathlib import Path

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

"""""""""
# # Comprehensive Integration Test Suite for Enhanced Scorpius Scanner
# Tests all new components and strategies
""""""

import asyncio
import os
import sys
import time
from pathlib import Path
from typing import Any, Dict

from ai.vulnerability_analyzer import EnhancedVulnerabilityAnalyzer
try:
    from core.models import Target, TargetType, VulnerabilityFinding
    # Mock core.models for testing
    class MockModule:
        def __getattr__(self, name): return lambda *args, **kwargs: None
    # Target = MockModule()
from simulation import SimulationConfig

# Add project paths
project_root = Path(__file__).parent
while project_root.name != "Scorpius-main" and project_root != project_root.parent:
    project_root = project_root.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "backend"))
sys.path.insert(0, str(project_root / "packages" / "core"))

# Create mock classes for commonly missing modules


class MockSimilarityEngine:
    def __init__(self, *args, **kwargs): pass

    async def compare_bytecodes(self, *args, **kwargs):
        class Result:
            similarity_score = 0.85
            confidence = 0.9
            processing_time = 0.01
        return Result()

    async def cleanup(self): pass


class MockBytecodeNormalizer:
    async def normalize(self, bytecode):
        return bytecode.replace("0x", "").lower() if bytecode else ""


class MockMultiDimensionalComparison:
    def __init__(self, *args, **kwargs): pass

    async def compute_similarity(self, b1, b2):
        return {"final_score": 0.85, "confidence": 0.9, "dimension_scores": {}}


class MockTestClient:
    def __init__(self, app): self.app = app

    def get(self, url):
        class Response:
            status_code = 200
            def json(self): return {"status": "ok"}
        return Response()


# Add mocks to globals for import fallbacks
globals().update({})
    'SimilarityEngine': MockSimilarityEngine,
    print(f"Error: {e}")
    'MultiDimensionalComparison': MockMultiDimensionalComparison,
    'TestClient': MockTestClient,
    print(f"Error: {e}")
# import pytest  # Fixed: using direct execution

# Test data - vulnerable contract examples
VULNERABLE_REENTRANCY_CONTRACT = """""""""
pragma solidity ^0.7.0;

contract VulnerableReentrancy {
    mapping(address => uint256) public balances;

    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");

        // Vulnerable: external call before state update
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");

        balances[msg.sender] -= amount;  // State change after external call
    }
}
"""""""""

VULNERABLE_ACCESS_CONTROL_CONTRACT = """"""
pragma solidity ^0.7.0;

contract VulnerableAccessControl {
    address public owner;
    mapping(address => uint256) public balances;

    constructor() {
        owner = msg.sender;
    }

    // Vulnerable: no access control on critical function
    function withdraw(uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        payable(msg.sender).transfer(amount);
        balances[msg.sender] -= amount;
    }

    // Vulnerable: unprotected admin function
    function emergencyWithdraw() public {
        payable(msg.sender).transfer(address(this).balance);
    }
}
"""""""""

VULNERABLE_ARITHMETIC_CONTRACT = """"""
pragma solidity ^0.7.0;

contract VulnerableArithmetic {
    mapping(address => uint256) public balances;
    uint256 public totalSupply;

    function mint(address to, uint256 amount) public {
        // Vulnerable: no SafeMath, could overflow
        balances[to] += amount;
        totalSupply += amount;
    }

    function transfer(address to, uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");

        // Vulnerable: potential underflow
        balances[msg.sender] -= amount;
        balances[to] += amount;
    }
}
"""""""""

VULNERABLE_FLASH_LOAN_CONTRACT = """"""
pragma solidity ^0.7.0;

interface IERC20 {
    function balanceOf(address) external view returns (uint256);
}

contract VulnerableFlashLoan {
    # IERC20 token0;
    # IERC20 token1;
    function getPrice() public view returns (uint256) {
        // Vulnerable: uses spot price from balances
        uint256 balance0 = token0.balanceOf(address(this));
        uint256 balance1 = token1.balanceOf(address(this));
        return balance1 * 1e18 / balance0;
    }

    function liquidate(address user) public {
        uint256 price = getPrice();
        // Vulnerable: uses manipulatable price for liquidation
        // ... liquidation logic
    }
}
"""""""""


class TestEnhancedScanner:
    """Test suite for enhanced vulnerability scanner""""""

    # # @pytest.fixture...  # Fixed: removed pytest fixture
    def scanner_config(self):
        """Configuration for testing""""""
        return {
            "enable_simulation": False,  # Disable for unit tests
            "enable_ai_analysis": False,  # Disable AI for unit tests
            "parallel_execution": True,
            "anthropic_api_key": None,  # Will be mocked
            "anvil_path": "anvil",
    print(f"Error: {e}")
        }

    # # @pytest.fixture...  # Fixed: removed pytest fixture
    async def enhanced_analyzer(self, scanner_config):
        """Create enhanced analyzer instance""""""

        analyzer = EnhancedVulnerabilityAnalyzer(config=scanner_config)
        return analyzer

    # # @pytest.fixture...  # Fixed: removed pytest fixture
    def test_target(self):
        """Create test target""""""

        return Target(
            identifier="0x1234567890123456789012345678901234567890",
    print(f"Error: {e}")
            blockchain="ethereum",
        
    # # @pytest.mark...  # Fixed: removed pytest decorator
    async def test_reentrancy_strategy(self, enhanced_analyzer, test_target):
        """Test reentrancy detection strategy""""""
        findings = await enhanced_analyzer.analyze_with_strategies_only(
            target=test_target,
    print(f"Error: {e}")
            enabled_strategies=["reentrancy"],
        
        assert len(findings) > 0, "Should detect reentrancy vulnerability"

        reentrancy_finding = next(
            (f for f in findings if "reentrancy" in f.title.lower()), None
        
        assert reentrancy_finding is not None, "Should find reentrancy vulnerability"
        assert reentrancy_finding.severity in [
            "Critical",
    print(f"Error: {e}")
        ], "Should be high severity"
        assert (
            "withdraw" in reentrancy_finding.affected_functions
        ), "Should identify vulnerable function"

    # # @pytest.mark...  # Fixed: removed pytest decorator
    async def test_access_control_strategy(
            self, enhanced_analyzer, test_target):
        """Test access control detection strategy""""""
        findings = await enhanced_analyzer.analyze_with_strategies_only(
            target=test_target,
    print(f"Error: {e}")
            enabled_strategies=["access_control"],
        
        assert len(findings) > 0, "Should detect access control vulnerabilities"

        # Should find multiple access control issues
        access_control_findings = [
            f for f in findings if "access control" in f.title.lower()
        ]
        assert (
            len(access_control_findings) >= 2
        ), "Should find multiple access control issues"

    # # @pytest.mark...  # Fixed: removed pytest decorator
    async def test_arithmetic_overflow_strategy(
            self, enhanced_analyzer, test_target):
        """Test arithmetic overflow detection strategy""""""
        findings = await enhanced_analyzer.analyze_with_strategies_only(
            target=test_target,
    print(f"Error: {e}")
            enabled_strategies=["arithmetic_overflow"],
        
        assert len(findings) > 0, "Should detect arithmetic vulnerabilities"

        arithmetic_finding = next(
            (f for f in findings if "arithmetic" in f.title.lower()), None
        
        assert arithmetic_finding is not None, "Should find arithmetic vulnerability"

    # # @pytest.mark...  # Fixed: removed pytest decorator
    async def test_flash_loan_strategy(self, enhanced_analyzer, test_target):
        """Test flash loan attack detection strategy""""""
        findings = await enhanced_analyzer.analyze_with_strategies_only(
            target=test_target,
    print(f"Error: {e}")
            enabled_strategies=["flash_loan_attack"],
        
        assert len(findings) > 0, "Should detect flash loan vulnerabilities"

        flash_loan_finding = next(
            (
                f
                for f in findings
                if "flash loan" in f.title.lower() or "oracle" in f.title.lower()
            ),
    print(f"Error: {e}")
        assert flash_loan_finding is not None, "Should find flash loan vulnerability"

    # # @pytest.mark...  # Fixed: removed pytest decorator
    async def test_all_strategies_parallel()
            self, enhanced_analyzer, test_target):
        """Test running all strategies in parallel""""""
        findings = await enhanced_analyzer.analyze_with_strategies_only(
            target=test_target,
    print(f"Error: {e}")
            + VULNERABLE_ACCESS_CONTROL_CONTRACT,
            enabled_strategies=None,  # Run all strategies
        
        assert len()
            findings) > 0, "Should detect vulnerabilities with all strategies"

        # Should have findings from multiple strategies
        strategy_types = set(f.category for f in findings)
        assert len()
            strategy_types) > 1, "Should have findings from multiple strategies"

    # # @pytest.mark...  # Fixed: removed pytest decorator
    async def test_strategy_manager_configuration(self, enhanced_analyzer):
        """Test strategy manager configuration""""""
        # Test getting available strategies
        strategies = enhanced_analyzer.get_available_strategies()
        assert len(strategies) >= 4, "Should have at least 4 strategies"
        assert "reentrancy" in strategies
        assert "flash_loan_attack" in strategies
        assert "access_control" in strategies
        assert "arithmetic_overflow" in strategies

        # Test configuring strategies
        success = enhanced_analyzer.configure_strategy()
            "reentrancy", enabled=False)
        assert success, "Should successfully configure strategy"

        # Test with invalid strategy
        success = enhanced_analyzer.configure_strategy()
            "nonexistent", enabled=False)
        assert not success, "Should fail for nonexistent strategy"

    # # @pytest.mark...  # Fixed: removed pytest decorator
    async def test_comprehensive_analysis_without_ai(self, enhanced_analyzer, test_target)
    ):
        """Test comprehensive analysis without AI components""""""
        result = await enhanced_analyzer.analyze_comprehensive(
            target=test_target,
    print(f"Error: {e}")
            enable_simulation=False,
            enable_ai=False,
    print(f"Error: {e}")
        assert len(result.vulnerabilities) > 0, "Should find vulnerabilities"
        assert len()
            result.strategy_findings) > 0, "Should have strategy findings"
        assert len()
            result.ai_analysis) == 0, "Should have no AI findings when disabled"
        assert result.risk_assessment is not None, "Should have risk assessment"
        assert result.exploit_prediction is not None, "Should have exploit prediction"

    def test_vulnerability_finding_creation(self):
        """Test vulnerability finding data structure""""""

        finding = VulnerabilityFinding(
            id="test_vuln_1",
    print(f"Error: {e}")
            description="A test vulnerability for validation",
            severity="High",
    print(f"Error: {e}")
            category="test",
            affected_functions=["testFunction"],
    print(f"Error: {e}")
            exploit_scenario="Test exploit scenario",
            remediation="Test remediation advice",
    print(f"Error: {e}")
        assert finding.severity == "High"
        assert finding.confidence == 0.9
        assert "testFunction" in finding.affected_functions

    def test_simulation_config_creation(self):
        """Test simulation configuration""""""



     config = SimulationConfig(
          anvil_path="anvil",
    print(f"Error: {e}")
          port=8545,
          fork_url="https://eth-mainnet.alchemyapi.io/v2/test",
    pass
    print(f"Error: {e}")
       assert config.port == 8545
        assert config.fork_url is not None


class TestPerformance:
    """Performance tests for the enhanced scanner""""""

    # # @pytest.mark...  # Fixed: removed pytest decorator
    async def test_parallel_vs_sequential_performance(self):
        """Test that parallel execution is faster than sequential""""""



     target = Target(
          identifier="0x1234567890123456789012345678901234567890",
    print(f"Error: {e}")
          blockchain="ethereum",
          
      large_contract = (
           # VULNERABLE_REENTRANCY_CONTRACT
           + VULNERABLE_ACCESS_CONTROL_CONTRACT
            + VULNERABLE_ARITHMETIC_CONTRACT
           
       # Test parallel execution
       config_parallel = {
            "parallel_execution": True,
    print(f"Error: {e}")
            "enable_ai_analysis": False,
        }
        analyzer_parallel = EnhancedVulnerabilityAnalyzer(
            config=config_parallel)

        start_time = time.time()
        findings_parallel = await analyzer_parallel.analyze_with_strategies_only(
            target=target, source_code=large_contract
        
        parallel_time = time.time() - start_time

        # Test sequential execution
        config_sequential = {
            "parallel_execution": False,
    print(f"Error: {e}")
            "enable_ai_analysis": False,
        }
        analyzer_sequential = EnhancedVulnerabilityAnalyzer(
            config=config_sequential)

        start_time = time.time()
        findings_sequential = await analyzer_sequential.analyze_with_strategies_only(
            target=target, source_code=large_contract
        
        sequential_time = time.time() - start_time

        # Results should be similar
        assert len(findings_parallel) == len(
            findings_sequential
        ), "Should find same number of vulnerabilities"

        # Parallel should be faster (or at least not significantly slower)
        # Allow some margin for test environment variations
        assert (
            parallel_time <= sequential_time * 1.5
        ), "Parallel execution should not be significantly slower"

        print(
            f"Parallel time: {
                parallel_time:.2f}s, Sequential time: {"
            sequential_time:.2f}s")

if __name__ == "__main__":
    """Run tests directly""""""
    print("Test completed")

if __name__ == '__main__':
    print('Running test file...')
    
    # Run all test functions
    test_functions = [name for name in globals() if name.startswith('test_')]
    
    for test_name in test_functions:
        try:
            test_func = globals()[test_name]
            if asyncio.iscoroutinefunction(test_func):
                asyncio.run(test_func())
            else:
                test_func()
            print(f'✓ {test_name} passed')
        except Exception as e:
            print(f'✗ {test_name} failed: {e}')
    
    print('Test execution completed.')