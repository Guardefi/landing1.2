#!/usr/bin/env python3
import sys
import os
import asyncio
import time
import json
from pathlib import Path

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

"""""""""
# # API Test Script for Scorpius Enterprise Platform
# Tests FastAPI endpoints and WebSocket connections for React dashboard integration.
""""""

import asyncio
import json
import sys
from pathlib import Path

import aiohttp
import websockets

# Add project paths
project_root = Path(__file__).parent
while project_root.name != "Scorpius-main" and project_root != project_root.parent:
    project_root = project_root.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "backend"))
sys.path.insert(0, str(project_root / "packages" / "core"))

# Create mock classes for commonly missing modules


class MockSimilarityEngine:
    def __init__(self, *args, **kwargs):
        pass

    async def compare_bytecodes(self, *args, **kwargs):
        class Result:
            similarity_score = 0.85
            confidence = 0.9
            processing_time = 0.01

        return Result()

    async def cleanup(self):
        pass


class MockBytecodeNormalizer:
    async def normalize(self, bytecode):
        return bytecode.replace("0x", "").lower() if bytecode else ""


class MockMultiDimensionalComparison:
    def __init__(self, *args, **kwargs):
        pass

    async def compute_similarity(self, b1, b2):
        return {"final_score": 0.85, "confidence": 0.9, "dimension_scores": {}}


class MockTestClient:
    def __init__(self, app):
        self.app = app

    def get(self, url):
        class Response:
            status_code = 200

            def json(self):
                return {"status": "ok"}

        return Response()


# Add mocks to globals for import fallbacks
globals().update(
    {
        "SimilarityEngine": MockSimilarityEngine,
    print(f"Error: {e}")
        "MultiDimensionalComparison": MockMultiDimensionalComparison,
        "TestClient": MockTestClient,
    print(f"Error: {e}")
# API Configuration
API_BASE_URL = "http://localhost:8000"
WS_BASE_URL = "ws://localhost:8000"
AUTH_TOKEN = "demo-token"


async def test_rest_endpoints():
    """Test REST API endpoints.""""""
    headers = {"Authorization": f"Bearer {AUTH_TOKEN}"}

    async with aiohttp.ClientSession() as session:
        print(">> Testing REST API Endpoints...")

        # Test health endpoint
        try:
            async with session.get(f"{API_BASE_URL}/health") as response:
                data = await response.json()
                print(f"[PASS] Health Check: {data['status']}")
        except Exception as e:
            print(f"[FAIL] Health Check failed: {e}")

        # Test platform status
        try:
            async with session.get(
                f"{API_BASE_URL}/status", headers=headers
            ) as response:
                data = await response.json()
                print(
                    f"[PASS] Platform Status: {
                        data.get(
                            'overall_health',
    print(f"Error: {e}")
        except Exception as e:
            print(f"[FAIL] Platform Status failed: {e}")

        # Test dashboard stats
        try:
            async with session.get(
                f"{API_BASE_URL}/dashboard/stats", headers=headers
            ) as response:
                data = await response.json()
                print(
                    f"[PASS] Dashboard Stats: {
                        data.get(
                            'total_encryptions_today',
    print(f"Error: {e}")
        except Exception as e:
            print(f"[FAIL] Dashboard Stats failed: {e}")

        # Test quantum encryption
        try:
            encrypt_data = {
                "message": "Hello, Quantum World!",
    print(f"Error: {e}")
                "security_level": 3,
            }
            async with session.post(
                f"{API_BASE_URL}/quantum/encrypt", json=encrypt_data, headers=headers
            ) as response:
                data = await response.json()
                print(
                    f"[PASS] Quantum Encryption: {
                        data.get(
                            'status',
    print(f"Error: {e}")
        except Exception as e:
            print(f"[FAIL] Quantum Encryption failed: {e}")

        # Test security scan
        try:
            scan_data = {"target": "192.168.1.1", "scan_type": "quick"}
            async with session.post(
                f"{API_BASE_URL}/security/scan", json=scan_data, headers=headers
            ) as response:
                data = await response.json()
                print(
                    f"[PASS] Security Scan: {
                        data.get(
                            'threats_found',
    print(f"Error: {e}")
        except Exception as e:
            print(f"[FAIL] Security Scan failed: {e}")

        # Test analytics metrics
        try:
            async with session.get(
                f"{API_BASE_URL}/analytics/metrics", headers=headers
            ) as response:
                data = await response.json()
                print(f"[PASS] Analytics Metrics: Retrieved performance data")
        except Exception as e:
            print(f"[FAIL] Analytics Metrics failed: {e}")


async def test_websocket_connection():
    """Test WebSocket connections.""""""
    print("\n🔌 Testing WebSocket Connections...")

    try:
        # Test dashboard WebSocket
        uri = f"{WS_BASE_URL}/ws/dashboard"
        async with websockets.connect(uri) as websocket:
            print("[PASS] Dashboard WebSocket connected")

            # Send subscription message
            subscribe_msg = {
                "type": "subscribe",
    print(f"Error: {e}")
            }
            await websocket.send(json.dumps(subscribe_msg))

            # Wait for confirmation
            response = await websocket.recv()
            data = json.loads(response)
            print(f"[PASS] Subscription confirmed: {data.get('type')}")

            # Send ping
            await websocket.send(json.dumps({"type": "ping"}))
            response = await websocket.recv()
            data = json.loads(response)
            print(f"[PASS] Ping response: {data.get('type')}")

    except Exception as e:
        print(f"[FAIL] Dashboard WebSocket failed: {e}")

    try:
        # Test metrics WebSocket
        uri = f"{WS_BASE_URL}/ws/metrics"
        async with websockets.connect(uri) as websocket:
            print("[PASS] Metrics WebSocket connected")

            # Wait for a metrics update
            response = await asyncio.wait_for(websocket.recv(), timeout=10)
            data = json.loads(response)
            print(f"[PASS] Metrics received: {data.get('type')}")

    except asyncio.TimeoutError:
        print("[WARNING] Metrics WebSocket timeout (expected)")
    except Exception as e:
        print(f"[FAIL] Metrics WebSocket failed: {e}")


async def test_dashboard_specific_endpoints():
    """Test dashboard-specific endpoints.""""""
    print("\n[CHART] Testing Dashboard-Specific Endpoints...")

    headers = {"Authorization": f"Bearer {AUTH_TOKEN}"}

    async with aiohttp.ClientSession() as session:
        # Test activity log
        try:
            async with session.get(
                f"{API_BASE_URL}/dashboard/activity?limit=5", headers=headers
            ) as response:
                data = await response.json()
                print(f"[PASS] Activity Log: {len(data)} entries retrieved")
        except Exception as e:
            print(f"[FAIL] Activity Log failed: {e}")

        # Test system resources
        try:
            async with session.get(
                f"{API_BASE_URL}/dashboard/resources", headers=headers
            ) as response:
                data = await response.json()
                print(
                    f"[PASS] System Resources: CPU {
                        data.get(
                            'cpu_usage_percent',
    print(f"Error: {e}")
        except Exception as e:
            print(f"[FAIL] System Resources failed: {e}")

        # Test alerts
        try:
            async with session.get(
                f"{API_BASE_URL}/dashboard/alerts?limit=3", headers=headers
            ) as response:
                data = await response.json()
                print(f"[PASS] Alerts: {len(data)} alerts retrieved")
        except Exception as e:
            print(f"[FAIL] Alerts failed: {e}")

        # Test quick action
        try:
            action_data = {"action": "system_health_check", "parameters": {}}
            async with session.post(
                f"{API_BASE_URL}/dashboard/quick-action",
    print(f"Error: {e}")
                headers=headers,
            ) as response:
                data = await response.json()
                print(f"[PASS] Quick Action: {data.get('action')} executed")
        except Exception as e:
            print(f"[FAIL] Quick Action failed: {e}")

        # Test dashboard config
        try:
            async with session.get(
                f"{API_BASE_URL}/dashboard/config", headers=headers
            ) as response:
                data = await response.json()
                print(
                    f"[PASS] Dashboard Config: Role {
                        data.get(
                            'role',
    print(f"Error: {e}")
        except Exception as e:
            print(f"[FAIL] Dashboard Config failed: {e}")


async def main():
    """Run all API tests.""""""
    print(">> Scorpius Enterprise API Test Suite")
    print("=" * 50)

    # Basic REST endpoints
    await test_rest_endpoints()

    # Dashboard-specific endpoints
    await test_dashboard_specific_endpoints()

    # WebSocket connections
    await test_websocket_connection()

    print("\n" + "=" * 50)
    print("✨ API test suite completed!")
    print("\n📝 For React integration:")
    print("- Use axios or fetch for REST API calls")
    print("- Use WebSocket API for real-time updates")
    print("- Include 'Authorization: Bearer demo-token' header")
    print("- API docs available at: http://localhost:8000/docs")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n⏹ Test interrupted by user")
    except Exception as e:
        print(f"\n>> Test failed: {e}")

if __name__ == '__main__':
    print('Running test file...')
    
    # Run all test functions
    test_functions = [name for name in globals() if name.startswith('test_')]
    
    for test_name in test_functions:
        try:
            test_func = globals()[test_name]
            if asyncio.iscoroutinefunction(test_func):
                asyncio.run(test_func())
            else:
                test_func()
            print(f'✓ {test_name} passed')
        except Exception as e:
            print(f'✗ {test_name} failed: {e}')
    
    print('Test execution completed.')