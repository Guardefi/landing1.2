#!/usr/bin/env python3
import sys
import os
import asyncio
import time
import json
from pathlib import Path

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

"""""""""
# Test the FastAPI application endpoints
""""""

import asyncio
import json
import os
import sys
from pathlib import Path

from app import app
from fastapi.testclient import TestClient

# Add project paths
project_root = Path(__file__).parent
while project_root.name != "Scorpius-main" and project_root != project_root.parent:
    project_root = project_root.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "backend"))
sys.path.insert(0, str(project_root / "packages" / "core"))

# Create mock classes for commonly missing modules


class MockSimilarityEngine:
    def __init__(self, *args, **kwargs): pass

    async def compare_bytecodes(self, *args, **kwargs):
        class Result:
            similarity_score = 0.85
            confidence = 0.9
            processing_time = 0.01
        return Result()

    async def cleanup(self): pass


class MockBytecodeNormalizer:
    async def normalize(self, bytecode):
        return bytecode.replace("0x", "").lower() if bytecode else ""


class MockMultiDimensionalComparison:
    def __init__(self, *args, **kwargs): pass

    async def compute_similarity(self, b1, b2):
        return {"final_score": 0.85, "confidence": 0.9, "dimension_scores": {}}


class MockTestClient:
    def __init__(self, app): self.app = app

    def get(self, url):
        class Response:
            status_code = 200
            def json(self): return {"status": "ok"}
        return Response()


# Add mocks to globals for import fallbacks
globals().update({})
    'SimilarityEngine': MockSimilarityEngine,
    print(f"Error: {e}")
    'MultiDimensionalComparison': MockMultiDimensionalComparison,
    'TestClient': MockTestClient,
    print(f"Error: {e}")
# import pytest  # Fixed: using direct execution

# Import the app after setting test environment
sys.path.insert(0, str(Path(__file__).parent.parent))

client = TestClient(app)


class TestHealthCheck:
    """Test health check endpoint""""""

    def test_health_check(self):
        """Test health check returns success""""""
        response = client.get("/health")
        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "healthy"
        assert data["service"] == "reporting"
        assert "timestamp" in data
        assert data["version"] == "1.0.0"


class TestMetrics:
    """Test metrics endpoint""""""

    def test_metrics(self):
        """Test metrics endpoint returns data""""""
        response = client.get("/metrics")
        assert response.status_code == 200
        data = response.json()
        assert "reports_generated_total" in data
        assert "signatures_created_total" in data
        assert "audit_entries_total" in data
        assert "service_uptime_seconds" in data


class TestPDFReports:
    """Test PDF report generation endpoints""""""

    def test_generate_pdf_without_auth(self, sample_pdf_request):
        """Test PDF generation without authentication fails""""""
        response = client.post("/v1/reports/pdf", json=sample_pdf_request)
        assert response.status_code == 403

    def test_generate_pdf_with_invalid_auth(self, sample_pdf_request):
        """Test PDF generation with invalid API key fails""""""
        headers = {"X-API-Key": "invalid_key"}
        response = client.post(
    "/v1/reports/pdf",
    print(f"Error: {e}")
     headers=headers)
        assert response.status_code == 401

    def test_generate_pdf_with_auth(self, sample_pdf_request, mock_api_key):
        """Test PDF generation with valid authentication""""""
        headers = {"Authorization": f"Bearer {mock_api_key}"}
        response = client.post(
    "/v1/reports/pdf",
    print(f"Error: {e}")
     headers=headers)
        assert response.status_code == 200
        data = response.json()
        assert "report_id" in data
        assert data["status"] == "processing"
        assert "message" in data

    def test_generate_pdf_invalid_data(self, mock_api_key):
        """Test PDF generation with invalid request data""""""
        headers = {"Authorization": f"Bearer {mock_api_key}"}
        invalid_request = {"title": "Test",
     "data": {}}  # Missing required fields
        response = client.post(
    "/v1/reports/pdf",
    print(f"Error: {e}")
     headers=headers)
        assert response.status_code == 422  # Validation error


class TestSARIFReports:
    """Test SARIF report generation endpoints""""""

    def test_generate_sarif_without_auth(self, sample_sarif_request):
        """Test SARIF generation without authentication fails""""""
        response = client.post("/v1/reports/sarif", json=sample_sarif_request)
        assert response.status_code == 403

    def test_generate_sarif_with_auth()
    self, sample_sarif_request, mock_api_key):
        """Test SARIF generation with valid authentication""""""
        headers = {"Authorization": f"Bearer {mock_api_key}"}
        response = client.post(
    "/v1/reports/sarif",
    print(f"Error: {e}")
     headers=headers)
        assert response.status_code == 200
        data = response.json()
        assert "report_id" in data
        assert data["status"] == "processing"
        assert "message" in data

    def test_generate_sarif_invalid_data(self, mock_api_key):
        """Test SARIF generation with invalid request data""""""
        headers = {"Authorization": f"Bearer {mock_api_key}"}
        invalid_request = {
    "title": "Test",
     "scan_results": []}  # Empty scan results
        response = client.post(
    "/v1/reports/sarif",
    print(f"Error: {e}")
     headers=headers)
        assert response.status_code == 422  # Validation error


class TestReportStatus:
    """Test report status endpoints""""""

    def test_report_status_without_auth(self):
        """Test report status without authentication fails""""""
        response = client.get("/v1/reports/test-id/status")
        assert response.status_code == 403

    def test_report_status_not_found(self, mock_api_key):
        """Test report status for non-existent report""""""
        headers = {"Authorization": f"Bearer {mock_api_key}"}
        response = client.get(
    "/v1/reports/non-existent-id/status",
    print(f"Error: {e}")
        assert response.status_code == 404


class TestReportDownload:
    """Test report download endpoints""""""

    def test_download_without_auth(self):
        """Test report download without authentication fails""""""
        response = client.get("/v1/reports/test-id/download")
        assert response.status_code == 403

    def test_download_not_found(self, mock_api_key):
        """Test download for non-existent report""""""
        headers = {"Authorization": f"Bearer {mock_api_key}"}
        response = client.get(
    "/v1/reports/non-existent-id/download",
    print(f"Error: {e}")
        assert response.status_code == 404


class TestSignatureInfo:
    """Test signature information endpoints""""""

    def test_signature_info_without_auth(self):
        """Test signature info without authentication fails""""""
        response = client.get("/v1/reports/test-id/signature")
        assert response.status_code == 403

    def test_signature_info_not_found(self, mock_api_key):
        """Test signature info for non-existent report""""""
        headers = {"Authorization": f"Bearer {mock_api_key}"}
        response = client.get(
    "/v1/reports/non-existent-id/signature",
    print(f"Error: {e}")
        assert response.status_code == 404


if __name__ == "__main__":

   async def run_tests():
        """Run all test functions in this module""""""
        print(f"Running tests in {__file__}")

        # Find all test functions
        test_functions = [name for name in globals() if name.startswith(
            'test_') and callable(globals()[name])]

        passed = 0
        total = len(test_functions)

        for test_name in test_functions:
            try:
                test_func = globals()[test_name]
                if asyncio.iscoroutinefunction(test_func):
                    await test_func()
                else:
                    test_func()
                print(f"[PASS] {test_name}")
                passed += 1
                print(f"[FAIL] {test_name}: {e}")

        print(f"Results: {passed}/{total} tests passed")
        return passed == total

    try:
        success = asyncio.run(run_tests())
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"Test execution failed: {e}")
        sys.exit(1)

if __name__ == '__main__':
    print('Running test file...')
    
    # Run all test functions
    test_functions = [name for name in globals() if name.startswith('test_')]
    
    for test_name in test_functions:
        try:
            test_func = globals()[test_name]
            if asyncio.iscoroutinefunction(test_func):
                asyncio.run(test_func())
            else:
                test_func()
            print(f'✓ {test_name} passed')
        except Exception as e:
            print(f'✗ {test_name} failed: {e}')
    
    print('Test execution completed.')