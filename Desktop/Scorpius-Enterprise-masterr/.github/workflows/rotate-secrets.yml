name: Rotate Secrets

on:
  schedule:
    # Run every 90 days at 2 AM UTC
    - cron: '0 2 */90 * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rotate secrets for'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      secret_types:
        description: 'Types of secrets to rotate (comma-separated)'
        required: false
        default: 'all'
        type: string
      dry_run:
        description: 'Perform dry run without actually rotating secrets'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  PROJECT_NAME: scorpius

jobs:
  rotate-secrets:
    name: Rotate Secrets
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    permissions:
      id-token: write
      contents: read
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: secrets-rotation

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install boto3 cryptography psycopg2-binary redis

      - name: Validate environment
        run: |
          echo "Environment: ${{ github.event.inputs.environment || 'staging' }}"
          echo "Secret types: ${{ github.event.inputs.secret_types || 'all' }}"
          echo "Dry run: ${{ github.event.inputs.dry_run || 'false' }}"
          
          # Validate AWS access
          aws sts get-caller-identity
          
          # Check Parameter Store access
          aws ssm describe-parameters --max-results 1 > /dev/null

      - name: Create secrets rotation script
        run: |
          cat > rotate_secrets.py << 'EOF'
          #!/usr/bin/env python3
          """
          Scorpius Secrets Rotation Script
          Rotates database, JWT, Redis, and other sensitive credentials
          Complies with SOC-2 CC6.1 requirements for periodic key rotation
          """
          
          import boto3
          import json
          import os
          import sys
          import secrets
          import string
          import time
          from datetime import datetime, timedelta
          from typing import Dict, List, Optional
          import psycopg2
          import redis
          from cryptography.fernet import Fernet
          import base64
          
          
          class SecretsRotator:
              def __init__(self, environment: str, region: str, dry_run: bool = False):
                  self.environment = environment
                  self.region = region
                  self.dry_run = dry_run
                  self.project_name = os.getenv('PROJECT_NAME', 'scorpius')
                  
                  # Initialize AWS clients
                  self.ssm = boto3.client('ssm', region_name=region)
                  self.secretsmanager = boto3.client('secretsmanager', region_name=region)
                  self.rds = boto3.client('rds', region_name=region)
                  
                  # Rotation results
                  self.results = {
                      'rotated': [],
                      'failed': [],
                      'skipped': []
                  }
              
              def log(self, message: str, level: str = 'INFO'):
                  timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                  prefix = '[DRY RUN] ' if self.dry_run else ''
                  print(f"{timestamp} [{level}] {prefix}{message}")
              
              def generate_password(self, length: int = 32) -> str:
                  """Generate a cryptographically secure password"""
                  alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
                  return ''.join(secrets.choice(alphabet) for _ in range(length))
              
              def generate_jwt_secret(self) -> str:
                  """Generate a JWT secret key"""
                  return base64.urlsafe_b64encode(os.urandom(64)).decode('utf-8')
              
              def generate_encryption_key(self) -> str:
                  """Generate a Fernet encryption key"""
                  return Fernet.generate_key().decode('utf-8')
              
              def get_parameter_path(self, secret_name: str) -> str:
                  """Get the Parameter Store path for a secret"""
                  return f"/{self.project_name}/{self.environment}/{secret_name}"
              
              def get_current_secret(self, path: str) -> Optional[str]:
                  """Get current secret value from Parameter Store"""
                  try:
                      response = self.ssm.get_parameter(Name=path, WithDecryption=True)
                      return response['Parameter']['Value']
                  except self.ssm.exceptions.ParameterNotFound:
                      self.log(f"Parameter not found: {path}", 'WARNING')
                      return None
                  except Exception as e:
                      self.log(f"Error getting parameter {path}: {e}", 'ERROR')
                      return None
              
              def store_secret(self, path: str, value: str, description: str = "") -> bool:
                  """Store secret in Parameter Store"""
                  try:
                      if self.dry_run:
                          self.log(f"Would store secret at {path}")
                          return True
                      
                      self.ssm.put_parameter(
                          Name=path,
                          Value=value,
                          Type='SecureString',
                          Description=f"{description} - Rotated on {datetime.now().isoformat()}",
                          Overwrite=True,
                          Tags=[
                              {'Key': 'Project', 'Value': self.project_name},
                              {'Key': 'Environment', 'Value': self.environment},
                              {'Key': 'RotationDate', 'Value': datetime.now().isoformat()},
                              {'Key': 'NextRotation', 'Value': (datetime.now() + timedelta(days=90)).isoformat()}
                          ]
                      )
                      self.log(f"Successfully stored secret at {path}")
                      return True
                  except Exception as e:
                      self.log(f"Error storing secret at {path}: {e}", 'ERROR')
                      return False
              
              def rotate_database_password(self) -> bool:
                  """Rotate database password"""
                  self.log("Rotating database password...")
                  
                  db_host_path = self.get_parameter_path('database/host')
                  db_user_path = self.get_parameter_path('database/username')
                  db_pass_path = self.get_parameter_path('database/password')
                  db_name_path = self.get_parameter_path('database/name')
                  
                  try:
                      # Get current database connection info
                      db_host = self.get_current_secret(db_host_path)
                      db_user = self.get_current_secret(db_user_path)
                      current_password = self.get_current_secret(db_pass_path)
                      db_name = self.get_current_secret(db_name_path)
                      
                      if not all([db_host, db_user, current_password, db_name]):
                          self.log("Missing database connection parameters", 'ERROR')
                          return False
                      
                      # Generate new password
                      new_password = self.generate_password(32)
                      
                      if not self.dry_run:
                          # Connect to database and change password
                          conn = psycopg2.connect(
                              host=db_host,
                              user=db_user,
                              password=current_password,
                              database=db_name
                          )
                          
                          with conn.cursor() as cursor:
                              cursor.execute(f"ALTER USER {db_user} PASSWORD %s", (new_password,))
                          
                          conn.commit()
                          conn.close()
                          
                          # Test new connection
                          test_conn = psycopg2.connect(
                              host=db_host,
                              user=db_user,
                              password=new_password,
                              database=db_name
                          )
                          test_conn.close()
                      
                      # Store new password
                      if self.store_secret(db_pass_path, new_password, "Database password"):
                          self.results['rotated'].append('database_password')
                          return True
                      else:
                          self.results['failed'].append('database_password')
                          return False
                          
                  except Exception as e:
                      self.log(f"Error rotating database password: {e}", 'ERROR')
                      self.results['failed'].append('database_password')
                      return False
              
              def rotate_jwt_secret(self) -> bool:
                  """Rotate JWT secret key"""
                  self.log("Rotating JWT secret...")
                  
                  jwt_secret_path = self.get_parameter_path('jwt/secret_key')
                  jwt_refresh_path = self.get_parameter_path('jwt/refresh_secret')
                  
                  try:
                      # Generate new JWT secrets
                      new_jwt_secret = self.generate_jwt_secret()
                      new_refresh_secret = self.generate_jwt_secret()
                      
                      success = True
                      
                      # Store new JWT secret
                      if self.store_secret(jwt_secret_path, new_jwt_secret, "JWT secret key"):
                          self.results['rotated'].append('jwt_secret')
                      else:
                          self.results['failed'].append('jwt_secret')
                          success = False
                      
                      # Store new refresh secret
                      if self.store_secret(jwt_refresh_path, new_refresh_secret, "JWT refresh secret"):
                          self.results['rotated'].append('jwt_refresh_secret')
                      else:
                          self.results['failed'].append('jwt_refresh_secret')
                          success = False
                      
                      return success
                      
                  except Exception as e:
                      self.log(f"Error rotating JWT secrets: {e}", 'ERROR')
                      self.results['failed'].extend(['jwt_secret', 'jwt_refresh_secret'])
                      return False
              
              def rotate_redis_password(self) -> bool:
                  """Rotate Redis password"""
                  self.log("Rotating Redis password...")
                  
                  redis_host_path = self.get_parameter_path('redis/host')
                  redis_port_path = self.get_parameter_path('redis/port')
                  redis_pass_path = self.get_parameter_path('redis/password')
                  
                  try:
                      # Get current Redis connection info
                      redis_host = self.get_current_secret(redis_host_path)
                      redis_port = self.get_current_secret(redis_port_path) or '6379'
                      current_password = self.get_current_secret(redis_pass_path)
                      
                      if not redis_host:
                          self.log("Redis host not configured, skipping rotation", 'WARNING')
                          self.results['skipped'].append('redis_password')
                          return True
                      
                      # Generate new password
                      new_password = self.generate_password(32)
                      
                      if not self.dry_run:
                          # Connect to Redis and change password
                          r = redis.Redis(
                              host=redis_host,
                              port=int(redis_port),
                              password=current_password,
                              decode_responses=True
                          )
                          
                          # Test current connection
                          r.ping()
                          
                          # Set new password (Redis AUTH)
                          r.config_set('requirepass', new_password)
                          
                          # Test new connection
                          r_new = redis.Redis(
                              host=redis_host,
                              port=int(redis_port),
                              password=new_password,
                              decode_responses=True
                          )
                          r_new.ping()
                      
                      # Store new password
                      if self.store_secret(redis_pass_path, new_password, "Redis password"):
                          self.results['rotated'].append('redis_password')
                          return True
                      else:
                          self.results['failed'].append('redis_password')
                          return False
                          
                  except Exception as e:
                      self.log(f"Error rotating Redis password: {e}", 'ERROR')
                      self.results['failed'].append('redis_password')
                      return False
              
              def rotate_encryption_keys(self) -> bool:
                  """Rotate encryption keys"""
                  self.log("Rotating encryption keys...")
                  
                  encryption_key_path = self.get_parameter_path('encryption/key')
                  
                  try:
                      # Generate new encryption key
                      new_key = self.generate_encryption_key()
                      
                      # Store new key
                      if self.store_secret(encryption_key_path, new_key, "Application encryption key"):
                          self.results['rotated'].append('encryption_key')
                          return True
                      else:
                          self.results['failed'].append('encryption_key')
                          return False
                          
                  except Exception as e:
                      self.log(f"Error rotating encryption key: {e}", 'ERROR')
                      self.results['failed'].append('encryption_key')
                      return False
              
              def rotate_api_keys(self) -> bool:
                  """Rotate API keys"""
                  self.log("Rotating API keys...")
                  
                  api_keys = [
                      'api/internal_key',
                      'api/webhook_secret',
                      'monitoring/api_key'
                  ]
                  
                  success = True
                  
                  for key_name in api_keys:
                      try:
                          key_path = self.get_parameter_path(key_name)
                          new_key = self.generate_password(48)  # Longer for API keys
                          
                          if self.store_secret(key_path, new_key, f"API key: {key_name}"):
                              self.results['rotated'].append(key_name.replace('/', '_'))
                          else:
                              self.results['failed'].append(key_name.replace('/', '_'))
                              success = False
                              
                      except Exception as e:
                          self.log(f"Error rotating API key {key_name}: {e}", 'ERROR')
                          self.results['failed'].append(key_name.replace('/', '_'))
                          success = False
                  
                  return success
              
              def trigger_application_restart(self) -> bool:
                  """Trigger application restart to pick up new secrets"""
                  if self.dry_run:
                      self.log("Would trigger application restart")
                      return True
                  
                  try:
                      # This would typically trigger a Kubernetes rollout
                      # For now, we'll create a restart marker
                      restart_path = self.get_parameter_path('system/restart_trigger')
                      restart_time = datetime.now().isoformat()
                      
                      self.store_secret(restart_path, restart_time, "Application restart trigger")
                      self.log("Application restart triggered")
                      return True
                      
                  except Exception as e:
                      self.log(f"Error triggering application restart: {e}", 'ERROR')
                      return False
              
              def generate_rotation_report(self) -> Dict:
                  """Generate rotation report"""
                  total_rotated = len(self.results['rotated'])
                  total_failed = len(self.results['failed'])
                  total_skipped = len(self.results['skipped'])
                  
                  report = {
                      'timestamp': datetime.now().isoformat(),
                      'environment': self.environment,
                      'dry_run': self.dry_run,
                      'summary': {
                          'total_rotated': total_rotated,
                          'total_failed': total_failed,
                          'total_skipped': total_skipped,
                          'success_rate': total_rotated / (total_rotated + total_failed) * 100 if (total_rotated + total_failed) > 0 else 100
                      },
                      'details': self.results,
                      'next_rotation': (datetime.now() + timedelta(days=90)).isoformat()
                  }
                  
                  return report
              
              def run_rotation(self, secret_types: List[str]) -> Dict:
                  """Run secrets rotation"""
                  self.log(f"Starting secrets rotation for environment: {self.environment}")
                  self.log(f"Secret types: {', '.join(secret_types)}")
                  
                  rotation_functions = {
                      'database': self.rotate_database_password,
                      'jwt': self.rotate_jwt_secret,
                      'redis': self.rotate_redis_password,
                      'encryption': self.rotate_encryption_keys,
                      'api': self.rotate_api_keys
                  }
                  
                  # Run rotations
                  for secret_type in secret_types:
                      if secret_type in rotation_functions:
                          try:
                              self.log(f"Rotating {secret_type} secrets...")
                              rotation_functions[secret_type]()
                          except Exception as e:
                              self.log(f"Unexpected error rotating {secret_type}: {e}", 'ERROR')
                              self.results['failed'].append(secret_type)
                      else:
                          self.log(f"Unknown secret type: {secret_type}", 'WARNING')
                          self.results['skipped'].append(secret_type)
                  
                  # Trigger application restart if any secrets were rotated
                  if self.results['rotated'] and not self.dry_run:
                      self.trigger_application_restart()
                  
                  # Generate report
                  report = self.generate_rotation_report()
                  
                  self.log("Secrets rotation completed")
                  self.log(f"Rotated: {len(self.results['rotated'])}")
                  self.log(f"Failed: {len(self.results['failed'])}")
                  self.log(f"Skipped: {len(self.results['skipped'])}")
                  
                  return report
          
          
          def main():
              import argparse
              
              parser = argparse.ArgumentParser(description='Rotate Scorpius secrets')
              parser.add_argument('--environment', required=True, help='Environment (staging/production)')
              parser.add_argument('--region', default='us-east-1', help='AWS region')
              parser.add_argument('--secret-types', default='all', help='Comma-separated list of secret types to rotate')
              parser.add_argument('--dry-run', action='store_true', help='Perform dry run without making changes')
              
              args = parser.parse_args()
              
              # Parse secret types
              if args.secret_types.lower() == 'all':
                  secret_types = ['database', 'jwt', 'redis', 'encryption', 'api']
              else:
                  secret_types = [s.strip() for s in args.secret_types.split(',')]
              
              # Run rotation
              rotator = SecretsRotator(args.environment, args.region, args.dry_run)
              report = rotator.run_rotation(secret_types)
              
              # Save report
              report_file = f"rotation-report-{args.environment}-{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
              with open(report_file, 'w') as f:
                  json.dump(report, f, indent=2)
              
              print(f"\nRotation report saved to: {report_file}")
              
              # Exit with error code if any rotations failed
              if report['summary']['total_failed'] > 0:
                  print(f"ERROR: {report['summary']['total_failed']} secret rotations failed")
                  sys.exit(1)
              else:
                  print("All secret rotations completed successfully")
                  sys.exit(0)
          
          
          if __name__ == '__main__':
              main()
          EOF

      - name: Run secrets rotation
        run: |
          python rotate_secrets.py \
            --environment "${{ github.event.inputs.environment || 'staging' }}" \
            --region "${{ env.AWS_REGION }}" \
            --secret-types "${{ github.event.inputs.secret_types || 'all' }}" \
            ${{ github.event.inputs.dry_run == 'true' && '--dry-run' || '' }}

      - name: Upload rotation report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secrets-rotation-report-${{ github.event.inputs.environment || 'staging' }}
          path: rotation-report-*.json
          retention-days: 90

      - name: Create GitHub issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Find the rotation report file
            const files = fs.readdirSync('.');
            const reportFile = files.find(f => f.startsWith('rotation-report-'));
            
            let reportContent = 'No rotation report available';
            if (reportFile) {
              const report = JSON.parse(fs.readFileSync(reportFile, 'utf8'));
              reportContent = `
            ## Rotation Summary
            - **Environment**: ${report.environment}
            - **Total Rotated**: ${report.summary.total_rotated}
            - **Total Failed**: ${report.summary.total_failed}
            - **Success Rate**: ${report.summary.success_rate.toFixed(1)}%
            
            ## Failed Rotations
            ${report.details.failed.map(f => `- ${f}`).join('\n')}
            
            ## Next Steps
            1. Investigate failed rotations
            2. Fix underlying issues
            3. Re-run rotation manually if needed
            4. Update monitoring alerts if necessary
            `;
            }
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Secrets Rotation Failed - ${{ github.event.inputs.environment || 'staging' }}`,
              body: `
            # Secrets Rotation Failure Alert
            
            The scheduled secrets rotation for **${{ github.event.inputs.environment || 'staging' }}** environment has failed.
            
            **Workflow Run**: ${context.payload.repository.html_url}/actions/runs/${context.runId}
            **Triggered**: ${new Date().toISOString()}
            
            ${reportContent}
            
            ## Immediate Actions Required
            1. Review the workflow logs
            2. Check AWS Parameter Store access
            3. Verify database connectivity
            4. Re-run rotation after fixing issues
            
            **This is a SOC-2 compliance requirement. Please address immediately.**
            `,
              labels: ['security', 'urgent', 'compliance']
            });

      - name: Send Slack notification
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [ -n "$SLACK_WEBHOOK" ]; then
            # Find the rotation report file
            REPORT_FILE=$(ls rotation-report-*.json 2>/dev/null | head -1)
            
            if [ -f "$REPORT_FILE" ]; then
              ROTATED=$(jq -r '.summary.total_rotated' "$REPORT_FILE")
              FAILED=$(jq -r '.summary.total_failed' "$REPORT_FILE")
              SUCCESS_RATE=$(jq -r '.summary.success_rate' "$REPORT_FILE")
              DRY_RUN=$(jq -r '.dry_run' "$REPORT_FILE")
              
              if [ "$FAILED" -eq 0 ]; then
                COLOR="good"
                STATUS="✅ Success"
              else
                COLOR="danger"
                STATUS="❌ Failed"
              fi
              
              DRY_RUN_TEXT=""
              if [ "$DRY_RUN" = "true" ]; then
                DRY_RUN_TEXT=" (Dry Run)"
              fi
              
              curl -X POST -H 'Content-type: application/json' \
                --data "{
                  \"text\": \"🔄 Secrets Rotation Completed$DRY_RUN_TEXT\",
                  \"attachments\": [
                    {
                      \"color\": \"$COLOR\",
                      \"fields\": [
                        {
                          \"title\": \"Environment\",
                          \"value\": \"${{ github.event.inputs.environment || 'staging' }}\",
                          \"short\": true
                        },
                        {
                          \"title\": \"Status\",
                          \"value\": \"$STATUS\",
                          \"short\": true
                        },
                        {
                          \"title\": \"Rotated\",
                          \"value\": \"$ROTATED secrets\",
                          \"short\": true
                        },
                        {
                          \"title\": \"Success Rate\",
                          \"value\": \"${SUCCESS_RATE}%\",
                          \"short\": true
                        }
                      ]
                    }
                  ]
                }" "$SLACK_WEBHOOK"
            fi
          fi

      - name: Update Parameter Store with rotation metadata
        if: success()
        run: |
          # Store rotation metadata for compliance tracking
          aws ssm put-parameter \
            --name "/${{ env.PROJECT_NAME }}/${{ github.event.inputs.environment || 'staging' }}/system/last_rotation" \
            --value "$(date -Iseconds)" \
            --type "String" \
            --description "Last secrets rotation timestamp" \
            --overwrite
          
          aws ssm put-parameter \
            --name "/${{ env.PROJECT_NAME }}/${{ github.event.inputs.environment || 'staging' }}/system/next_rotation" \
            --value "$(date -d '+90 days' -Iseconds)" \
            --type "String" \
            --description "Next scheduled secrets rotation" \
            --overwrite

  # Job to update documentation
  update-documentation:
    name: Update Rotation Documentation
    runs-on: ubuntu-latest
    needs: rotate-secrets
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update rotation log
        run: |
          mkdir -p docs/security
          
          # Create or update rotation log
          ROTATION_LOG="docs/security/rotation-log.md"
          
          if [ ! -f "$ROTATION_LOG" ]; then
            cat > "$ROTATION_LOG" << 'EOF'
          # Secrets Rotation Log
          
          This document tracks all secrets rotation activities for SOC-2 compliance.
          
          ## Rotation Schedule
          - **Frequency**: Every 90 days
          - **Automated**: Yes (GitHub Actions)
          - **Manual Override**: Available via workflow dispatch
          
          ## Rotation History
          
          EOF
          fi
          
          # Add new rotation entry
          cat >> "$ROTATION_LOG" << EOF
          ### $(date '+%Y-%m-%d %H:%M:%S UTC')
          - **Environment**: ${{ github.event.inputs.environment || 'staging' }}
          - **Trigger**: ${{ github.event_name == 'schedule' && 'Scheduled' || 'Manual' }}
          - **Status**: ✅ Completed
          - **Workflow**: [Run #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          EOF

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/security/rotation-log.md
          git commit -m "docs: update secrets rotation log [skip ci]" || exit 0
          git push
