version: '3.8'

name: scorpius-enterprise-production

services:
  # =====================================
  # Infrastructure Services
  # =====================================
  redis:
    image: redis:7-alpine
    container_name: scorpius-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-scorpius_prod_2024}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - scorpius-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-scorpius_prod_2024}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  postgres:
    image: postgres:15-alpine
    container_name: scorpius-postgres-prod
    environment:
      POSTGRES_DB: ${DB_NAME:-scorpius_production}
      POSTGRES_USER: ${DB_USER:-scorpius}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-scorpius_prod_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/sql:/docker-entrypoint-initdb.d:ro
      - ./logs/postgres:/var/log/postgresql
    networks:
      - scorpius-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-scorpius} -d ${DB_NAME:-scorpius_production}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # =====================================
  # API Gateway (Main Entry Point)
  # =====================================
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: scorpius-gateway-prod
    command: ["python", "-m", "services.api-gateway.main"]
    ports:
      - "${API_GATEWAY_PORT:-8000}:8000"
      - "${API_GATEWAY_DEBUG_PORT:-8001}:8001"
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://:${REDIS_PASSWORD:-scorpius_prod_2024}@redis:6379
      - DATABASE_URL=postgresql://${DB_USER:-scorpius}:${DB_PASSWORD:-scorpius_prod_2024}@postgres:5432/${DB_NAME:-scorpius_production}
      - JWT_SECRET=${JWT_SECRET:-prod-jwt-secret-change-me}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,https://yourdomain.com}
      - SCANNER_SLITHER_URL=http://scanner-slither:8000
      - SCANNER_MYTHRIL_URL=http://scanner-mythril:8000
      - SCANNER_MYTHX_URL=http://scanner-mythx:8000
      - SCANNER_MANTICORE_URL=http://scanner-manticore:8000
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
      - ./uploads:/app/uploads:rw
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================
  # Frontend Service
  # =====================================
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: scorpius-frontend-prod
    command: ["python", "-m", "http.server", "3000", "--directory", "/app/frontend/dist"]
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://api-gateway:8000
      - REACT_APP_WS_URL=ws://websocket:8080
    volumes:
      - ./logs:/app/logs:rw
    depends_on:
      - api-gateway
    networks:
      - scorpius-network
    restart: unless-stopped

  # =====================================
  # Backend Services
  # =====================================
  scanner-service:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: scorpius-scanner-prod
    command: ["python", "-m", "backend.scanner.main"]
    ports:
      - "${SCANNER_PORT:-8010}:8000"
    environment:
      - SERVICE_NAME=scanner
      - REDIS_URL=redis://:${REDIS_PASSWORD:-scorpius_prod_2024}@redis:6379
      - DATABASE_URL=postgresql://${DB_USER:-scorpius}:${DB_PASSWORD:-scorpius_prod_2024}@postgres:5432/${DB_NAME:-scorpius_production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped

  honeypot-service:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: scorpius-honeypot-prod
    command: ["python", "-m", "backend.honeypot.main"]
    ports:
      - "${HONEYPOT_PORT:-8020}:8000"
    environment:
      - SERVICE_NAME=honeypot
      - REDIS_URL=redis://:${REDIS_PASSWORD:-scorpius_prod_2024}@redis:6379
      - DATABASE_URL=postgresql://${DB_USER:-scorpius}:${DB_PASSWORD:-scorpius_prod_2024}@postgres:5432/${DB_NAME:-scorpius_production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped

  mempool-service:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: scorpius-mempool-prod
    command: ["python", "-m", "backend.mempool.main"]
    ports:
      - "${MEMPOOL_PORT:-8030}:8000"
    environment:
      - SERVICE_NAME=mempool
      - REDIS_URL=redis://:${REDIS_PASSWORD:-scorpius_prod_2024}@redis:6379
      - DATABASE_URL=postgresql://${DB_USER:-scorpius}:${DB_PASSWORD:-scorpius_prod_2024}@postgres:5432/${DB_NAME:-scorpius_production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped

  bridge-service:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: scorpius-bridge-prod
    command: ["python", "-m", "backend.bridge.main"]
    ports:
      - "${BRIDGE_PORT:-8040}:8000"
    environment:
      - SERVICE_NAME=bridge
      - REDIS_URL=redis://:${REDIS_PASSWORD:-scorpius_prod_2024}@redis:6379
      - DATABASE_URL=postgresql://${DB_USER:-scorpius}:${DB_PASSWORD:-scorpius_prod_2024}@postgres:5432/${DB_NAME:-scorpius_production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped

  quantum-service:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: scorpius-quantum-prod
    command: ["python", "-m", "backend.quantum.main"]
    ports:
      - "${QUANTUM_PORT:-8050}:8000"
    environment:
      - SERVICE_NAME=quantum
      - REDIS_URL=redis://:${REDIS_PASSWORD:-scorpius_prod_2024}@redis:6379
      - DATABASE_URL=postgresql://${DB_USER:-scorpius}:${DB_PASSWORD:-scorpius_prod_2024}@postgres:5432/${DB_NAME:-scorpius_production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped

  simulation-service:
    build:
      context: services/simulation
      dockerfile: Dockerfile
    container_name: scorpius-simulation-prod
    ports:
      - "${SIMULATION_PORT:-8070}:8070"
    environment:
      - SERVICE_NAME=simulation
      - REDIS_URL=redis://:${REDIS_PASSWORD:-scorpius_prod_2024}@redis:6379
      - DATABASE_URL=postgresql://${DB_USER:-scorpius}:${DB_PASSWORD:-scorpius_prod_2024}@postgres:5432/${DB_NAME:-scorpius_production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - NODE_SERVICE_URL=http://simulation-node:3002
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped

  # Node.js Simulation Backend
  simulation-node:
    build:
      context: backend/simulation sandbox
      dockerfile: Dockerfile
    container_name: scorpius-simulation-node-prod
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://:${REDIS_PASSWORD:-scorpius_prod_2024}@redis:6379
      - DATABASE_URL=postgresql://${DB_USER:-scorpius}:${DB_PASSWORD:-scorpius_prod_2024}@postgres:5432/${DB_NAME:-scorpius_production}
    volumes:
      - ./logs:/app/logs:rw
      - ./backend/simulation sandbox/logs:/app/logs:rw
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped

  # =====================================
  # WebSocket Service
  # =====================================
  websocket:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: scorpius-websocket-prod
    command: ["python", "-m", "services.websocket.main"]
    ports:
      - "${WEBSOCKET_PORT:-8080}:8080"
    environment:
      - SERVICE_NAME=websocket
      - REDIS_URL=redis://:${REDIS_PASSWORD:-scorpius_prod_2024}@redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs:rw
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped

  # =====================================
  # Monitoring & Reporting
  # =====================================
  monitoring:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: scorpius-monitoring-prod
    command: ["python", "-m", "monitoring.main"]
    ports:
      - "${MONITORING_PORT:-9090}:9090"
    environment:
      - SERVICE_NAME=monitoring
      - REDIS_URL=redis://:${REDIS_PASSWORD:-scorpius_prod_2024}@redis:6379
      - DATABASE_URL=postgresql://${DB_USER:-scorpius}:${DB_PASSWORD:-scorpius_prod_2024}@postgres:5432/${DB_NAME:-scorpius_production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped

  reporting:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: scorpius-reporting-prod
    command: ["python", "-m", "reporting.main"]
    ports:
      - "${REPORTING_PORT:-8060}:8000"
    environment:
      - SERVICE_NAME=reporting
      - REDIS_URL=redis://:${REDIS_PASSWORD:-scorpius_prod_2024}@redis:6379
      - DATABASE_URL=postgresql://${DB_USER:-scorpius}:${DB_PASSWORD:-scorpius_prod_2024}@postgres:5432/${DB_NAME:-scorpius_production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
      - ./exports:/app/exports:rw
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - scorpius-network
    restart: unless-stopped

  # =====================================
  # Reverse Proxy (Nginx)
  # =====================================
  nginx:
    image: nginx:alpine
    container_name: scorpius-nginx-prod
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx:rw
    depends_on:
      - frontend
      - api-gateway
    networks:
      - scorpius-network
    restart: unless-stopped

# =====================================
# Networks
# =====================================
networks:
  scorpius-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =====================================
# Volumes
# =====================================
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
