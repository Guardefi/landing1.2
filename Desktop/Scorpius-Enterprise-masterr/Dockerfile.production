# Production Multi-Stage Dockerfile for Scorpius Enterprise
# This Dockerfile builds all components: frontend, backend services, and APIs

# =====================================
# Stage 1: Build Frontend (React/Vite)
# =====================================
FROM node:18-alpine AS frontend-build

WORKDIR /app/frontend

# Copy package files
COPY frontend/package*.json ./
COPY frontend/yarn.lock* ./

# Install dependencies with retry mechanism and proper error handling
RUN npm config set registry https://registry.npmjs.org/ && \
    npm config set strict-ssl false && \
    npm ci --legacy-peer-deps --only=production --no-audit --no-fund && \
    npm cache clean --force

# Copy frontend source
COPY frontend/ ./

# Build frontend for production
RUN npm run build:prod

# =====================================
# Stage 2: Build Python Backend Base
# =====================================
FROM python:3.11-slim-bookworm AS python-base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    libpq-dev \
    curl \
    git \
    && apt-get upgrade -y \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create application user
RUN groupadd -r scorpius && useradd -r -g scorpius scorpius

# =====================================
# Stage 3: Main Application
# =====================================
FROM python-base AS production

WORKDIR /app

# Copy requirements and install Python dependencies
COPY config/requirements-production.txt ./config/
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r config/requirements-production.txt && \
    pip check

# Copy backend source code
COPY backend/ ./backend/
COPY services/ ./services/
COPY packages/ ./packages/
COPY monitoring/ ./monitoring/
COPY reporting/ ./reporting/
COPY config/ ./config/
COPY scripts/ ./scripts/

# Copy frontend build from previous stage
COPY --from=frontend-build /app/frontend/dist ./frontend/dist

# Copy configuration files
COPY pytest.ini conftest.py ./
COPY .env.production .env

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/uploads /app/exports && \
    chown -R scorpius:scorpius /app

# Switch to application user
USER scorpius

# Health check script
COPY --chown=scorpius:scorpius scripts/health-check.sh ./
RUN chmod +x ./health-check.sh

# Expose ports
EXPOSE 8000 8001 8080 3000 9090

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD ./health-check.sh

# Default command (will be overridden by docker-compose)
CMD ["python", "-m", "services.api-gateway.main"]
