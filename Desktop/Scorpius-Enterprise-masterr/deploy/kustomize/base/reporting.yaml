apiVersion: apps/v1
kind: Deployment
metadata:
  name: reporting
  labels:
    app.kubernetes.io/component: application
    app.kubernetes.io/name: reporting
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: reporting
  template:
    metadata:
      labels:
        app.kubernetes.io/name: reporting
        app.kubernetes.io/component: application
        app.kubernetes.io/version: "1.0.0"
    spec:
      serviceAccountName: scorpius-service-account
      containers:
      - name: reporting
        image: scorpius/reporting:1.0.0
        ports:
        - name: http
          containerPort: 8007
          protocol: TCP
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: scorpius-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: scorpius-secrets
              key: redis-url
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: scorpius-secrets
              key: secret-key
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: scorpius-config
              key: aws-region
        - name: QLDB_LEDGER_NAME
          valueFrom:
            configMapKeyRef:
              name: scorpius-config
              key: qldb-ledger-name
        - name: LOG_LEVEL
          value: "INFO"
        - name: PROMETHEUS_ENABLED
          value: "true"
        - name: CORS_ORIGINS
          value: "*"
        volumeMounts:
        - name: reports-storage
          mountPath: /app/reports
        - name: audit-logs
          mountPath: /app/audit_logs
        - name: cert-storage
          mountPath: /app/certs
          readOnly: true
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: reports-storage
        persistentVolumeClaim:
          claimName: reporting-reports-pvc
      - name: audit-logs
        persistentVolumeClaim:
          claimName: reporting-audit-pvc
      - name: cert-storage
        secret:
          secretName: reporting-certs
          defaultMode: 0600
---
apiVersion: v1
kind: Service
metadata:
  name: reporting
  labels:
    app.kubernetes.io/name: reporting
    app.kubernetes.io/component: application
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8007
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: reporting
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: reporting-reports-pvc
  labels:
    app.kubernetes.io/name: reporting
    app.kubernetes.io/component: storage
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp2
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: reporting-audit-pvc
  labels:
    app.kubernetes.io/name: reporting
    app.kubernetes.io/component: storage
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: gp2
---
apiVersion: v1
kind: Secret
metadata:
  name: reporting-certs
  labels:
    app.kubernetes.io/name: reporting
    app.kubernetes.io/component: security
type: Opaque
data:
  # Base64 encoded certificate and key files
  # In production, populate these with actual certificate data
  signing.crt: ""
  signing.key: ""
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: reporting-network-policy
  labels:
    app.kubernetes.io/name: reporting
    app.kubernetes.io/component: security
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: reporting
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: auth-proxy
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: frontend
    ports:
    - protocol: TCP
      port: 8007
  egress:
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: postgresql
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: audit-trail
    ports:
    - protocol: TCP
      port: 8003
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS for AWS services
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: reporting
  labels:
    app.kubernetes.io/name: reporting
    app.kubernetes.io/component: monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: reporting
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
