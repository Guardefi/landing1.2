# Multi-stage build for secure development container
FROM mcr.microsoft.com/devcontainers/base:ubuntu-22.04

# Avoid prompts from apt
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    vim \
    wget \
    unzip \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    gnupg \
    lsb-release \
    jq \
    tree \
    htop \
    net-tools \
    telnet \
    iputils-ping \
    dnsutils \
    postgresql-client \
    redis-tools \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
ARG USERNAME=scorpius
ARG USER_UID=1000
ARG USER_GID=$USER_UID

RUN groupadd --gid $USER_GID $USERNAME \
    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \
    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME

# Install Python tools
RUN python3 -m pip install --upgrade pip \
    && pip3 install --user \
        black \
        flake8 \
        mypy \
        isort \
        pytest \
        pytest-cov \
        pytest-asyncio \
        jupyter \
        jupyterlab \
        notebook

# Install Node.js tools
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - \
    && apt-get install -y nodejs \
    && npm install -g \
        @nestjs/cli \
        typescript \
        ts-node \
        eslint \
        prettier \
        @typescript-eslint/parser \
        @typescript-eslint/eslint-plugin

# Install development tools
RUN curl -fsSL https://get.docker.com | sh \
    && usermod -aG docker $USERNAME

# Install kubectl
RUN curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" \
    && install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

# Install Helm
RUN curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list \
    && apt-get update \
    && apt-get install -y helm

# Install Terraform
RUN wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg \
    && echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list \
    && apt-get update \
    && apt-get install -y terraform

# Install AWS CLI
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" \
    && unzip awscliv2.zip \
    && sudo ./aws/install \
    && rm -rf aws awscliv2.zip

# Install additional development tools
RUN pip3 install \
    pre-commit \
    commitizen \
    mkdocs \
    mkdocs-material \
    mkdocs-mermaid2-plugin

# Set up Oh My Zsh for the user
USER $USERNAME
RUN sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended \
    && echo 'alias ll="ls -la"' >> ~/.zshrc \
    && echo 'alias k="kubectl"' >> ~/.zshrc \
    && echo 'alias tf="terraform"' >> ~/.zshrc \
    && echo 'alias dc="docker-compose"' >> ~/.zshrc \
    && echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.zshrc

# Switch back to root for final setup
USER root

# Install project-specific Python dependencies
COPY requirements-dev.txt /tmp/
RUN pip3 install -r /tmp/requirements-dev.txt || echo "requirements-dev.txt not found, skipping"

# Set up workspace
WORKDIR /workspace
RUN chown -R $USERNAME:$USERNAME /workspace

# Create directories for scripts
RUN mkdir -p /usr/local/share/devcontainer-scripts
COPY .devcontainer/scripts/ /usr/local/share/devcontainer-scripts/
RUN chmod +x /usr/local/share/devcontainer-scripts/*.sh

# Security hardening
RUN echo "scorpius ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers \
    && chmod 0440 /etc/sudoers.d/$USERNAME

# Final user switch
USER $USERNAME

# Set default command
CMD ["/bin/zsh"]
