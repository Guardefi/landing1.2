name: SCORPIUS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # Code quality and linting
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy pytest bandit safety
        pip install -r requirements.txt
    
    - name: Run Black (code formatting)
      run: black --check --diff .
    
    - name: Run Flake8 (linting)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Run MyPy (type checking)
      run: mypy --ignore-missing-imports core/ models/ preprocessors/ utils/ api/
    
    - name: Run Bandit (security)
      run: bandit -r . -f json -o bandit-report.json || true
    
    - name: Run Safety (dependency security)
      run: safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit tests
  test:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Limit matrix to reduce CI costs
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist pytest-asyncio
        pip install -r requirements.txt
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html -n auto
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-${{ matrix.python-version }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml

  # Integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
    
    - name: Create test data
      run: |
        mkdir -p data/test
        cat > data/test/test_contracts.json << EOF
        {
          "contract1": "608060405234801561001057600080fd5b50",
          "contract2": "608060405234801561001057600080fd5b51",
          "contract3": "60016002600381048190556004600560066007"
        }
        EOF
    
    - name: Run CLI tests
      run: |
        python scorpius_cli.py --help
        python scorpius_cli.py compare "60016002" "60016002" --output json
        python scorpius_cli.py analyze data/test/test_contracts.json --format json
    
    - name: Run API tests
      run: |
        # Start API server in background
        python scorpius_cli.py serve --host 0.0.0.0 --port 8000 &
        sleep 10
        
        # Test API endpoints
        curl -f http://localhost:8000/health
        curl -f -X POST http://localhost:8000/compare \
          -H "Content-Type: application/json" \
          -d '{"bytecode1": "60016002", "bytecode2": "60016002"}'

  # Performance benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [integration]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run benchmarks
      run: |
        python scorpius_cli.py benchmark --num-samples 100 --output-dir benchmark_results
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark_results/

  # Docker build and test
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and test Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: application
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name scorpius-test \
          -p 8000:8000 \
          ghcr.io/${{ github.repository }}:${{ github.sha }}
        
        # Wait for container to be ready
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:8000/health
        
        # Stop container
        docker stop scorpius-test
    
    - name: Push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        target: application
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name != 'pull_request'
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ghcr.io/${{ github.repository }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Release deployment
  deploy:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [benchmark, docker, security]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "🚀 Deploying SCORPIUS v${{ github.event.release.tag_name }} to production"
        # Add your deployment scripts here
        # Examples:
        # - Deploy to Kubernetes
        # - Update AWS ECS service
        # - Deploy to Azure Container Instances
        # - Update Docker Swarm service
    
    - name: Create deployment status
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment.id,
            state: 'success',
            description: 'SCORPIUS deployed successfully',
            environment_url: 'https://your-production-url.com'
          });

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test, integration, benchmark, docker]
    if: always()
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "✅ All checks passed! SCORPIUS pipeline completed successfully."
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Pipeline failed! Please check the logs."
        # Add notification logic here (Slack, Discord, email, etc.)
