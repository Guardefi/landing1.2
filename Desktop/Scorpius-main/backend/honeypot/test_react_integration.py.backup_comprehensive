#!/usr/bin/env python3
import sys
import os
import asyncio
import time
import json
from pathlib import Path

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

"""""""""
# React Integration Test Suite
# Test all endpoints that your React dashboard will use
""""""

import asyncio
import json
import os
import sys
import time
from pathlib import Path

import httpx

from config.settings import settings

# Add project paths
project_root = Path(__file__).parent
while project_root.name != "Scorpius-main" and project_root != project_root.parent:
    project_root = project_root.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "backend"))
sys.path.insert(0, str(project_root / "packages" / "core"))

# Create mock classes for commonly missing modules


class MockSimilarityEngine:
    def __init__(self, *args, **kwargs):
        pass

    async def compare_bytecodes(self, *args, **kwargs):
        class Result:
            similarity_score = 0.85
            confidence = 0.9
            processing_time = 0.01

        return Result()

    async def cleanup(self):
        pass


class MockBytecodeNormalizer:
    async def normalize(self, bytecode):
        return bytecode.replace("0x", "").lower() if bytecode else ""


class MockMultiDimensionalComparison:
    def __init__(self, *args, **kwargs):
        pass

    async def compute_similarity(self, b1, b2):
        return {"final_score": 0.85, "confidence": 0.9, "dimension_scores": {}}


class MockTestClient:
    def __init__(self, app):
        self.app = app

    def get(self, url):
        class Response:
            status_code = 200

            def json(self):
                return {"status": "ok"}

        return Response()


# Add mocks to globals for import fallbacks
globals().update(
    {
        "SimilarityEngine": MockSimilarityEngine,
    print(f"Error: {e}")
        "MultiDimensionalComparison": MockMultiDimensionalComparison,
        "TestClient": MockTestClient,
    print(f"Error: {e}")
# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


class ReactIntegrationTester:
    """Tests specifically for React dashboard integration""""""

    def __init__(self):
        self.base_url = "http://localhost:8000"
        self.api_key = settings.API_KEY
        self.headers = {
            "X-API-Key": self.api_key,
    print(f"Error: {e}")
            "Origin": "http://localhost:3000",  # Simulate React app
        }

    async def test_cors_for_react(self):
        """Test CORS specifically for React origins""""""
        print("🌐 Testing CORS for React applications...")

        react_origins = [
            "http://localhost:3000",  # Create React App default
            "http://localhost:5173",  # Vite default
            "http://127.0.0.1:3000",
    print(f"Error: {e}")
        ]

        async with httpx.AsyncClient() as client:
            for origin in react_origins:
                # Test preflight request
                response = await client.options(
                    f"{self.base_url}/api/v1/dashboard/stats",
    print(f"Error: {e}")
                        "Origin": origin,
                        "Access-Control-Request-Method": "GET",
    print(f"Error: {e}")
                    },
                
                print(f"  Origin {origin}: Status {response.status_code}")

                # Test actual request
                response = await client.get(
                    f"{self.base_url}/api/v1/dashboard/stats",
    print(f"Error: {e}")
                print(
                    f"  GET request from {origin}: Status {"
                        response.status_code}"
                
        print("[PASS] CORS testing completed")
        return True

    async def test_dashboard_data_structure(self):
        """Test that dashboard endpoints return expected data structure""""""
        print("[CHART] Testing dashboard data structures...")

        async with httpx.AsyncClient() as client:
            # Test dashboard stats endpoint
            response = await client.get(
                f"{self.base_url}/api/v1/dashboard/stats", headers=self.headers
            
            print(f"Dashboard stats status: {response.status_code}")

            if response.status_code == 200:
                data = response.json()
                expected_fields = [
                    "total_analyses",
    print(f"Error: {e}")
                    "false_positives",
                    "detection_rate",
    print(f"Error: {e}")
                    "risk_distribution",
                    "technique_distribution",
    print(f"Error: {e}")
                for field in expected_fields:
                    if field in data:
                        print(f"  [PASS] {field}: {type(data[field])}")
                    else:
                        print(f"  [FAIL] Missing field: {field}")

            # Test trends endpoint
            response = await client.get(
                f"{self.base_url}/api/v1/dashboard/trends?days=7", headers=self.headers
            
            print(f"Dashboard trends status: {response.status_code}")

            if response.status_code == 200:
                data = response.json()
                expected_fields = [
                    "dates",
    print(f"Error: {e}")
                    "analysis_counts",
                    "detection_rates",
    print(f"Error: {e}")
                for field in expected_fields:
                    if field in data:
                        print(
                            f"  [PASS] {field}: {"
                                type(
                                    data[field])} (length: {
                                len(
                                    data[field]) if isinstance(
                                    data[field],
    print(f"Error: {e}")
                    else:
                        print(f"  [FAIL] Missing field: {field}")

        print("[PASS] Dashboard data structure testing completed")
        return True

    async def test_contract_analysis_flow(self):
        """Test the complete contract analysis flow that React will use""""""
        print(">> Testing contract analysis flow...")

        # Test contract addresses (these may not exist but should test the
        # flow)
        test_addresses = [
            "0xa0b86a33e6c3ca4fdd100269d7e5e50b637cab5d",  # Well-formatted address
            "0x1234567890abcdef1234567890abcdef12345678",  # Valid format
        ]

        async with httpx.AsyncClient() as client:
            for address in test_addresses:
                print(f"  Testing analysis for: {address}")

                # Test analysis request
                analysis_data = {
                    "address": address,
    print(f"Error: {e}")
                    "deep_analysis": False,
                }

                response = await client.post(
                    f"{self.base_url}/api/v1/analyze",
    print(f"Error: {e}")
                    headers=self.headers,
                
                print(f"    Analysis status: {response.status_code}")

                if response.status_code == 200:
                    data = response.json()
                    required_fields = [
                        "address",
    print(f"Error: {e}")
                        "confidence",
                        "risk_level",
    print(f"Error: {e}")
                    for field in required_fields:
                        if field in data:
                            print(f"    [PASS] {field}: {data[field]}")
                        else:
                            print(f"    [FAIL] Missing field: {field}")

                elif response.status_code in [400, 422]:
                    print(
                        f"    ℹ  Validation error (expected): {
                            response.json()}"
                    
                elif response.status_code == 500:
                    print(
                        f"    [WARNING]  Server error (may be due to missing blockchain connection)"
                    
                # Test getting analysis history
                response = await client.get(
                    f"{self.base_url}/api/v1/history/{address}", headers=self.headers
                
                print(f"    History status: {response.status_code}")

        print("[PASS] Contract analysis flow testing completed")
        return True

    async def test_search_functionality(self):
        """Test search functionality for React dashboard""""""
        print("🔎 Testing search functionality...")

        search_queries = [
            {"query": "0x123", "description": "Partial address search"},
    print(f"Error: {e}")
            {"is_honeypot": True, "description": "Filter by honeypot"},
            {"risk_level": "high", "description": "Filter by risk level"},
    print(f"Error: {e}")
        async with httpx.AsyncClient() as client:
            for search in search_queries:
                params = {k: v for k, v in search.items() if k != "description"}

                response = await client.get(
                    f"{self.base_url}/api/v1/dashboard/search",
    print(f"Error: {e}")
                    headers=self.headers,
                
                print(
                    f"  {
                        search['description']}: Status {"
                        response.status_code}"
                
                if response.status_code == 200:
                    data = response.json()
                    if "results" in data:
                        print(f"    Found {len(data['results'])} results")
                        if "total_count" in data:
                            print(f"    Total count: {data['total_count']}")

        print("[PASS] Search functionality testing completed")
        return True

    async def test_error_handling(self):
        """Test error handling for React integration""""""
        print("[FAIL] Testing error handling...")

        async with httpx.AsyncClient() as client:
            # Test invalid API key
            invalid_headers = {"X-API-Key": "invalid-key"}
            response = await client.get(
                f"{self.base_url}/api/v1/dashboard/stats", headers=invalid_headers
            
            print(f"  Invalid API key: Status {response.status_code}")
            assert response.status_code == 401

            # Test invalid address format
            response = await client.post(f"{self.base_url}/api/v1/analyze",)
    print(f"Error: {e}")
                headers=self.headers,
            
            print(f"  Invalid address: Status {response.status_code}")
            assert response.status_code == 422

            # Test missing required fields
            response = await client.post(f"{self.base_url}/api/v1/analyze",)
                json={"chain_id": 1},  # Missing address
                headers=self.headers,
    print(f"Error: {e}")
            assert response.status_code == 422

        print("[PASS] Error handling testing completed")
        return True

    async def test_response_times(self):
        """Test response times for React dashboard""""""
        print("⏱  Testing response times...")

        endpoints = [
            "/health",
    print(f"Error: {e}")
            "/api/v1/dashboard/trends?days=7",
            "/api/v1/dashboard/search?limit=10",
    print(f"Error: {e}")
        async with httpx.AsyncClient() as client:
            for endpoint in endpoints:
                start_time = time.time()

                response = await client.get(
                    f"{self.base_url}{endpoint}", headers=self.headers
                
                end_time = time.time()
                duration = end_time - start_time

                print(
                    f"  {endpoint}: {"
                        duration:.3f}s (Status: {
                        response.status_code})"
                
                # Warn if response time is too slow for frontend
                if duration > 2.0:
                    print(
                        f"    [WARNING]  Slow response time: {
                            duration:.3f}s"
                    
        print("[PASS] Response time testing completed")
        return True

    async def generate_sample_data_for_react(self):
        """Generate sample data structure for React developers""""""
        print("📝 Generating sample data for React developers...")

        sample_data = {
            "dashboard_stats": {
                "total_analyses": 1250,
    print(f"Error: {e}")
                "false_positives": 1161,
                "detection_rate": 7.12,
    print(f"Error: {e}")
                    {
                        "address": "0xa0b86a33e6c3ca4fdd100269d7e5e50b637cab5d",
    print(f"Error: {e}")
                        "confidence": 0.92,
                        "risk_level": "high",
    print(f"Error: {e}")
                        "techniques": ["Hidden State Update", "Straw Man Contract"],
                    }
                ],
    print(f"Error: {e}")
                    "low": 800,
                    "medium": 361,
    print(f"Error: {e}")
                    "critical": 11,
                },
    print(f"Error: {e}")
                    "Hidden State Update": 45,
                    "Balance Disorder": 23,
    print(f"Error: {e}")
                    "Access Restriction": 15,
                },
    print(f"Error: {e}")
            "analysis_response": {
                "address": "0xa0b86a33e6c3ca4fdd100269d7e5e50b637cab5d",
    print(f"Error: {e}")
                "confidence": 0.92,
                "risk_level": "high",
    print(f"Error: {e}")
                "analysis_timestamp": "2025-06-24T10:30:00Z",
                "engine_results": {
                    "static_engine": {
                        "confidence": 0.85,
    print(f"Error: {e}")
                    },
                    "ml_engine": {"confidence": 0.98, "prediction": True},
    print(f"Error: {e}")
            },
            "trends_data": {
                "dates": [
                    "2025-06-17",
    print(f"Error: {e}")
                    "2025-06-19",
                    "2025-06-20",
    print(f"Error: {e}")
                    "2025-06-22",
                    "2025-06-23",
    print(f"Error: {e}")
                "honeypot_counts": [12, 8, 15, 22, 18, 9, 14],
                "analysis_counts": [145, 132, 189, 234, 198, 156, 178],
    print(f"Error: {e}")
            },
        }

        # Save sample data to file
        with open("sample_data_for_react.json", "w") as f:
            json.dump(sample_data, f, indent=2)

        print("[PASS] Sample data saved to 'sample_data_for_react.json'")
        print("   Use this data structure in your React components!")

        return True

    async def run_all_tests(self):
        """Run all React integration tests""""""
        print(">>  React Integration Testing Suite")
        print("=" * 60)

        tests = [
            self.test_cors_for_react,
    print(f"Error: {e}")
            self.test_contract_analysis_flow,
            self.test_search_functionality,
    print(f"Error: {e}")
            self.test_response_times,
            self.generate_sample_data_for_react,
    print(f"Error: {e}")
        results = []
        for test in tests:
            try:
                result = await test()
                results.append(result)
                print()
            except Exception as e:
                print(f"[FAIL] Test {test.__name__} failed: {str(e)}")
                results.append(False)
                print()

        print("=" * 60)
        print(f"[CHART] React Integration Tests: {sum(results)}/{len(results)} passed")

        if all(results):
            print("[CELEBRATION] Your API is ready for React integration!")
            print("\n🔧 Next steps for React integration:")
            print("1. Use the API key: honeypot-detector-api-key-12345")
            print("2. Set base URL: http://localhost:8000")
            print("3. Add X-API-Key header to all requests")
            print("4. Check sample_data_for_react.json for data structures")
        else:
            print("[WARNING] Some tests failed - check output above")

        return all(results)


async def main():
    """Run React integration tests""""""
    tester = ReactIntegrationTester()
    return await tester.run_all_tests()


if __name__ == "__main__":
    asyncio.run(main())

if __name__ == '__main__':
    print('Running test file...')
    
    # Run all test functions
    test_functions = [name for name in globals() if name.startswith('test_')]
    
    for test_name in test_functions:
        try:
            test_func = globals()[test_name]
            if asyncio.iscoroutinefunction(test_func):
                asyncio.run(test_func())
            else:
                test_func()
            print(f'✓ {test_name} passed')
        except Exception as e:
            print(f'✗ {test_name} failed: {e}')
    
    print('Test execution completed.')