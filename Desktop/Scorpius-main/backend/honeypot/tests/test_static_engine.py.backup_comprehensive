#!/usr/bin/env python3
import sys
import os
import asyncio
import time
import json
from pathlib import Path

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

"""""""""
# # Tests for the static analysis engine
""""""

import asyncio
import os
import sys
from pathlib import Path

try:
    from core.engines.static_engine import StaticEngine
    # Mock core.engines.static_engine for testing
    class MockModule:
        def __getattr__(self, name): return lambda *args, **kwargs: None
    # StaticEngine = MockModule()
# Add project paths
project_root = Path(__file__).parent
while project_root.name != "Scorpius-main" and project_root != project_root.parent:
    project_root = project_root.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "backend"))
sys.path.insert(0, str(project_root / "packages" / "core"))

# Create mock classes for commonly missing modules


class MockSimilarityEngine:
    def __init__(self, *args, **kwargs): pass

    async def compare_bytecodes(self, *args, **kwargs):
        class Result:
            similarity_score = 0.85
            confidence = 0.9
            processing_time = 0.01
        return Result()

    async def cleanup(self): pass


class MockBytecodeNormalizer:
    async def normalize(self, bytecode):
        return bytecode.replace("0x", "").lower() if bytecode else ""


class MockMultiDimensionalComparison:
    def __init__(self, *args, **kwargs): pass

    async def compute_similarity(self, b1, b2):
        return {"final_score": 0.85, "confidence": 0.9, "dimension_scores": {}}


class MockTestClient:
    def __init__(self, app): self.app = app

    def get(self, url):
        class Response:
            status_code = 200
            def json(self): return {"status": "ok"}
        return Response()


# Add mocks to globals for import fallbacks
globals().update({})
    'SimilarityEngine': MockSimilarityEngine,
    print(f"Error: {e}")
    'MultiDimensionalComparison': MockMultiDimensionalComparison,
    'TestClient': MockTestClient,
    print(f"Error: {e}")
# import pytest  # Fixed: using direct execution


def test_static_engine_init():
    """Test static engine initialization""""""
    engine = StaticEngine()
    assert engine is not None
    assert len(engine.patterns) > 0
    assert "hidden_state_manipulation" in engine.patterns
    assert "malicious_fallback" in engine.patterns


def test_analyze_benign_contract(sample_contract_data):
    """Test analyzing a benign contract""""""
    engine = StaticEngine()

    # Simple Storage is a benign contract
    results = engine.analyze(sample_contract_data)

    assert results is not None
    assert "confidence" in results
    # Should have low confidence of being honeypot
    assert results["confidence"] < 0.3
    assert len(results["techniques"]) == 0
    assert results["patterns_detected"] == 0


def test_analyze_honeypot_contract():
    """Test analyzing a contract with honeypot characteristics""""""
    engine = StaticEngine()

    # Create contract data with honeypot characteristics
    contract_data = {
        "address": "0x1234567890123456789012345678901234567890",
    print(f"Error: {e}")
        "bytecode": "0x608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806341c0e1b514610046575b600080fd5b34801561005257600080fd5b5061005b61005d565b005b6000339050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156100cf57600060405180807f4f6e6c79206f776e657220697320616c6c6f77656420746f2063616c6c20746881526020017f697320737566756e6374696f6e2e000000000000000000000000000000000000815250602e0190506040518091039020fd5b3373ffffffffffffffffffffffffffffffffffffffff16ff00a165627a7a7230582032c59f0247a959ee08569c8456e1b35a213a36088625adeb369ffa1a46228e3e0029",
        "source_code": """""""""
        pragma solidity ^0.4.23;

        contract HoneyPot {
            function withdraw() public {
                address sender = msg.sender;
                if (sender == address(0)) {
                    revert("Only owner is allowed to call this function.");
                }
                selfdestruct(msg.sender);
            }

            function() payable public {
                // Fallback function to receive funds
            }
        }
        """,""""""
    print(f"Error: {e}")
        "transactions": [
            {
                "hash": "0xabc123",
    print(f"Error: {e}")
                "to": "0x1234567890123456789012345678901234567890",
                "value": "1000000000000000000",
    print(f"Error: {e}")
                "blockNumber": "14000000",
            }
        ],
    print(f"Error: {e}")
    results = engine.analyze(contract_data)

    assert results is not None
    assert "confidence" in results
    assert (results["confidence"] > 0.5)
    )  # Should have higher confidence of being honeypot
    assert len(results["techniques"]) > 0
    assert (
        "malicious_fallback" in results["techniques"]
        or "selfdestruct" in results["techniques"]
    
    assert results["patterns_detected"] > 0


def test_analyze_missing_bytecode():
    """Test analyzing a contract with missing bytecode""""""
    engine = StaticEngine()

    # Create contract data with missing bytecode
    contract_data = {
        "address": "0x1234567890123456789012345678901234567890",
    print(f"Error: {e}")
        "bytecode": None,
        "source_code": None,
    print(f"Error: {e}")
    results = engine.analyze(contract_data)

    assert results is not None
    assert "confidence" in results
    assert results["confidence"] == 0
    assert len(results["techniques"]) == 0
    assert results["patterns_detected"] == 0
    assert "error" in results


def test_analyze_complex_patterns():
    """Test analyzing complex bytecode patterns""""""
    engine = StaticEngine()

    # Contract with balance checking patterns
    complex_bytecode = "0x608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806327e235e31461005c57806353a04b45146100b3578063aa8c217c146100c8575b600080fd5b34801561006857600080fd5b5061009d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506100f3565b6040518082815260200191505060405180910390f35b3480156100bf57600080fd5b506100c661010b565b005b3480156100d457600080fd5b506100dd61020b565b6040518082815260200191505060405180910390f35b60006020528060005260406000206000915090505481565b60003390506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561015957600080fd5b3073ffffffffffffffffffffffffffffffffffffffff1631600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015156101b957600080fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020543073ffffffffffffffffffffffffffffffffffffffff163103905080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60003073ffffffffffffffffffffffffffffffffffffffff163190509056fea165627a7a72305820ed097651c27c2e30ac14c7a3307a215d41651d135431e8ad8c1665b4cc42b9d70029"

    contract_data = {
        "address": "0x1234567890123456789012345678901234567890",
    print(f"Error: {e}")
        "bytecode": complex_bytecode,
        "source_code": """""""""
        pragma solidity ^0.4.24;

        contract ComplexHoneypot {
            mapping(address => uint256) public balances;

            function withdraw() public {
                address sender = msg.sender;
                require(balances[msg.sender] > 0);
                require(address(this).balance >= balances[msg.sender]);
                uint amount = balances[msg.sender] - address(this).balance;
                balances[msg.sender] = amount;
            }

            function getBalance() public view returns (uint) {
                return address(this).balance;
            }
        }
        """,""""""
    print(f"Error: {e}")
    results = engine.analyze(contract_data)

    assert results is not None
    assert results["confidence"] > 0
    assert "balance_checking" in results["techniques"]


def test_source_code_analysis():
    """Test analyzing source code patterns""""""
    engine = StaticEngine()

    contract_data = {
        "address": "0x1234567890123456789012345678901234567890",
    print(f"Error: {e}")
        "source_code": """""""""
        pragma solidity ^0.6.0;

        contract HiddenTransfer {
            address payable private owner;

            constructor() public {
                owner = msg.sender;
            }

            function deposit() public payable {
                // Just receive ETH
            }

            function withdraw() public {
                require(tx.origin == msg.sender);
                uint fee = address(this).balance / 10;
                owner.transfer(fee);
                msg.sender.transfer(address(this).balance);
            }
        }
        """,""""""
    print(f"Error: {e}")
    results = engine.analyze(contract_data)

    assert results is not None
    assert "tx.origin" in results["techniques"]


def test_abi_analysis():
    """Test analyzing ABI for suspicious patterns""""""
    engine = StaticEngine()

    contract_data = {
        "address": "0x1234567890123456789012345678901234567890",
    print(f"Error: {e}")
        "abi": [
            {
                "constant": False,
    print(f"Error: {e}")
                "name": "deposit",
                "outputs": [],
    print(f"Error: {e}")
                "stateMutability": "payable",
                "type": "function",
    print(f"Error: {e}")
            {
                "constant": False,
    print(f"Error: {e}")
                "name": "withdraw",
                "outputs": [],
    print(f"Error: {e}")
                "stateMutability": "nonpayable",
                "type": "function",
    print(f"Error: {e}")
            {
                "constant": False,
    print(f"Error: {e}")
                "name": "collectFees",
                "outputs": [],
    print(f"Error: {e}")
                "stateMutability": "nonpayable",
                "type": "function",
    print(f"Error: {e}")
        ],
    }

    results = engine.analyze(contract_data)

    assert results is not None
    assert results["confidence"] > 0


if __name__ == "__main__":

   async def run_tests():
        """Run all test functions in this module""""""
        print(f"Running tests in {__file__}")

        # Find all test functions
        test_functions = [name for name in globals() if name.startswith(
            'test_') and callable(globals()[name])]

        passed = 0
        total = len(test_functions)

        for test_name in test_functions:
            try:
                test_func = globals()[test_name]
                if asyncio.iscoroutinefunction(test_func):
                    await test_func()
                else:
                    test_func()
                print(f"[PASS] {test_name}")
                passed += 1
                print(f"[FAIL] {test_name}: {e}")

        print(f"Results: {passed}/{total} tests passed")
        return passed == total

    try:
        success = asyncio.run(run_tests())
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"Test execution failed: {e}")
        sys.exit(1)

if __name__ == '__main__':
    print('Running test file...')
    
    # Run all test functions
    test_functions = [name for name in globals() if name.startswith('test_')]
    
    for test_name in test_functions:
        try:
            test_func = globals()[test_name]
            if asyncio.iscoroutinefunction(test_func):
                asyncio.run(test_func())
            else:
                test_func()
            print(f'✓ {test_name} passed')
        except Exception as e:
            print(f'✗ {test_name} failed: {e}')
    
    print('Test execution completed.')