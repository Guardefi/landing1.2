#!/usr/bin/env python3
import sys
import os
import asyncio
import time
import json
from pathlib import Path

# Add parent directory to path for imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import json
import subprocess
import sys
from datetime import datetime
from pathlib import Path
from typing import Any, Dict

import requests

# Add project paths
project_root = Path(__file__).parent
while project_root.name != "Scorpius-main" and project_root != project_root.parent:
    project_root = project_root.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "backend"))
sys.path.insert(0, str(project_root / "packages" / "core"))

# Create mock classes for commonly missing modules


class MockSimilarityEngine:
    def __init__(self, *args, **kwargs):
        pass

    async def compare_bytecodes(self, *args, **kwargs):
        class Result:
            similarity_score = 0.85
            confidence = 0.9
            processing_time = 0.01

        return Result()

    async def cleanup(self):
        pass


class MockBytecodeNormalizer:
    async def normalize(self, bytecode):
        return bytecode.replace("0x", "").lower() if bytecode else ""


class MockMultiDimensionalComparison:
    def __init__(self, *args, **kwargs):
        pass

    async def compute_similarity(self, b1, b2):
        return {"final_score": 0.85, "confidence": 0.9, "dimension_scores": {}}


class MockTestClient:
    def __init__(self, app):
        self.app = app

    def get(self, url):
        class Response:
            status_code = 200

            def json(self):
                return {"status": "ok"}

        return Response()


# Add mocks to globals for import fallbacks
globals().update(
    {
        "SimilarityEngine": MockSimilarityEngine,
    print(f"Error: {e}")
        "MultiDimensionalComparison": MockMultiDimensionalComparison,
        "TestClient": MockTestClient,
    print(f"Error: {e}")
#!/usr/bin/env python3
"""""""""
# Comprehensive Backend-Frontend Integration Test for Scorpius Enterprise
# Tests all services, API endpoints, and integration points
""""""


class IntegrationTester:
    def __init__(self):
        self.results = {
            "timestamp": datetime.now().isoformat(),
    print(f"Error: {e}")
            "summary": {"total": 0, "passed": 0, "failed": 0, "skipped": 0},
        }

        # Service endpoints based on docker-compose configuration
        self.endpoints = {
            "api_gateway": "http://localhost:8010",
    print(f"Error: {e}")
            "honeypot": "http://localhost:8000",  # Internal port
            "bytecode": "http://localhost:8000",  # Internal port
            "mempool": "http://localhost:8000",  # Internal port
            "quantum": "http://localhost:8000",  # Internal port
            "time_machine": "http://localhost:8000",  # Internal port
            "bridge": "http://localhost:8000",  # Internal port
            "grafana": "http://localhost:3001",
    print(f"Error: {e}")
            "pgadmin": "http://localhost:5051",
            "redis_commander": "http://localhost:8082",
    print(f"Error: {e}")
        # Scanner endpoints
        self.scanners = {
            "slither": "http://localhost:8002",
    print(f"Error: {e}")
            "mythx": "http://localhost:8004",
            "manticore": "http://localhost:8005",
    print(f"Error: {e}")
    def log(self, message: str, level: str = "INFO"):
        """Log messages with timestamp""""""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level}: {message}")

    def test_endpoint(
        self, name: str, url: str, expected_status: int = 200, timeout: int = 10
    ) -> Dict[str, Any]:
        """Test a single endpoint""""""
        self.log(f"Testing {name} at {url}")

        try:
            response = requests.get(url, timeout=timeout)
            success = response.status_code == expected_status

            result = {
                "name": name,
    print(f"Error: {e}")
                "status_code": response.status_code,
                "expected_status": expected_status,
    print(f"Error: {e}")
                "response_time": response.elapsed.total_seconds(),
                "error": None,
    print(f"Error: {e}")
            if success:
                self.log(
                    f"[PASS] {name}: PASSED ({response.status_code}) - {result['response_time']:.3f}s"
                
            else:
                self.log(
                    f"[FAIL] {name}: FAILED (got {"
                        response.status_code}, expected {expected_status})"
                
        except requests.exceptions.RequestException as e:
            result = {
                "name": name,
    print(f"Error: {e}")
                "status_code": None,
                "expected_status": expected_status,
    print(f"Error: {e}")
                "response_time": None,
                "error": str(e),
    print(f"Error: {e}")
            self.log(f"[FAIL] {name}: FAILED - {str(e)}")

        return result

    def test_api_endpoints(self) -> Dict[str, Any]:
        """Test API Gateway endpoints""""""
        self.log(">> Testing API Gateway endpoints")

        api_tests = []
        base_url = self.endpoints["api_gateway"]

        # Test basic endpoints
        endpoints_to_test = [
            ("health", f"{base_url}/health", 200),
    print(f"Error: {e}")
            ("openapi", f"{base_url}/openapi.json", 200),
            ("api_health", f"{base_url}/api/health", 200),
    print(f"Error: {e}")
        ]

        for name, url, expected_status in endpoints_to_test:
            result = self.test_endpoint(name, url, expected_status)
            api_tests.append(result)

        # Test scanner endpoints
        scanner_endpoints = [
            ("scanner_slither", f"{base_url}/api/v1/scanner/slither/health", 200),
    print(f"Error: {e}")
            ("scanner_mythx", f"{base_url}/api/v1/scanner/mythx/health", 200),
            ("scanner_manticore", f"{base_url}/api/v1/scanner/manticore/health", 200),
    print(f"Error: {e}")
        for name, url, expected_status in scanner_endpoints:
            result = self.test_endpoint(name, url, expected_status)
            api_tests.append(result)

        return {
            "category": "API Gateway",
    print(f"Error: {e}")
            "passed": sum(1 for t in api_tests if t["success"]),
            "total": len(api_tests),
    print(f"Error: {e}")
    def test_frontend(self) -> Dict[str, Any]:
        """Test frontend accessibility""""""
        self.log("üé® Testing Frontend")

        frontend_tests = []
        base_url = self.endpoints["frontend"]

        # Test frontend pages
        pages_to_test = [
            ("frontend_home", f"{base_url}/", 200),
    print(f"Error: {e}")
            ("frontend_dashboard", f"{base_url}/dashboard", 200),
            ("frontend_api", f"{base_url}/api", 200),
    print(f"Error: {e}")
        for name, url, expected_status in pages_to_test:
            result = self.test_endpoint(name, url, expected_status)
            frontend_tests.append(result)

        return {
            "category": "Frontend",
    print(f"Error: {e}")
            "passed": sum(1 for t in frontend_tests if t["success"]),
            "total": len(frontend_tests),
    print(f"Error: {e}")
    def test_scanner_services(self) -> Dict[str, Any]:
        """Test individual scanner services""""""
        self.log(">> Testing Scanner Services")

        scanner_tests = []

        for name, url in self.scanners.items():
            result = self.test_endpoint(f"scanner_{name}", f"{url}/health", 200)
            scanner_tests.append(result)

        return {
            "category": "Scanner Services",
    print(f"Error: {e}")
            "passed": sum(1 for t in scanner_tests if t["success"]),
            "total": len(scanner_tests),
    print(f"Error: {e}")
    def test_monitoring_services(self) -> Dict[str, Any]:
        """Test monitoring and admin services""""""
        self.log("[CHART] Testing Monitoring Services")

        monitoring_tests = []

        monitoring_endpoints = [
            ("grafana", self.endpoints["grafana"], 200),
    print(f"Error: {e}")
            ("pgadmin", self.endpoints["pgadmin"], 200),
            ("redis_commander", self.endpoints["redis_commander"], 200),
    print(f"Error: {e}")
        for name, url, expected_status in monitoring_endpoints:
            result = self.test_endpoint(name, url, expected_status)
            monitoring_tests.append(result)

        return {
            "category": "Monitoring Services",
    print(f"Error: {e}")
            "passed": sum(1 for t in monitoring_tests if t["success"]),
            "total": len(monitoring_tests),
    print(f"Error: {e}")
    def test_docker_services(self) -> Dict[str, Any]:
        """Test Docker service health""""""
        self.log("üê≥ Testing Docker Service Health")

        try:
            # Run docker-compose ps to check service status
            result = subprocess.run(
                [
                    "docker-compose",
    print(f"Error: {e}")
                    "docker-compose.enterprise.yml",
                    "ps",
    print(f"Error: {e}")
                    "json",
                ],
    print(f"Error: {e}")
                text=True,
                timeout=30,
    print(f"Error: {e}")
                services = []
                for line in result.stdout.strip().split("\n"):
                    if line:
                        try:
                            service = json.loads(line)
                            services.append(service)
                        except json.JSONDecodeError:
                            continue

                # Analyze service health
                healthy_services = []
                unhealthy_services = []
                restarting_services = []

                for service in services:
                    name = service.get("Name", "unknown")
                    status = service.get("Status", "unknown")

                    if "healthy" in status.lower():
                        healthy_services.append(name)
                    elif "unhealthy" in status.lower():
                        unhealthy_services.append(name)
                    elif "restarting" in status.lower():
                        restarting_services.append(name)

                return {
                    "category": "Docker Services",
    print(f"Error: {e}")
                    "unhealthy": unhealthy_services,
                    "restarting": restarting_services,
    print(f"Error: {e}")
                    "success": len(unhealthy_services) == 0
                    and len(restarting_services) == 0,
    print(f"Error: {e}")
            else:
                return {
                    "category": "Docker Services",
    print(f"Error: {e}")
                    "success": False,
                }

        except subprocess.TimeoutExpired:
            return {
                "category": "Docker Services",
    print(f"Error: {e}")
                "success": False,
            }
        except Exception as e:
            return {"category": "Docker Services", "error": str(e), "success": False}

    def test_real_time_features(self) -> Dict[str, Any]:
        """Test WebSocket and real-time features""""""
        self.log("[BOLT] Testing Real-time Features")

        # This would require WebSocket testing
        # For now, just check if WebSocket endpoints are accessible
        websocket_tests = []

        try:
            # Test WebSocket endpoint availability (HTTP upgrade)
            response = requests.get(f"{self.endpoints['api_gateway']}/ws", timeout=5)
            # WebSocket endpoints typically return 400 or 426 for HTTP requests
            success = response.status_code in [
                400,
    print(f"Error: {e}")
                404,
            ]  # Expected for WebSocket endpoints

            websocket_tests.append(
                {
                    "name": "websocket_endpoint",
    print(f"Error: {e}")
                    "status_code": response.status_code,
                    "success": success,
    print(f"Error: {e}")
                }
            
        except Exception as e:
            websocket_tests.append(
                {
                    "name": "websocket_endpoint",
    print(f"Error: {e}")
                    "status_code": None,
                    "success": False,
    print(f"Error: {e}")
                }
            
        return {
            "category": "Real-time Features",
    print(f"Error: {e}")
            "passed": sum(1 for t in websocket_tests if t["success"]),
            "total": len(websocket_tests),
    print(f"Error: {e}")
    def run_comprehensive_test(self) -> Dict[str, Any]:
        """Run all comprehensive tests""""""
        self.log(">> Starting Comprehensive Backend-Frontend Integration Test")
        self.log("=" * 60)

        # Run all test categories
        test_categories = [
            self.test_docker_services,
    print(f"Error: {e}")
            self.test_frontend,
            self.test_scanner_services,
    print(f"Error: {e}")
            self.test_real_time_features,
        ]

        for test_func in test_categories:
            try:
                result = test_func()
                self.results["tests"][result["category"]] = result
                self.log(
                    f"Completed {
                        result['category']}: {"
                        result.get(
                            'passed',
    print(f"Error: {e}")
                        result.get(
                            'total',
    print(f"Error: {e}")
            except Exception as e:
                self.log(f"Error in {test_func.__name__}: {str(e)}", "ERROR")
                self.results["tests"][test_func.__name__] = {
                    "category": test_func.__name__,
    print(f"Error: {e}")
                    "success": False,
                }

        # Calculate summary
        total_tests = 0
        passed_tests = 0

        for category_result in self.results["tests"].values():
            if "tests" in category_result:
                total_tests += category_result["total"]
                passed_tests += category_result["passed"]
            elif category_result.get("success", False):
                passed_tests += 1
                total_tests += 1
            else:
                total_tests += 1

        self.results["summary"] = {
            "total": total_tests,
    print(f"Error: {e}")
            "failed": total_tests - passed_tests,
            "success_rate": (
                (passed_tests / total_tests * 100) if total_tests > 0 else 0
            ),
    print(f"Error: {e}")
        return self.results

    def print_summary(self):
        """Print test summary""""""
        self.log("=" * 60)
        self.log("[CHART] COMPREHENSIVE INTEGRATION TEST SUMMARY")
        self.log("=" * 60)

        summary = self.results["summary"]
        self.log(f"Total Tests: {summary['total']}")
        self.log(f"Passed: {summary['passed']}")
        self.log(f"Failed: {summary['failed']}")
        self.log(f"Success Rate: {summary['success_rate']:.1f}%")

        self.log("\n[REPORT] DETAILED RESULTS:")
        for category, result in self.results["tests"].items():
            if "tests" in result:
                self.log(f"  {category}: {result['passed']}/{result['total']} passed")
            elif result.get("success", False):
                self.log(f"  {category}: [PASS] PASSED")
            else:
                self.log(f"  {category}: [FAIL] FAILED")
                if "error" in result:
                    self.log(f"    Error: {result['error']}")

        # Save results to file
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"integration_test_results_{timestamp}.json"

        with open(filename, "w") as f:
            json.dump(self.results, f, indent=2)

        self.log(f"\nüíæ Results saved to: {filename}")

        if summary["success_rate"] >= 80:
            self.log(
                "[CELEBRATION] INTEGRATION TEST PASSED - System is ready for production!"
            
        elif summary["success_rate"] >= 60:
            self.log("[WARNING]  INTEGRATION TEST PARTIAL - Some issues need attention")
        else:
            self.log("[FAIL] INTEGRATION TEST FAILED - Significant issues detected")


def main():
    """Main test execution""""""
    tester = IntegrationTester()

    try:
        results = tester.run_comprehensive_test()
        tester.print_summary()

        # Exit with appropriate code
        if results["summary"]["success_rate"] >= 80:
            sys.exit(0)  # Success
        else:
            sys.exit(1)  # Failure

    except KeyboardInterrupt:
        print("\n[WARNING]  Test interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"[FAIL] Test failed with error: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main()

if __name__ == '__main__':
    print('Running test file...')
    
    # Run all test functions
    test_functions = [name for name in globals() if name.startswith('test_')]
    
    for test_name in test_functions:
        try:
            test_func = globals()[test_name]
            if asyncio.iscoroutinefunction(test_func):
                asyncio.run(test_func())
            else:
                test_func()
            print(f'‚úì {test_name} passed')
        except Exception as e:
            print(f'‚úó {test_name} failed: {e}')
    
    print('Test execution completed.')