const { ethers } = require("hardhat");

/**
 * @title Balance Checker
 * @notice Shows current balances in the simulation
 */
async function main() {
    console.log(" BALANCE CHECK - SIMULATION ENVIRONMENT");
    console.log("=========================================");
    
    // Get signers (test accounts)
    const [attacker] = await ethers.getSigners();
    
    console.log(` ATTACKER ADDRESS: ${attacker.address}`);
    
    // Check attacker ETH balance
    const attackerBalance = await ethers.provider.getBalance(attacker.address);
    console.log(` Attacker ETH: ${ethers.formatEther(attackerBalance)} ETH`);
    
    // Check vault balances
    const vaultAddress = "0xA69babEF1cA67A37Ffaf7a485DfFF3382056e78C";
    const vaultETH = await ethers.provider.getBalance(vaultAddress);
    console.log(` Vault ETH: ${ethers.formatEther(vaultETH)} ETH`);
    
    // Check USDC balance (if contract exists)
    try {
        const usdcAddress = "0xA0b86a33E6441D66DC9AE500E7B6e89bEfFa45dB";
        const usdcContract = await ethers.getContractAt("IERC20", usdcAddress);
        const usdcBalance = await usdcContract.balanceOf(vaultAddress);
        console.log(` Vault USDC: ${ethers.formatUnits(usdcBalance, 6)} USDC`);
        
        const attackerUSDC = await usdcContract.balanceOf(attacker.address);
        console.log(` Attacker USDC: ${ethers.formatUnits(attackerUSDC, 6)} USDC`);
    } catch (e) {
        console.log(" USDC contract not available on fork");
    }
    
    console.log("\n  IMPORTANT REMINDER:");
    console.log("========================");
    console.log(" This is a LOCAL HARDHAT FORK simulation");
    console.log(" NO REAL ETH or tokens are involved");
    console.log(" All addresses are TEST accounts");
    console.log(" To withdraw: simply use attacker.address in other scripts");
    console.log(" Funds exist only in this local simulation");
    
    console.log("\n SIMULATION SUMMARY:");
    console.log("======================");
    console.log(" Your simulation successfully demonstrated:");
    console.log("    • Vulnerability detection and exploitation");
    console.log("    • Phishing campaign generation");  
    console.log("    • Fund extraction workflows");
    console.log("    • Social engineering automation");
    console.log("\n Educational objectives achieved!");
}

main().catch((error) => {
    console.error(error);
    process.exitCode = 1;
});
