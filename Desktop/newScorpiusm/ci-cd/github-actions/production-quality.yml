name: 🚀 Production Quality Gates
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security-scan:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install bandit safety semgrep

      - name: Run Bandit Security Scan
        run: |
          bandit -r backend/ -f json -o bandit-report.json || true
          bandit -r backend/ -f txt

      - name: Run Safety Check
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Run Semgrep Security Scan
        run: |
          semgrep --config=auto backend/ --json --output=semgrep-report.json || true
          semgrep --config=auto backend/

      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

  # ============================================================================
  # BACKEND QUALITY CHECKS
  # ============================================================================
  backend-quality:
    name: 🐍 Backend Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          pip install -r requirements.prod.txt
          pip install -r requirements-dev.txt

      - name: Code formatting check (Black)
        run: |
          black --check --line-length=100 backend/

      - name: Linting (Ruff)
        run: |
          ruff check backend/ --output-format=github

      - name: Type checking (MyPy)
        run: |
          mypy backend/ --strict --ignore-missing-imports

      - name: Run tests with coverage
        run: |
          pytest tests/ \
            --cov=backend \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-min=25 \
            --junitxml=pytest-report.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results
          path: |
            pytest-report.xml
            coverage.xml

  # ============================================================================
  # FRONTEND QUALITY CHECKS
  # ============================================================================
  frontend-quality:
    name: ⚛️ Frontend Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Type checking (TypeScript)
        run: npm run type-check

      - name: Linting (ESLint)
        run: npm run lint

      - name: Code formatting check (Prettier)
        run: npm run format:check

      - name: Run tests with coverage
        run: |
          npm run test:coverage -- \
            --coverage.threshold.global.lines=25 \
            --coverage.threshold.global.functions=25 \
            --coverage.threshold.global.branches=25 \
            --coverage.threshold.global.statements=25

      - name: Build application
        run: npm run build

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # ============================================================================
  # INTEGRATION TESTS
  # ============================================================================
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: scorpius_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.prod.txt
          pip install -r requirements-dev.txt

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/scorpius_test
        run: |
          # alembic upgrade head  # Uncomment when migrations are ready
          echo "Database migrations would run here"

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/scorpius_test
          REDIS_URL: redis://localhost:6379
        run: |
          pytest tests/integration/ -v --tb=short

  # ============================================================================
  # DOCKER BUILD TEST
  # ============================================================================
  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        run: |
          docker build -f backend/Dockerfile.prod -t scorpius-backend:test .

      - name: Build frontend Docker image
        run: |
          docker build -f frontend/Dockerfile.prod -t scorpius-frontend:test .

      - name: Test Docker Compose
        run: |
          cp .env.production.example .env.production
          docker-compose -f infrastructure/docker/docker-compose.prod.yml config

  # ============================================================================
  # PRODUCTION READINESS CHECK
  # ============================================================================
  production-readiness:
    name: ✅ Production Readiness
    runs-on: ubuntu-latest
    needs:
      [
        security-scan,
        backend-quality,
        frontend-quality,
        integration-tests,
        docker-build,
      ]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run production validation
        run: |
          pip install -r requirements-dev.txt
          python scripts/validate_production.py

      - name: Generate deployment readiness report
        run: |
          echo "## 🚀 Deployment Readiness Report" >> $GITHUB_STEP_SUMMARY
          echo "✅ All quality gates passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Security scans completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Test coverage meets minimum requirements" >> $GITHUB_STEP_SUMMARY
          echo "✅ Docker builds successful" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **READY FOR PRODUCTION DEPLOYMENT**" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # DEPLOYMENT (only on main branch)
  # ============================================================================
  deploy:
    name: 🚢 Deploy to Production
    runs-on: ubuntu-latest
    needs: [production-readiness]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "🚀 Production deployment would happen here"
          echo "This would run: ./scripts/deploy.sh"
          # Uncomment when ready for actual deployment
          # ./scripts/deploy.sh
