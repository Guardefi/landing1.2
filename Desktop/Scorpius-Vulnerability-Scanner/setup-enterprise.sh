#!/bin/bash
# Scorpius Enterprise Setup Script
# Complete setup for enterprise-grade vulnerability scanner with React dashboard

set -e

echo "ðŸ¦‚ Scorpius Vulnerability Scanner Enterprise Setup"
echo "=================================================="

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}$1${NC}"
}

# Check if running as root
if [[ $EUID -eq 0 ]]; then
   print_error "This script should not be run as root"
   exit 1
fi

# Check system requirements
print_header "Checking System Requirements..."

# Check Docker
if ! command -v docker &> /dev/null; then
    print_error "Docker is not installed. Please install Docker first."
    exit 1
fi

# Check Docker Compose
if ! command -v docker-compose &> /dev/null; then
    print_error "Docker Compose is not installed. Please install Docker Compose first."
    exit 1
fi

# Check Python
if ! command -v python3 &> /dev/null; then
    print_error "Python 3 is not installed. Please install Python 3.8+ first."
    exit 1
fi

# Check Node.js (for frontend development)
if ! command -v node &> /dev/null; then
    print_warning "Node.js is not installed. Frontend development will not be available."
fi

print_status "System requirements check completed"

# Create environment file
print_header "Setting up Environment Configuration..."

if [ ! -f ".env" ]; then
    print_status "Creating .env file from development template..."
    cp .env.development .env
    
    # Generate random JWT secret
    JWT_SECRET=$(openssl rand -hex 32)
    sed -i "s/scorpius-dev-secret-change-in-production/$JWT_SECRET/" .env
    
    print_status "Generated secure JWT secret"
else
    print_warning ".env file already exists, skipping creation"
fi

# Create necessary directories
print_header "Creating Directory Structure..."

mkdir -p logs
mkdir -p data/scans
mkdir -p data/simulations
mkdir -p data/reports
mkdir -p docker/volumes/redis
mkdir -p docker/volumes/postgres

print_status "Directory structure created"

# Set up Python virtual environment
print_header "Setting up Python Environment..."

if [ ! -d "venv" ]; then
    print_status "Creating Python virtual environment..."
    python3 -m venv venv
fi

print_status "Activating virtual environment..."
source venv/bin/activate

print_status "Installing Python dependencies..."
pip install --upgrade pip
pip install -r requirements.txt

print_status "Python environment setup completed"

# Build Docker images
print_header "Building Docker Images..."

print_status "Building Scorpius API image..."
docker build -t scorpius-api:latest -f docker/api/Dockerfile .

print_status "Building plugin containers..."
docker build -t scorpius-slither:latest -f docker/plugins/slither/Dockerfile .
docker build -t scorpius-mythril:latest -f docker/plugins/mythril/Dockerfile .

print_status "Docker images built successfully"

# Initialize database (if using PostgreSQL)
if grep -q "postgresql://" .env; then
    print_header "Initializing Database..."
    
    print_status "Starting PostgreSQL container..."
    docker-compose up -d postgres
    
    print_status "Waiting for database to be ready..."
    sleep 10
    
    print_status "Running database migrations..."
    python -m alembic upgrade head
    
    print_status "Database initialization completed"
fi

# Start services
print_header "Starting Services..."

print_status "Starting Redis cache..."
docker-compose up -d redis

print_status "Starting monitoring services..."
docker-compose up -d prometheus grafana

print_status "Starting Scorpius API server..."
# Use the Python startup script
python start_server.py &
API_PID=$!

print_status "Waiting for API server to be ready..."
sleep 5

# Test API endpoints
print_header "Testing API Endpoints..."

print_status "Running API tests..."
python test_api.py --url http://localhost:8080

if [ $? -eq 0 ]; then
    print_status "API tests passed successfully"
else
    print_warning "Some API tests failed, but the server is running"
fi

# Cleanup function
cleanup() {
    print_header "Cleaning up..."
    if [ ! -z "$API_PID" ]; then
        kill $API_PID 2>/dev/null || true
    fi
}

trap cleanup EXIT

# Show final status
print_header "Setup Complete!"
echo ""
print_status "Scorpius Enterprise is now running:"
echo "  â€¢ API Server: http://localhost:8080"
echo "  â€¢ API Documentation: http://localhost:8080/docs"
echo "  â€¢ Grafana Dashboard: http://localhost:3001 (admin/admin)"
echo "  â€¢ Prometheus: http://localhost:9090"
echo ""
print_status "Configuration files:"
echo "  â€¢ Environment: .env"
echo "  â€¢ API Documentation: docs/api-documentation.md"
echo "  â€¢ Frontend Integration: docs/frontend-integration-plan.md"
echo ""
print_status "Management commands:"
echo "  â€¢ Start API: python start_server.py"
echo "  â€¢ Test API: python test_api.py"
echo "  â€¢ Deploy Production: ./deploy-enhanced.sh"
echo ""
print_status "For frontend development, see docs/frontend-integration-plan.md"
echo ""

# Keep the script running to maintain services
print_status "Press Ctrl+C to stop all services..."
wait $API_PID
