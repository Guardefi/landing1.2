"""
Configuration settings for Scorpius API
Environment-based configuration management
"""

from typing import List, Optional
from pydantic import BaseSettings, Field

class Settings(BaseSettings):
    """Application settings with environment variable support"""
    
    # Application
    app_name: str = Field(default="Scorpius Vulnerability Scanner", env="APP_NAME")
    app_version: str = Field(default="2.0.0", env="APP_VERSION")
    environment: str = Field(default="development", env="ENVIRONMENT")
    debug: bool = Field(default=True, env="DEBUG")
    
    # Server
    host: str = Field(default="0.0.0.0", env="HOST")
    port: int = Field(default=8080, env="PORT")
    workers: int = Field(default=1, env="WORKERS")
    
    # Security
    jwt_secret: str = Field(default="scorpius-secret-key-change-in-production", env="JWT_SECRET")
    jwt_algorithm: str = Field(default="HS256", env="JWT_ALGORITHM")
    jwt_expiration_hours: int = Field(default=24, env="JWT_EXPIRATION_HOURS")
    
    # Database
    database_url: Optional[str] = Field(default=None, env="DATABASE_URL")
    redis_url: str = Field(default="redis://localhost:6379", env="REDIS_URL")
    
    # Plugins
    plugin_timeout: int = Field(default=300, env="PLUGIN_TIMEOUT")
    max_concurrent_scans: int = Field(default=10, env="MAX_CONCURRENT_SCANS")
    
    # Docker
    docker_enabled: bool = Field(default=True, env="DOCKER_ENABLED")
    docker_timeout: int = Field(default=600, env="DOCKER_TIMEOUT")
    
    # Sandbox
    sandbox_enabled: bool = Field(default=True, env="SANDBOX_ENABLED")
    sandbox_timeout: int = Field(default=1200, env="SANDBOX_TIMEOUT")
    
    # Logging
    log_level: str = Field(default="INFO", env="LOG_LEVEL")
    log_file: Optional[str] = Field(default=None, env="LOG_FILE")
    
    # External APIs
    etherscan_api_key: Optional[str] = Field(default=None, env="ETHERSCAN_API_KEY")
    infura_api_key: Optional[str] = Field(default=None, env="INFURA_API_KEY")
    
    # AI Integration
    openai_api_key: Optional[str] = Field(default=None, env="OPENAI_API_KEY")
    ai_enabled: bool = Field(default=False, env="AI_ENABLED")
    
    # Monitoring
    metrics_enabled: bool = Field(default=True, env="METRICS_ENABLED")
    health_check_interval: int = Field(default=30, env="HEALTH_CHECK_INTERVAL")
    
    # CORS
    cors_origins: str = Field(
        default="http://localhost:3000,http://localhost:5173,http://localhost:4173",
        env="CORS_ORIGINS"
    )
    
    # WebSocket
    websocket_heartbeat_interval: int = Field(default=30, env="WEBSOCKET_HEARTBEAT_INTERVAL")
    max_websocket_connections: int = Field(default=100, env="MAX_WEBSOCKET_CONNECTIONS")
    
    class Config:
        env_file = ".env"
        case_sensitive = False
    
    @property
    def cors_origins_list(self) -> List[str]:
        """Convert CORS origins string to list"""
        return [origin.strip() for origin in self.cors_origins.split(",")]
    
    @property
    def is_production(self) -> bool:
        """Check if running in production"""
        return self.environment.lower() == "production"
    
    @property
    def is_development(self) -> bool:
        """Check if running in development"""
        return self.environment.lower() == "development"

# Global settings instance
settings = Settings()
