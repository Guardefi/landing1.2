# Scorpius Enterprise Setup Script for Windows
# Complete setup for enterprise-grade vulnerability scanner with React dashboard

param(
    [switch]$SkipTests,
    [string]$Environment = "development"
)

Write-Host "ðŸ¦‚ Scorpius Vulnerability Scanner Enterprise Setup" -ForegroundColor Cyan
Write-Host "==================================================" -ForegroundColor Cyan

# Function to print colored output
function Write-Status {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARN] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

function Write-Header {
    param([string]$Message)
    Write-Host $Message -ForegroundColor Blue
}

# Check system requirements
Write-Header "Checking System Requirements..."

# Check Docker
try {
    docker --version | Out-Null
    Write-Status "Docker is installed"
} catch {
    Write-Error "Docker is not installed. Please install Docker Desktop for Windows first."
    exit 1
}

# Check Docker Compose
try {
    docker-compose --version | Out-Null
    Write-Status "Docker Compose is installed"
} catch {
    Write-Error "Docker Compose is not installed. Please install Docker Compose first."
    exit 1
}

# Check Python
try {
    python --version | Out-Null
    Write-Status "Python is installed"
} catch {
    Write-Error "Python is not installed. Please install Python 3.8+ first."
    exit 1
}

# Check Node.js (for frontend development)
try {
    node --version | Out-Null
    Write-Status "Node.js is installed"
} catch {
    Write-Warning "Node.js is not installed. Frontend development will not be available."
}

Write-Status "System requirements check completed"

# Create environment file
Write-Header "Setting up Environment Configuration..."

if (-not (Test-Path ".env")) {
    Write-Status "Creating .env file from development template..."
    Copy-Item ".env.development" ".env"
    
    # Generate random JWT secret
    $JWT_SECRET = [System.Web.Security.Membership]::GeneratePassword(64, 0)
    (Get-Content ".env") -replace "scorpius-dev-secret-change-in-production", $JWT_SECRET | Set-Content ".env"
    
    Write-Status "Generated secure JWT secret"
} else {
    Write-Warning ".env file already exists, skipping creation"
}

# Create necessary directories
Write-Header "Creating Directory Structure..."

$directories = @(
    "logs",
    "data\scans",
    "data\simulations", 
    "data\reports",
    "docker\volumes\redis",
    "docker\volumes\postgres"
)

foreach ($dir in $directories) {
    if (-not (Test-Path $dir)) {
        New-Item -Path $dir -ItemType Directory -Force | Out-Null
    }
}

Write-Status "Directory structure created"

# Set up Python virtual environment
Write-Header "Setting up Python Environment..."

if (-not (Test-Path "venv")) {
    Write-Status "Creating Python virtual environment..."
    python -m venv venv
}

Write-Status "Activating virtual environment..."
& ".\venv\Scripts\Activate.ps1"

Write-Status "Installing Python dependencies..."
python -m pip install --upgrade pip
python -m pip install -r requirements.txt

Write-Status "Python environment setup completed"

# Build Docker images (optional for development)
Write-Header "Preparing Docker Environment..."

Write-Status "Pulling required Docker images..."
docker pull redis:alpine
docker pull postgres:13

Write-Status "Docker environment prepared"

# Start services
Write-Header "Starting Services..."

Write-Status "Starting Redis cache..."
Start-Process -NoNewWindow -FilePath "docker" -ArgumentList "run", "-d", "--name", "scorpius-redis", "-p", "6379:6379", "redis:alpine"

Write-Status "Waiting for services to be ready..."
Start-Sleep -Seconds 3

# Start API server
Write-Header "Starting Scorpius API Server..."

Write-Status "Starting API server in background..."
$apiProcess = Start-Process -NoNewWindow -FilePath "python" -ArgumentList "start_server.py" -PassThru

Write-Status "Waiting for API server to be ready..."
Start-Sleep -Seconds 8

# Test API endpoints
if (-not $SkipTests) {
    Write-Header "Testing API Endpoints..."
    
    Write-Status "Running API tests..."
    try {
        python test_api.py --url http://localhost:8080
        Write-Status "API tests completed successfully"
    } catch {
        Write-Warning "Some API tests failed, but the server should be running"
    }
}

# Show final status
Write-Header "Setup Complete!"
Write-Host ""
Write-Status "Scorpius Enterprise is now running:"
Write-Host "  â€¢ API Server: http://localhost:8080" -ForegroundColor White
Write-Host "  â€¢ API Documentation: http://localhost:8080/docs" -ForegroundColor White
Write-Host "  â€¢ Interactive API: http://localhost:8080/redoc" -ForegroundColor White
Write-Host ""
Write-Status "Configuration files:"
Write-Host "  â€¢ Environment: .env" -ForegroundColor White
Write-Host "  â€¢ API Documentation: docs\api-documentation.md" -ForegroundColor White
Write-Host "  â€¢ Frontend Integration: docs\frontend-integration-plan.md" -ForegroundColor White
Write-Host ""
Write-Status "Management commands:"
Write-Host "  â€¢ Start API: python start_server.py" -ForegroundColor White
Write-Host "  â€¢ Test API: python test_api.py" -ForegroundColor White
Write-Host "  â€¢ Production Deploy: .\deploy-enhanced.sh" -ForegroundColor White
Write-Host ""
Write-Status "For frontend development, see docs\frontend-integration-plan.md"
Write-Host ""

# Cleanup function
function Cleanup {
    Write-Header "Cleaning up..."
    if ($apiProcess -and -not $apiProcess.HasExited) {
        Write-Status "Stopping API server..."
        Stop-Process -Id $apiProcess.Id -Force -ErrorAction SilentlyContinue
    }
    
    Write-Status "Stopping Redis container..."
    docker stop scorpius-redis -ErrorAction SilentlyContinue | Out-Null
    docker rm scorpius-redis -ErrorAction SilentlyContinue | Out-Null
}

# Register cleanup on script exit
Register-EngineEvent PowerShell.Exiting -Action { Cleanup }

# Keep the script running
Write-Status "Press Ctrl+C to stop all services..."
Write-Status "API server is running with PID: $($apiProcess.Id)"

try {
    Wait-Process -Id $apiProcess.Id
} catch {
    Write-Status "API server process ended"
}

Cleanup
